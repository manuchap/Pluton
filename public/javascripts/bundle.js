/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./javascripts/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./javascripts/app.js":
/*!****************************!*\
  !*** ./javascripts/app.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(/*! ./jquery.js */ "./javascripts/jquery.js");

var _jquery2 = _interopRequireDefault(_jquery);

__webpack_require__(/*! ./jquery.mixitup.js */ "./javascripts/jquery.mixitup.js");

__webpack_require__(/*! ./bootstrap.js */ "./javascripts/bootstrap.js");

__webpack_require__(/*! ./jquery.bxslider.js */ "./javascripts/jquery.bxslider.js");

__webpack_require__(/*! ./jquery.cslider.js */ "./javascripts/jquery.cslider.js");

__webpack_require__(/*! ./jquery.placeholder.js */ "./javascripts/jquery.placeholder.js");

__webpack_require__(/*! ./jquery.inview.js */ "./javascripts/jquery.inview.js");

__webpack_require__(/*! ./appli.js */ "./javascripts/appli.js");

__webpack_require__(/*! ../stylesheets/app.scss */ "./stylesheets/app.scss");

var _manager = __webpack_require__(/*! ./sections/_manager */ "./javascripts/sections/_manager.js");

var _manager2 = _interopRequireDefault(_manager);

var _sections = __webpack_require__(/*! ./sections */ "./javascripts/sections/index.js");

var Sections = _interopRequireWildcard(_sections);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Import the classes required to handle sections
// === Wagon main javascript file ===
document.addEventListener('DOMContentLoaded', function (event) {

  // Load all the sections
  var sectionsManager = new _manager2.default();

  // Register sections here. DO NOT REMOVE OR UPDATE THIS LINE
  sectionsManager.registerSection('contact', Sections.Contact);
  sectionsManager.registerSection('price', Sections.Price);
  sectionsManager.registerSection('clients', Sections.Client);
  sectionsManager.registerSection('about', Sections.About);
  sectionsManager.registerSection('portfolio', Sections.Portfolio);
  sectionsManager.registerSection('service', Sections.Service);
  sectionsManager.registerSection('home', Sections.Home);

  sectionsManager.start();
});

// Tell Webpack to load the style

/***/ }),

/***/ "./javascripts/appli.js":
/*!******************************!*\
  !*** ./javascripts/appli.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * A Design by GraphBerry
 * Author: GraphBerry
 * Author URL: http://graphberry.com
 * License: http://graphberry.com/pages/license
 */

jQuery(document).ready(function ($) {
  var lastId,
      topMenu = $("#top-navigation"),
      topMenuHeight = topMenu.outerHeight(),

  // All list items
  menuItems = topMenu.find("a"),

  // Anchors corresponding to menu items
  scrollItems = menuItems.map(function () {
    var href = $(this).attr("href");
    if (href.indexOf("#") === 0) {
      var item = $($(this).attr("href"));
      if (item.length) {
        return item;
      }
    }
  });
  //Get width of container
  var containerWidth = $('.section .container').width();
  //Resize animated triangle
  $(".triangle").css({
    "border-left": containerWidth / 2 + 'px outset transparent',
    "border-right": containerWidth / 2 + 'px outset transparent'
  });
  $(window).resize(function () {
    containerWidth = $('.container').width();
    $(".triangle").css({
      "border-left": containerWidth / 2 + 'px outset transparent',
      "border-right": containerWidth / 2 + 'px outset transparent'
    });
  });
  //Initialize header slider.
  $('#da-slider').cslider();
  //Initial mixitup, used for animated filtering portgolio.
  $('#portfolio-grid').mixitup({
    'onMixStart': function onMixStart(config) {
      $('div.toggleDiv').hide();
    }
  });
  //Initial Out clients slider in client section
  $('#clint-slider').bxSlider({
    pager: false,
    minSlides: 1,
    maxSlides: 5,
    moveSlides: 2,
    slideWidth: 210,
    slideMargin: 25,
    prevSelector: $('#client-prev'),
    nextSelector: $('#client-next'),
    prevText: '<i class="icon-left-open"></i>',
    nextText: '<i class="icon-right-open"></i>'
  });
  $('input, textarea').placeholder();
  // Bind to scroll
  $(window).scroll(function () {
    //Display or hide scroll to top button
    if ($(this).scrollTop() > 100) {
      $('.scrollup').fadeIn();
    } else {
      $('.scrollup').fadeOut();
    }
    if ($(this).scrollTop() > 130) {
      $('.navbar').addClass('navbar-fixed-top animated fadeInDown');
    } else {
      $('.navbar').removeClass('navbar-fixed-top animated fadeInDown');
    }
    // Get container scroll position
    var fromTop = $(this).scrollTop() + topMenuHeight + 10;
    // Get id of current scroll item
    var cur = scrollItems.map(function () {
      if ($(this).offset().top < fromTop) return this;
    });
    // Get the id of the current element
    cur = cur[cur.length - 1];
    var id = cur && cur.length ? cur[0].id : "";
    if (lastId !== id) {
      lastId = id;
      // Set/remove active class
      menuItems.parent().removeClass("active").end().filter("[href=#" + id + "]").parent().addClass("active");
    }
  });
  /*
  Function for scroliing to top
  ************************************/
  $('.scrollup').click(function () {
    $("html, body").animate({
      scrollTop: 0
    }, 600);
    return false;
  });
  $(window).load(function () {
    function filterPath(string) {
      return string.replace(/^\//, '').replace(/(index|default).[a-zA-Z]{3,4}$/, '').replace(/\/$/, '');
    }
    $('a[href*=#]').each(function () {
      if (filterPath(location.pathname) == filterPath(this.pathname) && location.hostname == this.hostname && this.hash.replace(/#/, '')) {
        var $targetId = $(this.hash),
            $targetAnchor = $('[name=' + this.hash.slice(1) + ']');
        var $target = $targetId.length ? $targetId : $targetAnchor.length ? $targetAnchor : false;
        if ($target) {
          $(this).click(function () {
            //Hack collapse top navigation after clicking
            topMenu.parent().attr('style', 'height:0px').removeClass('in'); //Close navigation
            $('.navbar .btn-navbar').addClass('collapsed');
            var targetOffset = $target.offset().top - 63;
            $('html, body').animate({
              scrollTop: targetOffset
            }, 800);
            return false;
          });
        }
      }
    });
  });
  /*
  Send newsletter
  **********************************************************************/
  $('#subscribe').click(function () {
    var error = false;
    var emailCompare = /^([a-z0-9_.-]+)@([0-9a-z.-]+).([a-z.]{2,6})$/; // Syntax to compare against input
    var email = $('input#nlmail').val().toLowerCase(); // get the value of the input field
    if (email == "" || email == " " || !emailCompare.test(email)) {
      $('#err-subscribe').show(500);
      $('#err-subscribe').delay(4000);
      $('#err-subscribe').animate({
        height: 'toggle'
      }, 500, function () {
        // Animation complete.
      });
      error = true; // change the error state to true
    }
    if (error === false) {
      $.ajax({
        type: 'POST',
        url: 'php/newsletter.php',
        data: {
          email: $('#nlmail').val()
        },
        error: function error(request, _error) {
          alert("An error occurred");
        },
        success: function success(response) {
          if (response == 'OK') {
            $('#success-subscribe').show();
            $('#nlmail').val('');
          } else {
            alert("An error occurred");
          }
        }
      });
    }
    return false;
  });
  /*
  Send mail
  **********************************************************************/
  $("#send-mail").click(function () {
    var name = $('input#name').val(); // get the value of the input field
    var error = false;
    if (name == "" || name == " ") {
      $('#err-name').show(500);
      $('#err-name').delay(4000);
      $('#err-name').animate({
        height: 'toggle'
      }, 500, function () {
        // Animation complete.
      });
      error = true; // change the error state to true
    }
    var emailCompare = /^([a-z0-9_.-]+)@([da-z.-]+).([a-z.]{2,6})$/; // Syntax to compare against input
    var email = $('input#email').val().toLowerCase(); // get the value of the input field
    if (email == "" || email == " " || !emailCompare.test(email)) {
      $('#err-email').show(500);
      $('#err-email').delay(4000);
      $('#err-email').animate({
        height: 'toggle'
      }, 500, function () {
        // Animation complete.
      });
      error = true; // change the error state to true
    }
    var comment = $('textarea#comment').val(); // get the value of the input field
    if (comment == "" || comment == " ") {
      $('#err-comment').show(500);
      $('#err-comment').delay(4000);
      $('#err-comment').animate({
        height: 'toggle'
      }, 500, function () {
        // Animation complete.
      });
      error = true; // change the error state to true
    }
    if (error == false) {
      var dataString = $('#contact-form').serialize(); // Collect data from form
      $.ajax({
        type: "POST",
        url: $('#contact-form').attr('action'),
        data: dataString,
        timeout: 6000,
        error: function error(request, _error2) {},
        success: function success(response) {
          response = $.parseJSON(response);
          if (response.success) {
            $('#successSend').show();
            $("#name").val('');
            $("#email").val('');
            $("#comment").val('');
          } else {
            $('#errorSend').show();
          }
        }
      });
      return false;
    }
    return false; // stops user browser being directed to the php file
  });
  //Function for show or hide portfolio desctiption.
  $.fn.showHide = function (options) {
    var defaults = {
      speed: 1000,
      easing: '',
      changeText: 0,
      showText: 'Show',
      hideText: 'Hide'
    };
    var options = $.extend(defaults, options);
    $(this).click(function () {
      $('.toggleDiv').slideUp(options.speed, options.easing);
      var toggleClick = $(this);
      var toggleDiv = $(this).attr('rel');
      $(toggleDiv).slideToggle(options.speed, options.easing, function () {
        if (options.changeText == 1) {
          $(toggleDiv).is(":visible") ? toggleClick.text(options.hideText) : toggleClick.text(options.showText);
        }
      });
      return false;
    });
  };
  //Initial Show/Hide portfolio element.
  $('div.toggleDiv').hide();
  $('.show_hide').showHide({
    speed: 500,
    changeText: 0,
    showText: 'View',
    hideText: 'Close'
  });
  /************************
  Animate elements
  *************************/
  //Animate thumbnails
  jQuery('.thumbnail').one('inview', function (event, visible) {
    if (visible == true) {
      jQuery(this).addClass("animated fadeInDown");
    } else {
      jQuery(this).removeClass("animated fadeInDown");
    }
  });
  //Animate triangles
  jQuery('.triangle').bind('inview', function (event, visible) {
    if (visible == true) {
      jQuery(this).addClass("animated fadeInDown");
    } else {
      jQuery(this).removeClass("animated fadeInDown");
    }
  });
  //animate first team member
  jQuery('#person-0').bind('inview', function (event, visible) {
    if (visible == true) {
      jQuery('#person-0').addClass("animated pulse");
    } else {
      jQuery('#person-0').removeClass("animated pulse");
    }
  });
  //animate second team member
  jQuery('#person-1').bind('inview', function (event, visible) {
    if (visible == true) {
      jQuery('#person-1').addClass("animated pulse");
    } else {
      jQuery('#person-1').removeClass("animated pulse");
    }
  });
  //animate thrid team member
  jQuery('#person-2').bind('inview', function (event, visible) {
    if (visible == true) {
      jQuery('#person-2').addClass("animated pulse");
    } else {
      jQuery('#person-2').removeClass("animated pulse");
    }
  });
  //Animate price columns
  jQuery('.price-column, .testimonial').bind('inview', function (event, visible) {
    if (visible == true) {
      jQuery(this).addClass("animated fadeInDown");
    } else {
      jQuery(this).removeClass("animated fadeInDown");
    }
  });
  //Animate contact form
  jQuery('.contact-form').bind('inview', function (event, visible) {
    if (visible == true) {
      jQuery('.contact-form').addClass("animated bounceIn");
    } else {
      jQuery('.contact-form').removeClass("animated bounceIn");
    }
  });
  //Animate skill bars
  jQuery('.skills > li > span').one('inview', function (event, visible) {
    if (visible == true) {
      jQuery(this).each(function () {
        jQuery(this).animate({
          width: jQuery(this).attr('data-width')
        }, 3000);
      });
    }
  });
});
//Initialize google map for contact setion with your location.
window.initializeMap = function () {
  var lat = '44.8164056'; //Set your latitude.
  var lon = '20.46090424'; //Set your longitude.
  var centerLon = lon - 0.0105;
  var myOptions = {
    scrollwheel: false,
    draggable: false,
    disableDefaultUI: true,
    center: new google.maps.LatLng(lat, centerLon),
    zoom: 15,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  //Bind map to elemet with id map-canvas
  var map = new google.maps.Map(document.getElementById('map-canvas'), myOptions);
  var marker = new google.maps.Marker({
    map: map,
    position: new google.maps.LatLng(lat, lon)
  });
  var infowindow = new google.maps.InfoWindow({
    content: "Your content goes here!"
  });
  google.maps.event.addListener(marker, 'click', function () {
    infowindow.open(map, marker);
  });
  infowindow.open(map, marker);
};

/***/ }),

/***/ "./javascripts/bootstrap.js":
/*!**********************************!*\
  !*** ./javascripts/bootstrap.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* ===================================================
 * bootstrap-transition.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#transitions
 * ===================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!function ($) {

  "use strict"; // jshint ;_;


  /* CSS TRANSITION SUPPORT (http://www.modernizr.com/)
   * ======================================================= */

  $(function () {

    $.support.transition = function () {

      var transitionEnd = function () {

        var el = document.createElement('bootstrap'),
            transEndEventNames = {
          'WebkitTransition': 'webkitTransitionEnd',
          'MozTransition': 'transitionend',
          'OTransition': 'oTransitionEnd otransitionend',
          'transition': 'transitionend'
        },
            name;

        for (name in transEndEventNames) {
          if (el.style[name] !== undefined) {
            return transEndEventNames[name];
          }
        }
      }();

      return transitionEnd && {
        end: transitionEnd
      };
    }();
  });
}(window.jQuery);
/* =========================================================
 * bootstrap-modal.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#modals
 * =========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

!function ($) {

  "use strict"; // jshint ;_;


  /* MODAL CLASS DEFINITION
   * ====================== */

  var Modal = function Modal(element, options) {
    this.options = options;
    this.$element = $(element).delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this));
    this.options.remote && this.$element.find('.modal-body').load(this.options.remote);
  };

  Modal.prototype = {

    constructor: Modal,

    toggle: function toggle() {
      return this[!this.isShown ? 'show' : 'hide']();
    },

    show: function show() {
      var that = this,
          e = $.Event('show');

      this.$element.trigger(e);

      if (this.isShown || e.isDefaultPrevented()) return;

      this.isShown = true;

      this.escape();

      this.backdrop(function () {
        var transition = $.support.transition && that.$element.hasClass('fade');

        if (!that.$element.parent().length) {
          that.$element.appendTo(document.body); //don't move modals dom position
        }

        that.$element.show();

        if (transition) {
          that.$element[0].offsetWidth; // force reflow
        }

        that.$element.addClass('in').attr('aria-hidden', false);

        that.enforceFocus();

        transition ? that.$element.one($.support.transition.end, function () {
          that.$element.focus().trigger('shown');
        }) : that.$element.focus().trigger('shown');
      });
    },

    hide: function hide(e) {
      e && e.preventDefault();

      var that = this;

      e = $.Event('hide');

      this.$element.trigger(e);

      if (!this.isShown || e.isDefaultPrevented()) return;

      this.isShown = false;

      this.escape();

      $(document).off('focusin.modal');

      this.$element.removeClass('in').attr('aria-hidden', true);

      $.support.transition && this.$element.hasClass('fade') ? this.hideWithTransition() : this.hideModal();
    },

    enforceFocus: function enforceFocus() {
      var that = this;
      $(document).on('focusin.modal', function (e) {
        if (that.$element[0] !== e.target && !that.$element.has(e.target).length) {
          that.$element.focus();
        }
      });
    },

    escape: function escape() {
      var that = this;
      if (this.isShown && this.options.keyboard) {
        this.$element.on('keyup.dismiss.modal', function (e) {
          e.which == 27 && that.hide();
        });
      } else if (!this.isShown) {
        this.$element.off('keyup.dismiss.modal');
      }
    },

    hideWithTransition: function hideWithTransition() {
      var that = this,
          timeout = setTimeout(function () {
        that.$element.off($.support.transition.end);
        that.hideModal();
      }, 500);

      this.$element.one($.support.transition.end, function () {
        clearTimeout(timeout);
        that.hideModal();
      });
    },

    hideModal: function hideModal() {
      var that = this;
      this.$element.hide();
      this.backdrop(function () {
        that.removeBackdrop();
        that.$element.trigger('hidden');
      });
    },

    removeBackdrop: function removeBackdrop() {
      this.$backdrop && this.$backdrop.remove();
      this.$backdrop = null;
    },

    backdrop: function backdrop(callback) {
      var that = this,
          animate = this.$element.hasClass('fade') ? 'fade' : '';

      if (this.isShown && this.options.backdrop) {
        var doAnimate = $.support.transition && animate;

        this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);

        this.$backdrop.click(this.options.backdrop == 'static' ? $.proxy(this.$element[0].focus, this.$element[0]) : $.proxy(this.hide, this));

        if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

        this.$backdrop.addClass('in');

        if (!callback) return;

        doAnimate ? this.$backdrop.one($.support.transition.end, callback) : callback();
      } else if (!this.isShown && this.$backdrop) {
        this.$backdrop.removeClass('in');

        $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one($.support.transition.end, callback) : callback();
      } else if (callback) {
        callback();
      }
    }

    /* MODAL PLUGIN DEFINITION
     * ======================= */

  };var old = $.fn.modal;

  $.fn.modal = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('modal'),
          options = $.extend({}, $.fn.modal.defaults, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);
      if (!data) $this.data('modal', data = new Modal(this, options));
      if (typeof option == 'string') data[option]();else if (options.show) data.show();
    });
  };

  $.fn.modal.defaults = {
    backdrop: true,
    keyboard: true,
    show: true
  };

  $.fn.modal.Constructor = Modal;

  /* MODAL NO CONFLICT
   * ================= */

  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };

  /* MODAL DATA-API
   * ============== */

  $(document).on('click.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this),
        href = $this.attr('href'),
        $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
    ,
        option = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());

    e.preventDefault();

    $target.modal(option).one('hide', function () {
      $this.focus();
    });
  });
}(window.jQuery);

/* ============================================================
 * bootstrap-dropdown.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#dropdowns
 * ============================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */

!function ($) {

  "use strict"; // jshint ;_;


  /* DROPDOWN CLASS DEFINITION
   * ========================= */

  var toggle = '[data-toggle=dropdown]',
      Dropdown = function Dropdown(element) {
    var $el = $(element).on('click.dropdown.data-api', this.toggle);
    $('html').on('click.dropdown.data-api', function () {
      $el.parent().removeClass('open');
    });
  };

  Dropdown.prototype = {

    constructor: Dropdown,

    toggle: function toggle(e) {
      var $this = $(this),
          $parent,
          isActive;

      if ($this.is('.disabled, :disabled')) return;

      $parent = getParent($this);

      isActive = $parent.hasClass('open');

      clearMenus();

      if (!isActive) {
        if ('ontouchstart' in document.documentElement) {
          // if mobile we we use a backdrop because click events don't delegate
          $('<div class="dropdown-backdrop"/>').insertBefore($(this)).on('click', clearMenus);
        }
        $parent.toggleClass('open');
      }

      $this.focus();

      return false;
    },

    keydown: function keydown(e) {
      var $this, $items, $active, $parent, isActive, index;

      if (!/(38|40|27)/.test(e.keyCode)) return;

      $this = $(this);

      e.preventDefault();
      e.stopPropagation();

      if ($this.is('.disabled, :disabled')) return;

      $parent = getParent($this);

      isActive = $parent.hasClass('open');

      if (!isActive || isActive && e.keyCode == 27) {
        if (e.which == 27) $parent.find(toggle).focus();
        return $this.click();
      }

      $items = $('[role=menu] li:not(.divider):visible a', $parent);

      if (!$items.length) return;

      index = $items.index($items.filter(':focus'));

      if (e.keyCode == 38 && index > 0) index--; // up
      if (e.keyCode == 40 && index < $items.length - 1) index++; // down
      if (!~index) index = 0;

      $items.eq(index).focus();
    }

  };

  function clearMenus() {
    $('.dropdown-backdrop').remove();
    $(toggle).each(function () {
      getParent($(this)).removeClass('open');
    });
  }

  function getParent($this) {
    var selector = $this.attr('data-target'),
        $parent;

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); //strip for ie7
    }

    $parent = selector && $(selector);

    if (!$parent || !$parent.length) $parent = $this.parent();

    return $parent;
  }

  /* DROPDOWN PLUGIN DEFINITION
   * ========================== */

  var old = $.fn.dropdown;

  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('dropdown');
      if (!data) $this.data('dropdown', data = new Dropdown(this));
      if (typeof option == 'string') data[option].call($this);
    });
  };

  $.fn.dropdown.Constructor = Dropdown;

  /* DROPDOWN NO CONFLICT
   * ==================== */

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old;
    return this;
  };

  /* APPLY TO STANDARD DROPDOWN ELEMENTS
   * =================================== */

  $(document).on('click.dropdown.data-api', clearMenus).on('click.dropdown.data-api', '.dropdown form', function (e) {
    e.stopPropagation();
  }).on('click.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.dropdown.data-api', toggle + ', [role=menu]', Dropdown.prototype.keydown);
}(window.jQuery);

/* =============================================================
 * bootstrap-scrollspy.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#scrollspy
 * =============================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================== */

!function ($) {

  "use strict"; // jshint ;_;


  /* SCROLLSPY CLASS DEFINITION
   * ========================== */

  function ScrollSpy(element, options) {
    var process = $.proxy(this.process, this),
        $element = $(element).is('body') ? $(window) : $(element),
        href;
    this.options = $.extend({}, $.fn.scrollspy.defaults, options);
    this.$scrollElement = $element.on('scroll.scroll-spy.data-api', process);
    this.selector = (this.options.target || (href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
    || '') + ' .nav li > a';
    this.$body = $('body');
    this.refresh();
    this.process();
  }

  ScrollSpy.prototype = {

    constructor: ScrollSpy,

    refresh: function refresh() {
      var self = this,
          $targets;

      this.offsets = $([]);
      this.targets = $([]);

      $targets = this.$body.find(this.selector).map(function () {
        var $el = $(this),
            href = $el.data('target') || $el.attr('href'),
            $href = /^#\w/.test(href) && $(href);
        return $href && $href.length && [[$href.position().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href]] || null;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).each(function () {
        self.offsets.push(this[0]);
        self.targets.push(this[1]);
      });
    },

    process: function process() {
      var scrollTop = this.$scrollElement.scrollTop() + this.options.offset,
          scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight,
          maxScroll = scrollHeight - this.$scrollElement.height(),
          offsets = this.offsets,
          targets = this.targets,
          activeTarget = this.activeTarget,
          i;

      if (scrollTop >= maxScroll) {
        return activeTarget != (i = targets.last()[0]) && this.activate(i);
      }

      for (i = offsets.length; i--;) {
        activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
      }
    },

    activate: function activate(target) {
      var active, selector;

      this.activeTarget = target;

      $(this.selector).parent('.active').removeClass('active');

      selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';

      active = $(selector).parent('li').addClass('active');

      if (active.parent('.dropdown-menu').length) {
        active = active.closest('li.dropdown').addClass('active');
      }

      active.trigger('activate');
    }

    /* SCROLLSPY PLUGIN DEFINITION
     * =========================== */

  };var old = $.fn.scrollspy;

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('scrollspy'),
          options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;
      if (!data) $this.data('scrollspy', data = new ScrollSpy(this, options));
      if (typeof option == 'string') data[option]();
    });
  };

  $.fn.scrollspy.Constructor = ScrollSpy;

  $.fn.scrollspy.defaults = {
    offset: 10

    /* SCROLLSPY NO CONFLICT
     * ===================== */

  };$.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old;
    return this;
  };

  /* SCROLLSPY DATA-API
   * ================== */

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this);
      $spy.scrollspy($spy.data());
    });
  });
}(window.jQuery);
/* ========================================================
 * bootstrap-tab.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#tabs
 * ========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================== */

!function ($) {

  "use strict"; // jshint ;_;


  /* TAB CLASS DEFINITION
   * ==================== */

  var Tab = function Tab(element) {
    this.element = $(element);
  };

  Tab.prototype = {

    constructor: Tab,

    show: function show() {
      var $this = this.element,
          $ul = $this.closest('ul:not(.dropdown-menu)'),
          selector = $this.attr('data-target'),
          previous,
          $target,
          e;

      if (!selector) {
        selector = $this.attr('href');
        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); //strip for ie7
      }

      if ($this.parent('li').hasClass('active')) return;

      previous = $ul.find('.active:last a')[0];

      e = $.Event('show', {
        relatedTarget: previous
      });

      $this.trigger(e);

      if (e.isDefaultPrevented()) return;

      $target = $(selector);

      this.activate($this.parent('li'), $ul);
      this.activate($target, $target.parent(), function () {
        $this.trigger({
          type: 'shown',
          relatedTarget: previous
        });
      });
    },

    activate: function activate(element, container, callback) {
      var $active = container.find('> .active'),
          transition = callback && $.support.transition && $active.hasClass('fade');

      function next() {
        $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active');

        element.addClass('active');

        if (transition) {
          element[0].offsetWidth; // reflow for transition
          element.addClass('in');
        } else {
          element.removeClass('fade');
        }

        if (element.parent('.dropdown-menu')) {
          element.closest('li.dropdown').addClass('active');
        }

        callback && callback();
      }

      transition ? $active.one($.support.transition.end, next) : next();

      $active.removeClass('in');
    }

    /* TAB PLUGIN DEFINITION
     * ===================== */

  };var old = $.fn.tab;

  $.fn.tab = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('tab');
      if (!data) $this.data('tab', data = new Tab(this));
      if (typeof option == 'string') data[option]();
    });
  };

  $.fn.tab.Constructor = Tab;

  /* TAB NO CONFLICT
   * =============== */

  $.fn.tab.noConflict = function () {
    $.fn.tab = old;
    return this;
  };

  /* TAB DATA-API
   * ============ */

  $(document).on('click.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault();
    $(this).tab('show');
  });
}(window.jQuery);
/* ===========================================================
 * bootstrap-tooltip.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!function ($) {

  "use strict"; // jshint ;_;


  /* TOOLTIP PUBLIC CLASS DEFINITION
   * =============================== */

  var Tooltip = function Tooltip(element, options) {
    this.init('tooltip', element, options);
  };

  Tooltip.prototype = {

    constructor: Tooltip,

    init: function init(type, element, options) {
      var eventIn, eventOut, triggers, trigger, i;

      this.type = type;
      this.$element = $(element);
      this.options = this.getOptions(options);
      this.enabled = true;

      triggers = this.options.trigger.split(' ');

      for (i = triggers.length; i--;) {
        trigger = triggers[i];
        if (trigger == 'click') {
          this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
        } else if (trigger != 'manual') {
          eventIn = trigger == 'hover' ? 'mouseenter' : 'focus';
          eventOut = trigger == 'hover' ? 'mouseleave' : 'blur';
          this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
          this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
        }
      }

      this.options.selector ? this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' }) : this.fixTitle();
    },

    getOptions: function getOptions(options) {
      options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options);

      if (options.delay && typeof options.delay == 'number') {
        options.delay = {
          show: options.delay,
          hide: options.delay
        };
      }

      return options;
    },

    enter: function enter(e) {
      var defaults = $.fn[this.type].defaults,
          options = {},
          self;

      this._options && $.each(this._options, function (key, value) {
        if (defaults[key] != value) options[key] = value;
      }, this);

      self = $(e.currentTarget)[this.type](options).data(this.type);

      if (!self.options.delay || !self.options.delay.show) return self.show();

      clearTimeout(this.timeout);
      self.hoverState = 'in';
      this.timeout = setTimeout(function () {
        if (self.hoverState == 'in') self.show();
      }, self.options.delay.show);
    },

    leave: function leave(e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type);

      if (this.timeout) clearTimeout(this.timeout);
      if (!self.options.delay || !self.options.delay.hide) return self.hide();

      self.hoverState = 'out';
      this.timeout = setTimeout(function () {
        if (self.hoverState == 'out') self.hide();
      }, self.options.delay.hide);
    },

    show: function show() {
      var $tip,
          pos,
          actualWidth,
          actualHeight,
          placement,
          tp,
          e = $.Event('show');

      if (this.hasContent() && this.enabled) {
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        $tip = this.tip();
        this.setContent();

        if (this.options.animation) {
          $tip.addClass('fade');
        }

        placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;

        $tip.detach().css({ top: 0, left: 0, display: 'block' });

        this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);

        pos = this.getPosition();

        actualWidth = $tip[0].offsetWidth;
        actualHeight = $tip[0].offsetHeight;

        switch (placement) {
          case 'bottom':
            tp = { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 };
            break;
          case 'top':
            tp = { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 };
            break;
          case 'left':
            tp = { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth };
            break;
          case 'right':
            tp = { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
            break;
        }

        this.applyPlacement(tp, placement);
        this.$element.trigger('shown');
      }
    },

    applyPlacement: function applyPlacement(offset, placement) {
      var $tip = this.tip(),
          width = $tip[0].offsetWidth,
          height = $tip[0].offsetHeight,
          actualWidth,
          actualHeight,
          delta,
          replace;

      $tip.offset(offset).addClass(placement).addClass('in');

      actualWidth = $tip[0].offsetWidth;
      actualHeight = $tip[0].offsetHeight;

      if (placement == 'top' && actualHeight != height) {
        offset.top = offset.top + height - actualHeight;
        replace = true;
      }

      if (placement == 'bottom' || placement == 'top') {
        delta = 0;

        if (offset.left < 0) {
          delta = offset.left * -2;
          offset.left = 0;
          $tip.offset(offset);
          actualWidth = $tip[0].offsetWidth;
          actualHeight = $tip[0].offsetHeight;
        }

        this.replaceArrow(delta - width + actualWidth, actualWidth, 'left');
      } else {
        this.replaceArrow(actualHeight - height, actualHeight, 'top');
      }

      if (replace) $tip.offset(offset);
    },

    replaceArrow: function replaceArrow(delta, dimension, position) {
      this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + "%" : '');
    },

    setContent: function setContent() {
      var $tip = this.tip(),
          title = this.getTitle();

      $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
      $tip.removeClass('fade in top bottom left right');
    },

    hide: function hide() {
      var that = this,
          $tip = this.tip(),
          e = $.Event('hide');

      this.$element.trigger(e);
      if (e.isDefaultPrevented()) return;

      $tip.removeClass('in');

      function removeWithAnimation() {
        var timeout = setTimeout(function () {
          $tip.off($.support.transition.end).detach();
        }, 500);

        $tip.one($.support.transition.end, function () {
          clearTimeout(timeout);
          $tip.detach();
        });
      }

      $.support.transition && this.$tip.hasClass('fade') ? removeWithAnimation() : $tip.detach();

      this.$element.trigger('hidden');

      return this;
    },

    fixTitle: function fixTitle() {
      var $e = this.$element;
      if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
        $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
      }
    },

    hasContent: function hasContent() {
      return this.getTitle();
    },

    getPosition: function getPosition() {
      var el = this.$element[0];
      return $.extend({}, typeof el.getBoundingClientRect == 'function' ? el.getBoundingClientRect() : {
        width: el.offsetWidth,
        height: el.offsetHeight
      }, this.$element.offset());
    },

    getTitle: function getTitle() {
      var title,
          $e = this.$element,
          o = this.options;

      title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);

      return title;
    },

    tip: function tip() {
      return this.$tip = this.$tip || $(this.options.template);
    },

    arrow: function arrow() {
      return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
    },

    validate: function validate() {
      if (!this.$element[0].parentNode) {
        this.hide();
        this.$element = null;
        this.options = null;
      }
    },

    enable: function enable() {
      this.enabled = true;
    },

    disable: function disable() {
      this.enabled = false;
    },

    toggleEnabled: function toggleEnabled() {
      this.enabled = !this.enabled;
    },

    toggle: function toggle(e) {
      var self = e ? $(e.currentTarget)[this.type](this._options).data(this.type) : this;
      self.tip().hasClass('in') ? self.hide() : self.show();
    },

    destroy: function destroy() {
      this.hide().$element.off('.' + this.type).removeData(this.type);
    }

    /* TOOLTIP PLUGIN DEFINITION
     * ========================= */

  };var old = $.fn.tooltip;

  $.fn.tooltip = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('tooltip'),
          options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;
      if (!data) $this.data('tooltip', data = new Tooltip(this, options));
      if (typeof option == 'string') data[option]();
    });
  };

  $.fn.tooltip.Constructor = Tooltip;

  $.fn.tooltip.defaults = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false

    /* TOOLTIP NO CONFLICT
     * =================== */

  };$.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old;
    return this;
  };
}(window.jQuery);

/* ===========================================================
 * bootstrap-popover.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#popovers
 * ===========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================================================== */

!function ($) {

  "use strict"; // jshint ;_;


  /* POPOVER PUBLIC CLASS DEFINITION
   * =============================== */

  var Popover = function Popover(element, options) {
    this.init('popover', element, options);
  };

  /* NOTE: POPOVER EXTENDS BOOTSTRAP-TOOLTIP.js
     ========================================== */

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {

    constructor: Popover,

    setContent: function setContent() {
      var $tip = this.tip(),
          title = this.getTitle(),
          content = this.getContent();

      $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
      $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content);

      $tip.removeClass('fade top bottom left right in');
    },

    hasContent: function hasContent() {
      return this.getTitle() || this.getContent();
    },

    getContent: function getContent() {
      var content,
          $e = this.$element,
          o = this.options;

      content = (typeof o.content == 'function' ? o.content.call($e[0]) : o.content) || $e.attr('data-content');

      return content;
    },

    tip: function tip() {
      if (!this.$tip) {
        this.$tip = $(this.options.template);
      }
      return this.$tip;
    },

    destroy: function destroy() {
      this.hide().$element.off('.' + this.type).removeData(this.type);
    }

  });

  /* POPOVER PLUGIN DEFINITION
   * ======================= */

  var old = $.fn.popover;

  $.fn.popover = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('popover'),
          options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;
      if (!data) $this.data('popover', data = new Popover(this, options));
      if (typeof option == 'string') data[option]();
    });
  };

  $.fn.popover.Constructor = Popover;

  $.fn.popover.defaults = $.extend({}, $.fn.tooltip.defaults, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });

  /* POPOVER NO CONFLICT
   * =================== */

  $.fn.popover.noConflict = function () {
    $.fn.popover = old;
    return this;
  };
}(window.jQuery);

/* ==========================================================
 * bootstrap-affix.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#affix
 * ==========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!function ($) {

  "use strict"; // jshint ;_;


  /* AFFIX CLASS DEFINITION
   * ====================== */

  var Affix = function Affix(element, options) {
    this.options = $.extend({}, $.fn.affix.defaults, options);
    this.$window = $(window).on('scroll.affix.data-api', $.proxy(this.checkPosition, this)).on('click.affix.data-api', $.proxy(function () {
      setTimeout($.proxy(this.checkPosition, this), 1);
    }, this));
    this.$element = $(element);
    this.checkPosition();
  };

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return;

    var scrollHeight = $(document).height(),
        scrollTop = this.$window.scrollTop(),
        position = this.$element.offset(),
        offset = this.options.offset,
        offsetBottom = offset.bottom,
        offsetTop = offset.top,
        reset = 'affix affix-top affix-bottom',
        affix;

    if ((typeof offset === 'undefined' ? 'undefined' : _typeof(offset)) != 'object') offsetBottom = offsetTop = offset;
    if (typeof offsetTop == 'function') offsetTop = offset.top();
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom();

    affix = this.unpin != null && scrollTop + this.unpin <= position.top ? false : offsetBottom != null && position.top + this.$element.height() >= scrollHeight - offsetBottom ? 'bottom' : offsetTop != null && scrollTop <= offsetTop ? 'top' : false;

    if (this.affixed === affix) return;

    this.affixed = affix;
    this.unpin = affix == 'bottom' ? position.top - scrollTop : null;

    this.$element.removeClass(reset).addClass('affix' + (affix ? '-' + affix : ''));
  };

  /* AFFIX PLUGIN DEFINITION
   * ======================= */

  var old = $.fn.affix;

  $.fn.affix = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('affix'),
          options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;
      if (!data) $this.data('affix', data = new Affix(this, options));
      if (typeof option == 'string') data[option]();
    });
  };

  $.fn.affix.Constructor = Affix;

  $.fn.affix.defaults = {
    offset: 0

    /* AFFIX NO CONFLICT
     * ================= */

  };$.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };

  /* AFFIX DATA-API
   * ============== */

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this),
          data = $spy.data();

      data.offset = data.offset || {};

      data.offsetBottom && (data.offset.bottom = data.offsetBottom);
      data.offsetTop && (data.offset.top = data.offsetTop);

      $spy.affix(data);
    });
  });
}(window.jQuery);
/* ==========================================================
 * bootstrap-alert.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#alerts
 * ==========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!function ($) {

  "use strict"; // jshint ;_;


  /* ALERT CLASS DEFINITION
   * ====================== */

  var dismiss = '[data-dismiss="alert"]',
      Alert = function Alert(el) {
    $(el).on('click', dismiss, this.close);
  };

  Alert.prototype.close = function (e) {
    var $this = $(this),
        selector = $this.attr('data-target'),
        $parent;

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); //strip for ie7
    }

    $parent = $(selector);

    e && e.preventDefault();

    $parent.length || ($parent = $this.hasClass('alert') ? $this : $this.parent());

    $parent.trigger(e = $.Event('close'));

    if (e.isDefaultPrevented()) return;

    $parent.removeClass('in');

    function removeElement() {
      $parent.trigger('closed').remove();
    }

    $.support.transition && $parent.hasClass('fade') ? $parent.on($.support.transition.end, removeElement) : removeElement();
  };

  /* ALERT PLUGIN DEFINITION
   * ======================= */

  var old = $.fn.alert;

  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('alert');
      if (!data) $this.data('alert', data = new Alert(this));
      if (typeof option == 'string') data[option].call($this);
    });
  };

  $.fn.alert.Constructor = Alert;

  /* ALERT NO CONFLICT
   * ================= */

  $.fn.alert.noConflict = function () {
    $.fn.alert = old;
    return this;
  };

  /* ALERT DATA-API
   * ============== */

  $(document).on('click.alert.data-api', dismiss, Alert.prototype.close);
}(window.jQuery);
/* ============================================================
 * bootstrap-button.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#buttons
 * ============================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */

!function ($) {

  "use strict"; // jshint ;_;


  /* BUTTON PUBLIC CLASS DEFINITION
   * ============================== */

  var Button = function Button(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.button.defaults, options);
  };

  Button.prototype.setState = function (state) {
    var d = 'disabled',
        $el = this.$element,
        data = $el.data(),
        val = $el.is('input') ? 'val' : 'html';

    state = state + 'Text';
    data.resetText || $el.data('resetText', $el[val]());

    $el[val](data[state] || this.options[state]);

    // push to event loop to allow forms to submit
    setTimeout(function () {
      state == 'loadingText' ? $el.addClass(d).attr(d, d) : $el.removeClass(d).removeAttr(d);
    }, 0);
  };

  Button.prototype.toggle = function () {
    var $parent = this.$element.closest('[data-toggle="buttons-radio"]');

    $parent && $parent.find('.active').removeClass('active');

    this.$element.toggleClass('active');
  };

  /* BUTTON PLUGIN DEFINITION
   * ======================== */

  var old = $.fn.button;

  $.fn.button = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('button'),
          options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;
      if (!data) $this.data('button', data = new Button(this, options));
      if (option == 'toggle') data.toggle();else if (option) data.setState(option);
    });
  };

  $.fn.button.defaults = {
    loadingText: 'loading...'
  };

  $.fn.button.Constructor = Button;

  /* BUTTON NO CONFLICT
   * ================== */

  $.fn.button.noConflict = function () {
    $.fn.button = old;
    return this;
  };

  /* BUTTON DATA-API
   * =============== */

  $(document).on('click.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target);
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn');
    $btn.button('toggle');
  });
}(window.jQuery);
/* =============================================================
 * bootstrap-collapse.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#collapse
 * =============================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */

!function ($) {

  "use strict"; // jshint ;_;


  /* COLLAPSE PUBLIC CLASS DEFINITION
   * ================================ */

  var Collapse = function Collapse(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.collapse.defaults, options);

    if (this.options.parent) {
      this.$parent = $(this.options.parent);
    }

    this.options.toggle && this.toggle();
  };

  Collapse.prototype = {

    constructor: Collapse,

    dimension: function dimension() {
      var hasWidth = this.$element.hasClass('width');
      return hasWidth ? 'width' : 'height';
    },

    show: function show() {
      var dimension, scroll, actives, hasData;

      if (this.transitioning || this.$element.hasClass('in')) return;

      dimension = this.dimension();
      scroll = $.camelCase(['scroll', dimension].join('-'));
      actives = this.$parent && this.$parent.find('> .accordion-group > .in');

      if (actives && actives.length) {
        hasData = actives.data('collapse');
        if (hasData && hasData.transitioning) return;
        actives.collapse('hide');
        hasData || actives.data('collapse', null);
      }

      this.$element[dimension](0);
      this.transition('addClass', $.Event('show'), 'shown');
      $.support.transition && this.$element[dimension](this.$element[0][scroll]);
    },

    hide: function hide() {
      var dimension;
      if (this.transitioning || !this.$element.hasClass('in')) return;
      dimension = this.dimension();
      this.reset(this.$element[dimension]());
      this.transition('removeClass', $.Event('hide'), 'hidden');
      this.$element[dimension](0);
    },

    reset: function reset(size) {
      var dimension = this.dimension();

      this.$element.removeClass('collapse')[dimension](size || 'auto')[0].offsetWidth;

      this.$element[size !== null ? 'addClass' : 'removeClass']('collapse');

      return this;
    },

    transition: function transition(method, startEvent, completeEvent) {
      var that = this,
          complete = function complete() {
        if (startEvent.type == 'show') that.reset();
        that.transitioning = 0;
        that.$element.trigger(completeEvent);
      };

      this.$element.trigger(startEvent);

      if (startEvent.isDefaultPrevented()) return;

      this.transitioning = 1;

      this.$element[method]('in');

      $.support.transition && this.$element.hasClass('collapse') ? this.$element.one($.support.transition.end, complete) : complete();
    },

    toggle: function toggle() {
      this[this.$element.hasClass('in') ? 'hide' : 'show']();
    }

    /* COLLAPSE PLUGIN DEFINITION
     * ========================== */

  };var old = $.fn.collapse;

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('collapse'),
          options = $.extend({}, $.fn.collapse.defaults, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);
      if (!data) $this.data('collapse', data = new Collapse(this, options));
      if (typeof option == 'string') data[option]();
    });
  };

  $.fn.collapse.defaults = {
    toggle: true
  };

  $.fn.collapse.Constructor = Collapse;

  /* COLLAPSE NO CONFLICT
   * ==================== */

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old;
    return this;
  };

  /* COLLAPSE DATA-API
   * ================= */

  $(document).on('click.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this = $(this),
        href,
        target = $this.attr('data-target') || e.preventDefault() || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
    ,
        option = $(target).data('collapse') ? 'toggle' : $this.data();
    $this[$(target).hasClass('in') ? 'addClass' : 'removeClass']('collapsed');
    $(target).collapse(option);
  });
}(window.jQuery);
/* ==========================================================
 * bootstrap-carousel.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#carousel
 * ==========================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!function ($) {

  "use strict"; // jshint ;_;


  /* CAROUSEL CLASS DEFINITION
   * ========================= */

  var Carousel = function Carousel(element, options) {
    this.$element = $(element);
    this.$indicators = this.$element.find('.carousel-indicators');
    this.options = options;
    this.options.pause == 'hover' && this.$element.on('mouseenter', $.proxy(this.pause, this)).on('mouseleave', $.proxy(this.cycle, this));
  };

  Carousel.prototype = {

    cycle: function cycle(e) {
      if (!e) this.paused = false;
      if (this.interval) clearInterval(this.interval);
      this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
      return this;
    },

    getActiveIndex: function getActiveIndex() {
      this.$active = this.$element.find('.item.active');
      this.$items = this.$active.parent().children();
      return this.$items.index(this.$active);
    },

    to: function to(pos) {
      var activeIndex = this.getActiveIndex(),
          that = this;

      if (pos > this.$items.length - 1 || pos < 0) return;

      if (this.sliding) {
        return this.$element.one('slid', function () {
          that.to(pos);
        });
      }

      if (activeIndex == pos) {
        return this.pause().cycle();
      }

      return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]));
    },

    pause: function pause(e) {
      if (!e) this.paused = true;
      if (this.$element.find('.next, .prev').length && $.support.transition.end) {
        this.$element.trigger($.support.transition.end);
        this.cycle(true);
      }
      clearInterval(this.interval);
      this.interval = null;
      return this;
    },

    next: function next() {
      if (this.sliding) return;
      return this.slide('next');
    },

    prev: function prev() {
      if (this.sliding) return;
      return this.slide('prev');
    },

    slide: function slide(type, next) {
      var $active = this.$element.find('.item.active'),
          $next = next || $active[type](),
          isCycling = this.interval,
          direction = type == 'next' ? 'left' : 'right',
          fallback = type == 'next' ? 'first' : 'last',
          that = this,
          e;

      this.sliding = true;

      isCycling && this.pause();

      $next = $next.length ? $next : this.$element.find('.item')[fallback]();

      e = $.Event('slide', {
        relatedTarget: $next[0],
        direction: direction
      });

      if ($next.hasClass('active')) return;

      if (this.$indicators.length) {
        this.$indicators.find('.active').removeClass('active');
        this.$element.one('slid', function () {
          var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);
          $nextIndicator && $nextIndicator.addClass('active');
        });
      }

      if ($.support.transition && this.$element.hasClass('slide')) {
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        $next.addClass(type);
        $next[0].offsetWidth; // force reflow
        $active.addClass(direction);
        $next.addClass(direction);
        this.$element.one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active');
          $active.removeClass(['active', direction].join(' '));
          that.sliding = false;
          setTimeout(function () {
            that.$element.trigger('slid');
          }, 0);
        });
      } else {
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        $active.removeClass('active');
        $next.addClass('active');
        this.sliding = false;
        this.$element.trigger('slid');
      }

      isCycling && this.cycle();

      return this;
    }

    /* CAROUSEL PLUGIN DEFINITION
     * ========================== */

  };var old = $.fn.carousel;

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('carousel'),
          options = $.extend({}, $.fn.carousel.defaults, (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option),
          action = typeof option == 'string' ? option : options.slide;
      if (!data) $this.data('carousel', data = new Carousel(this, options));
      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();
    });
  };

  $.fn.carousel.defaults = {
    interval: 5000,
    pause: 'hover'
  };

  $.fn.carousel.Constructor = Carousel;

  /* CAROUSEL NO CONFLICT
   * ==================== */

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old;
    return this;
  };

  /* CAROUSEL DATA-API
   * ================= */

  $(document).on('click.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var $this = $(this),
        href,
        $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
    ,
        options = $.extend({}, $target.data(), $this.data()),
        slideIndex;

    $target.carousel(options);

    if (slideIndex = $this.attr('data-slide-to')) {
      $target.data('carousel').pause().to(slideIndex).cycle();
    }

    e.preventDefault();
  });
}(window.jQuery);
/* =============================================================
 * bootstrap-typeahead.js v2.3.2
 * http://getbootstrap.com/2.3.2/javascript.html#typeahead
 * =============================================================
 * Copyright 2013 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */

!function ($) {

  "use strict"; // jshint ;_;


  /* TYPEAHEAD PUBLIC CLASS DEFINITION
   * ================================= */

  var Typeahead = function Typeahead(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.typeahead.defaults, options);
    this.matcher = this.options.matcher || this.matcher;
    this.sorter = this.options.sorter || this.sorter;
    this.highlighter = this.options.highlighter || this.highlighter;
    this.updater = this.options.updater || this.updater;
    this.source = this.options.source;
    this.$menu = $(this.options.menu);
    this.shown = false;
    this.listen();
  };

  Typeahead.prototype = {

    constructor: Typeahead,

    select: function select() {
      var val = this.$menu.find('.active').attr('data-value');
      this.$element.val(this.updater(val)).change();
      return this.hide();
    },

    updater: function updater(item) {
      return item;
    },

    show: function show() {
      var pos = $.extend({}, this.$element.position(), {
        height: this.$element[0].offsetHeight
      });

      this.$menu.insertAfter(this.$element).css({
        top: pos.top + pos.height,
        left: pos.left
      }).show();

      this.shown = true;
      return this;
    },

    hide: function hide() {
      this.$menu.hide();
      this.shown = false;
      return this;
    },

    lookup: function lookup(event) {
      var items;

      this.query = this.$element.val();

      if (!this.query || this.query.length < this.options.minLength) {
        return this.shown ? this.hide() : this;
      }

      items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source;

      return items ? this.process(items) : this;
    },

    process: function process(items) {
      var that = this;

      items = $.grep(items, function (item) {
        return that.matcher(item);
      });

      items = this.sorter(items);

      if (!items.length) {
        return this.shown ? this.hide() : this;
      }

      return this.render(items.slice(0, this.options.items)).show();
    },

    matcher: function matcher(item) {
      return ~item.toLowerCase().indexOf(this.query.toLowerCase());
    },

    sorter: function sorter(items) {
      var beginswith = [],
          caseSensitive = [],
          caseInsensitive = [],
          item;

      while (item = items.shift()) {
        if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item);else if (~item.indexOf(this.query)) caseSensitive.push(item);else caseInsensitive.push(item);
      }

      return beginswith.concat(caseSensitive, caseInsensitive);
    },

    highlighter: function highlighter(item) {
      var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
      return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
        return '<strong>' + match + '</strong>';
      });
    },

    render: function render(items) {
      var that = this;

      items = $(items).map(function (i, item) {
        i = $(that.options.item).attr('data-value', item);
        i.find('a').html(that.highlighter(item));
        return i[0];
      });

      items.first().addClass('active');
      this.$menu.html(items);
      return this;
    },

    next: function next(event) {
      var active = this.$menu.find('.active').removeClass('active'),
          next = active.next();

      if (!next.length) {
        next = $(this.$menu.find('li')[0]);
      }

      next.addClass('active');
    },

    prev: function prev(event) {
      var active = this.$menu.find('.active').removeClass('active'),
          prev = active.prev();

      if (!prev.length) {
        prev = this.$menu.find('li').last();
      }

      prev.addClass('active');
    },

    listen: function listen() {
      this.$element.on('focus', $.proxy(this.focus, this)).on('blur', $.proxy(this.blur, this)).on('keypress', $.proxy(this.keypress, this)).on('keyup', $.proxy(this.keyup, this));

      if (this.eventSupported('keydown')) {
        this.$element.on('keydown', $.proxy(this.keydown, this));
      }

      this.$menu.on('click', $.proxy(this.click, this)).on('mouseenter', 'li', $.proxy(this.mouseenter, this)).on('mouseleave', 'li', $.proxy(this.mouseleave, this));
    },

    eventSupported: function eventSupported(eventName) {
      var isSupported = eventName in this.$element;
      if (!isSupported) {
        this.$element.setAttribute(eventName, 'return;');
        isSupported = typeof this.$element[eventName] === 'function';
      }
      return isSupported;
    },

    move: function move(e) {
      if (!this.shown) return;

      switch (e.keyCode) {
        case 9: // tab
        case 13: // enter
        case 27:
          // escape
          e.preventDefault();
          break;

        case 38:
          // up arrow
          e.preventDefault();
          this.prev();
          break;

        case 40:
          // down arrow
          e.preventDefault();
          this.next();
          break;
      }

      e.stopPropagation();
    },

    keydown: function keydown(e) {
      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40, 38, 9, 13, 27]);
      this.move(e);
    },

    keypress: function keypress(e) {
      if (this.suppressKeyPressRepeat) return;
      this.move(e);
    },

    keyup: function keyup(e) {
      switch (e.keyCode) {
        case 40: // down arrow
        case 38: // up arrow
        case 16: // shift
        case 17: // ctrl
        case 18:
          // alt
          break;

        case 9: // tab
        case 13:
          // enter
          if (!this.shown) return;
          this.select();
          break;

        case 27:
          // escape
          if (!this.shown) return;
          this.hide();
          break;

        default:
          this.lookup();
      }

      e.stopPropagation();
      e.preventDefault();
    },

    focus: function focus(e) {
      this.focused = true;
    },

    blur: function blur(e) {
      this.focused = false;
      if (!this.mousedover && this.shown) this.hide();
    },

    click: function click(e) {
      e.stopPropagation();
      e.preventDefault();
      this.select();
      this.$element.focus();
    },

    mouseenter: function mouseenter(e) {
      this.mousedover = true;
      this.$menu.find('.active').removeClass('active');
      $(e.currentTarget).addClass('active');
    },

    mouseleave: function mouseleave(e) {
      this.mousedover = false;
      if (!this.focused && this.shown) this.hide();
    }

    /* TYPEAHEAD PLUGIN DEFINITION
     * =========================== */

  };var old = $.fn.typeahead;

  $.fn.typeahead = function (option) {
    return this.each(function () {
      var $this = $(this),
          data = $this.data('typeahead'),
          options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;
      if (!data) $this.data('typeahead', data = new Typeahead(this, options));
      if (typeof option == 'string') data[option]();
    });
  };

  $.fn.typeahead.defaults = {
    source: [],
    items: 8,
    menu: '<ul class="typeahead dropdown-menu"></ul>',
    item: '<li><a href="#"></a></li>',
    minLength: 1
  };

  $.fn.typeahead.Constructor = Typeahead;

  /* TYPEAHEAD NO CONFLICT
   * =================== */

  $.fn.typeahead.noConflict = function () {
    $.fn.typeahead = old;
    return this;
  };

  /* TYPEAHEAD DATA-API
   * ================== */

  $(document).on('focus.typeahead.data-api', '[data-provide="typeahead"]', function (e) {
    var $this = $(this);
    if ($this.data('typeahead')) return;
    $this.typeahead($this.data());
  });
}(window.jQuery);

/***/ }),

/***/ "./javascripts/jquery.bxslider.js":
/*!****************************************!*\
  !*** ./javascripts/jquery.bxslider.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * BxSlider v4.1.1 - Fully loaded, responsive content slider
 * http://bxslider.com
 *
 * Copyright 2012, Steven Wanderski - http://stevenwanderski.com - http://bxcreative.com
 * Written while drinking Belgian ales and listening to jazz
 *
 * Released under the WTFPL license - http://sam.zoy.org/wtfpl/
 */

;(function ($) {

	var plugin = {};

	var defaults = {

		// GENERAL
		mode: 'horizontal',
		slideSelector: '',
		infiniteLoop: true,
		hideControlOnEnd: false,
		speed: 500,
		easing: null,
		slideMargin: 0,
		startSlide: 0,
		randomStart: false,
		captions: false,
		ticker: false,
		tickerHover: false,
		adaptiveHeight: false,
		adaptiveHeightSpeed: 500,
		video: false,
		useCSS: true,
		preloadImages: 'visible',
		responsive: true,

		// TOUCH
		touchEnabled: true,
		swipeThreshold: 50,
		oneToOneTouch: true,
		preventDefaultSwipeX: true,
		preventDefaultSwipeY: false,

		// PAGER
		pager: true,
		pagerType: 'full',
		pagerShortSeparator: ' / ',
		pagerSelector: null,
		buildPager: null,
		pagerCustom: null,

		// CONTROLS
		controls: true,
		nextText: 'Next',
		prevText: 'Prev',
		nextSelector: null,
		prevSelector: null,
		autoControls: false,
		startText: 'Start',
		stopText: 'Stop',
		autoControlsCombine: false,
		autoControlsSelector: null,

		// AUTO
		auto: false,
		pause: 4000,
		autoStart: true,
		autoDirection: 'next',
		autoHover: false,
		autoDelay: 0,

		// CAROUSEL
		minSlides: 1,
		maxSlides: 1,
		moveSlides: 0,
		slideWidth: 0,

		// CALLBACKS
		onSliderLoad: function onSliderLoad() {},
		onSlideBefore: function onSlideBefore() {},
		onSlideAfter: function onSlideAfter() {},
		onSlideNext: function onSlideNext() {},
		onSlidePrev: function onSlidePrev() {}
	};

	$.fn.bxSlider = function (options) {

		if (this.length == 0) return this;

		// support mutltiple elements
		if (this.length > 1) {
			this.each(function () {
				$(this).bxSlider(options);
			});
			return this;
		}

		// create a namespace to be used throughout the plugin
		var slider = {};
		// set a reference to our slider element
		var el = this;
		plugin.el = this;

		/**
   * Makes slideshow responsive
   */
		// first get the original window dimens (thanks alot IE)
		var windowWidth = $(window).width();
		var windowHeight = $(window).height();

		/**
   * ===================================================================================
   * = PRIVATE FUNCTIONS
   * ===================================================================================
   */

		/**
   * Initializes namespace settings to be used throughout plugin
   */
		var init = function init() {
			// merge user-supplied options with the defaults
			slider.settings = $.extend({}, defaults, options);
			// parse slideWidth setting
			slider.settings.slideWidth = parseInt(slider.settings.slideWidth);
			// store the original children
			slider.children = el.children(slider.settings.slideSelector);
			// check if actual number of slides is less than minSlides / maxSlides
			if (slider.children.length < slider.settings.minSlides) slider.settings.minSlides = slider.children.length;
			if (slider.children.length < slider.settings.maxSlides) slider.settings.maxSlides = slider.children.length;
			// if random start, set the startSlide setting to random number
			if (slider.settings.randomStart) slider.settings.startSlide = Math.floor(Math.random() * slider.children.length);
			// store active slide information
			slider.active = { index: slider.settings.startSlide
				// store if the slider is in carousel mode (displaying / moving multiple slides)
			};slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1;
			// if carousel, force preloadImages = 'all'
			if (slider.carousel) slider.settings.preloadImages = 'all';
			// calculate the min / max width thresholds based on min / max number of slides
			// used to setup and update carousel slides dimensions
			slider.minThreshold = slider.settings.minSlides * slider.settings.slideWidth + (slider.settings.minSlides - 1) * slider.settings.slideMargin;
			slider.maxThreshold = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin;
			// store the current state of the slider (if currently animating, working is true)
			slider.working = false;
			// initialize the controls object
			slider.controls = {};
			// initialize an auto interval
			slider.interval = null;
			// determine which property to use for transitions
			slider.animProp = slider.settings.mode == 'vertical' ? 'top' : 'left';
			// determine if hardware acceleration can be used
			slider.usingCSS = slider.settings.useCSS && slider.settings.mode != 'fade' && function () {
				// create our test div element
				var div = document.createElement('div');
				// css transition properties
				var props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective'];
				// test for each property
				for (var i in props) {
					if (div.style[props[i]] !== undefined) {
						slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase();
						slider.animProp = '-' + slider.cssPrefix + '-transform';
						return true;
					}
				}
				return false;
			}();
			// if vertical mode always make maxSlides and minSlides equal
			if (slider.settings.mode == 'vertical') slider.settings.maxSlides = slider.settings.minSlides;
			// save original style data
			el.data("origStyle", el.attr("style"));
			el.children(slider.settings.slideSelector).each(function () {
				$(this).data("origStyle", $(this).attr("style"));
			});
			// perform all DOM / CSS modifications
			setup();
		};

		/**
   * Performs all DOM and CSS modifications
   */
		var setup = function setup() {
			// wrap el in a wrapper
			el.wrap('<div class="bx-wrapper"><div class="bx-viewport"></div></div>');
			// store a namspace reference to .bx-viewport
			slider.viewport = el.parent();
			// add a loading div to display while images are loading
			slider.loader = $('<div class="bx-loading" />');
			slider.viewport.prepend(slider.loader);
			// set el to a massive width, to hold any needed slides
			// also strip any margin and padding from el
			el.css({
				width: slider.settings.mode == 'horizontal' ? slider.children.length * 100 + 215 + '%' : 'auto',
				position: 'relative'
			});
			// if using CSS, add the easing property
			if (slider.usingCSS && slider.settings.easing) {
				el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing);
				// if not using CSS and no easing value was supplied, use the default JS animation easing (swing)
			} else if (!slider.settings.easing) {
				slider.settings.easing = 'swing';
			}
			var slidesShowing = getNumberSlidesShowing();
			// make modifications to the viewport (.bx-viewport)
			slider.viewport.css({
				width: '100%',
				overflow: 'hidden',
				position: 'relative'
			});
			slider.viewport.parent().css({
				maxWidth: getViewportMaxWidth()
			});
			// make modification to the wrapper (.bx-wrapper)
			if (!slider.settings.pager) {
				slider.viewport.parent().css({
					margin: '0 auto 0px'
				});
			}
			// apply css to all slider children
			slider.children.css({
				'float': slider.settings.mode == 'horizontal' ? 'left' : 'none',
				listStyle: 'none',
				position: 'relative'
			});
			// apply the calculated width after the float is applied to prevent scrollbar interference
			slider.children.css('width', getSlideWidth());
			// if slideMargin is supplied, add the css
			if (slider.settings.mode == 'horizontal' && slider.settings.slideMargin > 0) slider.children.css('marginRight', slider.settings.slideMargin);
			if (slider.settings.mode == 'vertical' && slider.settings.slideMargin > 0) slider.children.css('marginBottom', slider.settings.slideMargin);
			// if "fade" mode, add positioning and z-index CSS
			if (slider.settings.mode == 'fade') {
				slider.children.css({
					position: 'absolute',
					zIndex: 0,
					display: 'none'
				});
				// prepare the z-index on the showing element
				slider.children.eq(slider.settings.startSlide).css({ zIndex: 50, display: 'block' });
			}
			// create an element to contain all slider controls (pager, start / stop, etc)
			slider.controls.el = $('<div class="bx-controls" />');
			// if captions are requested, add them
			if (slider.settings.captions) appendCaptions();
			// check if startSlide is last slide
			slider.active.last = slider.settings.startSlide == getPagerQty() - 1;
			// if video is true, set up the fitVids plugin
			if (slider.settings.video) el.fitVids();
			// set the default preload selector (visible)
			var preloadSelector = slider.children.eq(slider.settings.startSlide);
			if (slider.settings.preloadImages == "all") preloadSelector = slider.children;
			// only check for control addition if not in "ticker" mode
			if (!slider.settings.ticker) {
				// if pager is requested, add it
				if (slider.settings.pager) appendPager();
				// if controls are requested, add them
				if (slider.settings.controls) appendControls();
				// if auto is true, and auto controls are requested, add them
				if (slider.settings.auto && slider.settings.autoControls) appendControlsAuto();
				// if any control option is requested, add the controls wrapper
				if (slider.settings.controls || slider.settings.autoControls || slider.settings.pager) slider.viewport.after(slider.controls.el);
				// if ticker mode, do not allow a pager
			} else {
				slider.settings.pager = false;
			}
			// preload all images, then perform final DOM / CSS modifications that depend on images being loaded
			loadElements(preloadSelector, start);
		};

		var loadElements = function loadElements(selector, callback) {
			var total = selector.find('img, iframe').length;
			if (total == 0) {
				callback();
				return;
			}
			var count = 0;
			selector.find('img, iframe').each(function () {
				if ($(this).is('img')) $(this).attr('src', $(this).attr('src') + '?timestamp=' + new Date().getTime());
				$(this).load(function () {
					setTimeout(function () {
						if (++count == total) callback();
					}, 0);
				});
			});
		};

		/**
   * Start the slider
   */
		var start = function start() {
			// if infinite loop, prepare additional slides
			if (slider.settings.infiniteLoop && slider.settings.mode != 'fade' && !slider.settings.ticker) {
				var slice = slider.settings.mode == 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides;
				var sliceAppend = slider.children.slice(0, slice).clone().addClass('bx-clone');
				var slicePrepend = slider.children.slice(-slice).clone().addClass('bx-clone');
				el.append(sliceAppend).prepend(slicePrepend);
			}
			// remove the loading DOM element
			slider.loader.remove();
			// set the left / top position of "el"
			setSlidePosition();
			// if "vertical" mode, always use adaptiveHeight to prevent odd behavior
			if (slider.settings.mode == 'vertical') slider.settings.adaptiveHeight = true;
			// set the viewport height
			slider.viewport.height(getViewportHeight());
			// make sure everything is positioned just right (same as a window resize)
			el.redrawSlider();
			// onSliderLoad callback
			slider.settings.onSliderLoad(slider.active.index);
			// slider has been fully initialized
			slider.initialized = true;
			// bind the resize call to the window
			if (slider.settings.responsive) $(window).bind('resize', resizeWindow);
			// if auto is true, start the show
			if (slider.settings.auto && slider.settings.autoStart) initAuto();
			// if ticker is true, start the ticker
			if (slider.settings.ticker) initTicker();
			// if pager is requested, make the appropriate pager link active
			if (slider.settings.pager) updatePagerActive(slider.settings.startSlide);
			// check for any updates to the controls (like hideControlOnEnd updates)
			if (slider.settings.controls) updateDirectionControls();
			// if touchEnabled is true, setup the touch events
			if (slider.settings.touchEnabled && !slider.settings.ticker) initTouch();
		};

		/**
   * Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value
   */
		var getViewportHeight = function getViewportHeight() {
			var height = 0;
			// first determine which children (slides) should be used in our height calculation
			var children = $();
			// if mode is not "vertical" and adaptiveHeight is false, include all children
			if (slider.settings.mode != 'vertical' && !slider.settings.adaptiveHeight) {
				children = slider.children;
			} else {
				// if not carousel, return the single active child
				if (!slider.carousel) {
					children = slider.children.eq(slider.active.index);
					// if carousel, return a slice of children
				} else {
					// get the individual slide index
					var currentIndex = slider.settings.moveSlides == 1 ? slider.active.index : slider.active.index * getMoveBy();
					// add the current slide to the children
					children = slider.children.eq(currentIndex);
					// cycle through the remaining "showing" slides
					for (i = 1; i <= slider.settings.maxSlides - 1; i++) {
						// if looped back to the start
						if (currentIndex + i >= slider.children.length) {
							children = children.add(slider.children.eq(i - 1));
						} else {
							children = children.add(slider.children.eq(currentIndex + i));
						}
					}
				}
			}
			// if "vertical" mode, calculate the sum of the heights of the children
			if (slider.settings.mode == 'vertical') {
				children.each(function (index) {
					height += $(this).outerHeight();
				});
				// add user-supplied margins
				if (slider.settings.slideMargin > 0) {
					height += slider.settings.slideMargin * (slider.settings.minSlides - 1);
				}
				// if not "vertical" mode, calculate the max height of the children
			} else {
				height = Math.max.apply(Math, children.map(function () {
					return $(this).outerHeight(false);
				}).get());
			}
			return height;
		};

		/**
   * Returns the calculated width to be used for the outer wrapper / viewport
   */
		var getViewportMaxWidth = function getViewportMaxWidth() {
			var width = '100%';
			if (slider.settings.slideWidth > 0) {
				if (slider.settings.mode == 'horizontal') {
					width = slider.settings.maxSlides * slider.settings.slideWidth + (slider.settings.maxSlides - 1) * slider.settings.slideMargin;
				} else {
					width = slider.settings.slideWidth;
				}
			}
			return width;
		};

		/**
   * Returns the calculated width to be applied to each slide
   */
		var getSlideWidth = function getSlideWidth() {
			// start with any user-supplied slide width
			var newElWidth = slider.settings.slideWidth;
			// get the current viewport width
			var wrapWidth = slider.viewport.width();
			// if slide width was not supplied, or is larger than the viewport use the viewport width
			if (slider.settings.slideWidth == 0 || slider.settings.slideWidth > wrapWidth && !slider.carousel || slider.settings.mode == 'vertical') {
				newElWidth = wrapWidth;
				// if carousel, use the thresholds to determine the width
			} else if (slider.settings.maxSlides > 1 && slider.settings.mode == 'horizontal') {
				if (wrapWidth > slider.maxThreshold) {
					// newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.maxSlides - 1))) / slider.settings.maxSlides;
				} else if (wrapWidth < slider.minThreshold) {
					newElWidth = (wrapWidth - slider.settings.slideMargin * (slider.settings.minSlides - 1)) / slider.settings.minSlides;
				}
			}
			return newElWidth;
		};

		/**
   * Returns the number of slides currently visible in the viewport (includes partially visible slides)
   */
		var getNumberSlidesShowing = function getNumberSlidesShowing() {
			var slidesShowing = 1;
			if (slider.settings.mode == 'horizontal' && slider.settings.slideWidth > 0) {
				// if viewport is smaller than minThreshold, return minSlides
				if (slider.viewport.width() < slider.minThreshold) {
					slidesShowing = slider.settings.minSlides;
					// if viewport is larger than minThreshold, return maxSlides
				} else if (slider.viewport.width() > slider.maxThreshold) {
					slidesShowing = slider.settings.maxSlides;
					// if viewport is between min / max thresholds, divide viewport width by first child width
				} else {
					var childWidth = slider.children.first().width();
					slidesShowing = Math.floor(slider.viewport.width() / childWidth);
				}
				// if "vertical" mode, slides showing will always be minSlides
			} else if (slider.settings.mode == 'vertical') {
				slidesShowing = slider.settings.minSlides;
			}
			return slidesShowing;
		};

		/**
   * Returns the number of pages (one full viewport of slides is one "page")
   */
		var getPagerQty = function getPagerQty() {
			var pagerQty = 0;
			// if moveSlides is specified by the user
			if (slider.settings.moveSlides > 0) {
				if (slider.settings.infiniteLoop) {
					pagerQty = slider.children.length / getMoveBy();
				} else {
					// use a while loop to determine pages
					var breakPoint = 0;
					var counter = 0;
					// when breakpoint goes above children length, counter is the number of pages
					while (breakPoint < slider.children.length) {
						++pagerQty;
						breakPoint = counter + getNumberSlidesShowing();
						counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();
					}
				}
				// if moveSlides is 0 (auto) divide children length by sides showing, then round up
			} else {
				pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());
			}
			return pagerQty;
		};

		/**
   * Returns the number of indivual slides by which to shift the slider
   */
		var getMoveBy = function getMoveBy() {
			// if moveSlides was set by the user and moveSlides is less than number of slides showing
			if (slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()) {
				return slider.settings.moveSlides;
			}
			// if moveSlides is 0 (auto)
			return getNumberSlidesShowing();
		};

		/**
   * Sets the slider's (el) left or top position
   */
		var setSlidePosition = function setSlidePosition() {
			// if last slide, not infinite loop, and number of children is larger than specified maxSlides
			if (slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop) {
				if (slider.settings.mode == 'horizontal') {
					// get the last child's position
					var lastChild = slider.children.last();
					var position = lastChild.position();
					// set the left position
					setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.width())), 'reset', 0);
				} else if (slider.settings.mode == 'vertical') {
					// get the last showing index's position
					var lastShowingIndex = slider.children.length - slider.settings.minSlides;
					var position = slider.children.eq(lastShowingIndex).position();
					// set the top position
					setPositionProperty(-position.top, 'reset', 0);
				}
				// if not last slide
			} else {
				// get the position of the first showing slide
				var position = slider.children.eq(slider.active.index * getMoveBy()).position();
				// check for last slide
				if (slider.active.index == getPagerQty() - 1) slider.active.last = true;
				// set the repective position
				if (position != undefined) {
					if (slider.settings.mode == 'horizontal') setPositionProperty(-position.left, 'reset', 0);else if (slider.settings.mode == 'vertical') setPositionProperty(-position.top, 'reset', 0);
				}
			}
		};

		/**
   * Sets the el's animating property position (which in turn will sometimes animate el).
   * If using CSS, sets the transform property. If not using CSS, sets the top / left property.
   *
   * @param value (int) 
   *  - the animating property's value
   *
   * @param type (string) 'slider', 'reset', 'ticker'
   *  - the type of instance for which the function is being
   *
   * @param duration (int) 
   *  - the amount of time (in ms) the transition should occupy
   *
   * @param params (array) optional
   *  - an optional parameter containing any variables that need to be passed in
   */
		var setPositionProperty = function setPositionProperty(value, type, duration, params) {
			// use CSS transform
			if (slider.usingCSS) {
				// determine the translate3d value
				var propValue = slider.settings.mode == 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)';
				// add the CSS transition-duration
				el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's');
				if (type == 'slide') {
					// set the property value
					el.css(slider.animProp, propValue);
					// bind a callback method - executes when CSS transition completes
					el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {
						// unbind the callback
						el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
						updateAfterSlideTransition();
					});
				} else if (type == 'reset') {
					el.css(slider.animProp, propValue);
				} else if (type == 'ticker') {
					// make the transition use 'linear'
					el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear');
					el.css(slider.animProp, propValue);
					// bind a callback method - executes when CSS transition completes
					el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {
						// unbind the callback
						el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
						// reset the position
						setPositionProperty(params['resetValue'], 'reset', 0);
						// start the loop again
						tickerLoop();
					});
				}
				// use JS animate
			} else {
				var animateObj = {};
				animateObj[slider.animProp] = value;
				if (type == 'slide') {
					el.animate(animateObj, duration, slider.settings.easing, function () {
						updateAfterSlideTransition();
					});
				} else if (type == 'reset') {
					el.css(slider.animProp, value);
				} else if (type == 'ticker') {
					el.animate(animateObj, speed, 'linear', function () {
						setPositionProperty(params['resetValue'], 'reset', 0);
						// run the recursive loop after animation
						tickerLoop();
					});
				}
			}
		};

		/**
   * Populates the pager with proper amount of pages
   */
		var populatePager = function populatePager() {
			var pagerHtml = '';
			var pagerQty = getPagerQty();
			// loop through each pager item
			for (var i = 0; i < pagerQty; i++) {
				var linkContent = '';
				// if a buildPager function is supplied, use it to get pager link value, else use index + 1
				if (slider.settings.buildPager && $.isFunction(slider.settings.buildPager)) {
					linkContent = slider.settings.buildPager(i);
					slider.pagerEl.addClass('bx-custom-pager');
				} else {
					linkContent = i + 1;
					slider.pagerEl.addClass('bx-default-pager');
				}
				// var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;
				// add the markup to the string
				pagerHtml += '<div class="bx-pager-item"><a href="" data-slide-index="' + i + '" class="bx-pager-link">' + linkContent + '</a></div>';
			};
			// populate the pager element with pager links
			slider.pagerEl.html(pagerHtml);
		};

		/**
   * Appends the pager to the controls element
   */
		var appendPager = function appendPager() {
			if (!slider.settings.pagerCustom) {
				// create the pager DOM element
				slider.pagerEl = $('<div class="bx-pager" />');
				// if a pager selector was supplied, populate it with the pager
				if (slider.settings.pagerSelector) {
					$(slider.settings.pagerSelector).html(slider.pagerEl);
					// if no pager selector was supplied, add it after the wrapper
				} else {
					slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl);
				}
				// populate the pager
				populatePager();
			} else {
				slider.pagerEl = $(slider.settings.pagerCustom);
			}
			// assign the pager click binding
			slider.pagerEl.delegate('a', 'click', clickPagerBind);
		};

		/**
   * Appends prev / next controls to the controls element
   */
		var appendControls = function appendControls() {
			slider.controls.next = $('<a class="bx-next" href="">' + slider.settings.nextText + '</a>');
			slider.controls.prev = $('<a class="bx-prev" href="">' + slider.settings.prevText + '</a>');
			// bind click actions to the controls
			slider.controls.next.bind('click', clickNextBind);
			slider.controls.prev.bind('click', clickPrevBind);
			// if nextSlector was supplied, populate it
			if (slider.settings.nextSelector) {
				$(slider.settings.nextSelector).append(slider.controls.next);
			}
			// if prevSlector was supplied, populate it
			if (slider.settings.prevSelector) {
				$(slider.settings.prevSelector).append(slider.controls.prev);
			}
			// if no custom selectors were supplied
			if (!slider.settings.nextSelector && !slider.settings.prevSelector) {
				// add the controls to the DOM
				slider.controls.directionEl = $('<div class="bx-controls-direction" />');
				// add the control elements to the directionEl
				slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next);
				// slider.viewport.append(slider.controls.directionEl);
				slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl);
			}
		};

		/**
   * Appends start / stop auto controls to the controls element
   */
		var appendControlsAuto = function appendControlsAuto() {
			slider.controls.start = $('<div class="bx-controls-auto-item"><a class="bx-start" href="">' + slider.settings.startText + '</a></div>');
			slider.controls.stop = $('<div class="bx-controls-auto-item"><a class="bx-stop" href="">' + slider.settings.stopText + '</a></div>');
			// add the controls to the DOM
			slider.controls.autoEl = $('<div class="bx-controls-auto" />');
			// bind click actions to the controls
			slider.controls.autoEl.delegate('.bx-start', 'click', clickStartBind);
			slider.controls.autoEl.delegate('.bx-stop', 'click', clickStopBind);
			// if autoControlsCombine, insert only the "start" control
			if (slider.settings.autoControlsCombine) {
				slider.controls.autoEl.append(slider.controls.start);
				// if autoControlsCombine is false, insert both controls
			} else {
				slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);
			}
			// if auto controls selector was supplied, populate it with the controls
			if (slider.settings.autoControlsSelector) {
				$(slider.settings.autoControlsSelector).html(slider.controls.autoEl);
				// if auto controls selector was not supplied, add it after the wrapper
			} else {
				slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl);
			}
			// update the auto controls
			updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');
		};

		/**
   * Appends image captions to the DOM
   */
		var appendCaptions = function appendCaptions() {
			// cycle through each child
			slider.children.each(function (index) {
				// get the image title attribute
				var title = $(this).find('img:first').attr('title');
				// append the caption
				if (title != undefined && ('' + title).length) {
					$(this).append('<div class="bx-caption"><span>' + title + '</span></div>');
				}
			});
		};

		/**
   * Click next binding
   *
   * @param e (event) 
   *  - DOM event object
   */
		var clickNextBind = function clickNextBind(e) {
			// if auto show is running, stop it
			if (slider.settings.auto) el.stopAuto();
			el.goToNextSlide();
			e.preventDefault();
		};

		/**
   * Click prev binding
   *
   * @param e (event) 
   *  - DOM event object
   */
		var clickPrevBind = function clickPrevBind(e) {
			// if auto show is running, stop it
			if (slider.settings.auto) el.stopAuto();
			el.goToPrevSlide();
			e.preventDefault();
		};

		/**
   * Click start binding
   *
   * @param e (event) 
   *  - DOM event object
   */
		var clickStartBind = function clickStartBind(e) {
			el.startAuto();
			e.preventDefault();
		};

		/**
   * Click stop binding
   *
   * @param e (event) 
   *  - DOM event object
   */
		var clickStopBind = function clickStopBind(e) {
			el.stopAuto();
			e.preventDefault();
		};

		/**
   * Click pager binding
   *
   * @param e (event) 
   *  - DOM event object
   */
		var clickPagerBind = function clickPagerBind(e) {
			// if auto show is running, stop it
			if (slider.settings.auto) el.stopAuto();
			var pagerLink = $(e.currentTarget);
			var pagerIndex = parseInt(pagerLink.attr('data-slide-index'));
			// if clicked pager link is not active, continue with the goToSlide call
			if (pagerIndex != slider.active.index) el.goToSlide(pagerIndex);
			e.preventDefault();
		};

		/**
   * Updates the pager links with an active class
   *
   * @param slideIndex (int) 
   *  - index of slide to make active
   */
		var updatePagerActive = function updatePagerActive(slideIndex) {
			// if "short" pager type
			var len = slider.children.length; // nb of children
			if (slider.settings.pagerType == 'short') {
				if (slider.settings.maxSlides > 1) {
					len = Math.ceil(slider.children.length / slider.settings.maxSlides);
				}
				slider.pagerEl.html(slideIndex + 1 + slider.settings.pagerShortSeparator + len);
				return;
			}
			// remove all pager active classes
			slider.pagerEl.find('a').removeClass('active');
			// apply the active class for all pagers
			slider.pagerEl.each(function (i, el) {
				$(el).find('a').eq(slideIndex).addClass('active');
			});
		};

		/**
   * Performs needed actions after a slide transition
   */
		var updateAfterSlideTransition = function updateAfterSlideTransition() {
			// if infinte loop is true
			if (slider.settings.infiniteLoop) {
				var position = '';
				// first slide
				if (slider.active.index == 0) {
					// set the new position
					position = slider.children.eq(0).position();
					// carousel, last slide
				} else if (slider.active.index == getPagerQty() - 1 && slider.carousel) {
					position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position();
					// last slide
				} else if (slider.active.index == slider.children.length - 1) {
					position = slider.children.eq(slider.children.length - 1).position();
				}
				if (slider.settings.mode == 'horizontal') {
					setPositionProperty(-position.left, 'reset', 0);;
				} else if (slider.settings.mode == 'vertical') {
					setPositionProperty(-position.top, 'reset', 0);;
				}
			}
			// declare that the transition is complete
			slider.working = false;
			// onSlideAfter callback
			slider.settings.onSlideAfter(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
		};

		/**
   * Updates the auto controls state (either active, or combined switch)
   *
   * @param state (string) "start", "stop"
   *  - the new state of the auto show
   */
		var updateAutoControls = function updateAutoControls(state) {
			// if autoControlsCombine is true, replace the current control with the new state 
			if (slider.settings.autoControlsCombine) {
				slider.controls.autoEl.html(slider.controls[state]);
				// if autoControlsCombine is false, apply the "active" class to the appropriate control 
			} else {
				slider.controls.autoEl.find('a').removeClass('active');
				slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active');
			}
		};

		/**
   * Updates the direction controls (checks if either should be hidden)
   */
		var updateDirectionControls = function updateDirectionControls() {
			if (getPagerQty() == 1) {
				slider.controls.prev.addClass('disabled');
				slider.controls.next.addClass('disabled');
			} else if (!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd) {
				// if first slide
				if (slider.active.index == 0) {
					slider.controls.prev.addClass('disabled');
					slider.controls.next.removeClass('disabled');
					// if last slide
				} else if (slider.active.index == getPagerQty() - 1) {
					slider.controls.next.addClass('disabled');
					slider.controls.prev.removeClass('disabled');
					// if any slide in the middle
				} else {
					slider.controls.prev.removeClass('disabled');
					slider.controls.next.removeClass('disabled');
				}
			}
		};

		/**
   * Initialzes the auto process
   */
		var initAuto = function initAuto() {
			// if autoDelay was supplied, launch the auto show using a setTimeout() call
			if (slider.settings.autoDelay > 0) {
				var timeout = setTimeout(el.startAuto, slider.settings.autoDelay);
				// if autoDelay was not supplied, start the auto show normally
			} else {
				el.startAuto();
			}
			// if autoHover is requested
			if (slider.settings.autoHover) {
				// on el hover
				el.hover(function () {
					// if the auto show is currently playing (has an active interval)
					if (slider.interval) {
						// stop the auto show and pass true agument which will prevent control update
						el.stopAuto(true);
						// create a new autoPaused value which will be used by the relative "mouseout" event
						slider.autoPaused = true;
					}
				}, function () {
					// if the autoPaused value was created be the prior "mouseover" event
					if (slider.autoPaused) {
						// start the auto show and pass true agument which will prevent control update
						el.startAuto(true);
						// reset the autoPaused value
						slider.autoPaused = null;
					}
				});
			}
		};

		/**
   * Initialzes the ticker process
   */
		var initTicker = function initTicker() {
			var startPosition = 0;
			// if autoDirection is "next", append a clone of the entire slider
			if (slider.settings.autoDirection == 'next') {
				el.append(slider.children.clone().addClass('bx-clone'));
				// if autoDirection is "prev", prepend a clone of the entire slider, and set the left position
			} else {
				el.prepend(slider.children.clone().addClass('bx-clone'));
				var position = slider.children.first().position();
				startPosition = slider.settings.mode == 'horizontal' ? -position.left : -position.top;
			}
			setPositionProperty(startPosition, 'reset', 0);
			// do not allow controls in ticker mode
			slider.settings.pager = false;
			slider.settings.controls = false;
			slider.settings.autoControls = false;
			// if autoHover is requested
			if (slider.settings.tickerHover && !slider.usingCSS) {
				// on el hover
				slider.viewport.hover(function () {
					el.stop();
				}, function () {
					// calculate the total width of children (used to calculate the speed ratio)
					var totalDimens = 0;
					slider.children.each(function (index) {
						totalDimens += slider.settings.mode == 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);
					});
					// calculate the speed ratio (used to determine the new speed to finish the paused animation)
					var ratio = slider.settings.speed / totalDimens;
					// determine which property to use
					var property = slider.settings.mode == 'horizontal' ? 'left' : 'top';
					// calculate the new speed
					var newSpeed = ratio * (totalDimens - Math.abs(parseInt(el.css(property))));
					tickerLoop(newSpeed);
				});
			}
			// start the ticker loop
			tickerLoop();
		};

		/**
   * Runs a continuous loop, news ticker-style
   */
		var tickerLoop = function tickerLoop(resumeSpeed) {
			speed = resumeSpeed ? resumeSpeed : slider.settings.speed;
			var position = { left: 0, top: 0 };
			var reset = { left: 0, top: 0 };
			// if "next" animate left position to last child, then reset left to 0
			if (slider.settings.autoDirection == 'next') {
				position = el.find('.bx-clone').first().position();
				// if "prev" animate left position to 0, then reset left to first non-clone child
			} else {
				reset = slider.children.first().position();
			}
			var animateProperty = slider.settings.mode == 'horizontal' ? -position.left : -position.top;
			var resetValue = slider.settings.mode == 'horizontal' ? -reset.left : -reset.top;
			var params = { resetValue: resetValue };
			setPositionProperty(animateProperty, 'ticker', speed, params);
		};

		/**
   * Initializes touch events
   */
		var initTouch = function initTouch() {
			// initialize object to contain all touch values
			slider.touch = {
				start: { x: 0, y: 0 },
				end: { x: 0, y: 0 }
			};
			slider.viewport.bind('touchstart', onTouchStart);
		};

		/**
   * Event handler for "touchstart"
   *
   * @param e (event) 
   *  - DOM event object
   */
		var onTouchStart = function onTouchStart(e) {
			if (slider.working) {
				e.preventDefault();
			} else {
				// record the original position when touch starts
				slider.touch.originalPos = el.position();
				var orig = e.originalEvent;
				// record the starting touch x, y coordinates
				slider.touch.start.x = orig.changedTouches[0].pageX;
				slider.touch.start.y = orig.changedTouches[0].pageY;
				// bind a "touchmove" event to the viewport
				slider.viewport.bind('touchmove', onTouchMove);
				// bind a "touchend" event to the viewport
				slider.viewport.bind('touchend', onTouchEnd);
			}
		};

		/**
   * Event handler for "touchmove"
   *
   * @param e (event) 
   *  - DOM event object
   */
		var onTouchMove = function onTouchMove(e) {
			var orig = e.originalEvent;
			// if scrolling on y axis, do not prevent default
			var xMovement = Math.abs(orig.changedTouches[0].pageX - slider.touch.start.x);
			var yMovement = Math.abs(orig.changedTouches[0].pageY - slider.touch.start.y);
			// x axis swipe
			if (xMovement * 3 > yMovement && slider.settings.preventDefaultSwipeX) {
				e.preventDefault();
				// y axis swipe
			} else if (yMovement * 3 > xMovement && slider.settings.preventDefaultSwipeY) {
				e.preventDefault();
			}
			if (slider.settings.mode != 'fade' && slider.settings.oneToOneTouch) {
				var value = 0;
				// if horizontal, drag along x axis
				if (slider.settings.mode == 'horizontal') {
					var change = orig.changedTouches[0].pageX - slider.touch.start.x;
					value = slider.touch.originalPos.left + change;
					// if vertical, drag along y axis
				} else {
					var change = orig.changedTouches[0].pageY - slider.touch.start.y;
					value = slider.touch.originalPos.top + change;
				}
				setPositionProperty(value, 'reset', 0);
			}
		};

		/**
   * Event handler for "touchend"
   *
   * @param e (event) 
   *  - DOM event object
   */
		var onTouchEnd = function onTouchEnd(e) {
			slider.viewport.unbind('touchmove', onTouchMove);
			var orig = e.originalEvent;
			var value = 0;
			// record end x, y positions
			slider.touch.end.x = orig.changedTouches[0].pageX;
			slider.touch.end.y = orig.changedTouches[0].pageY;
			// if fade mode, check if absolute x distance clears the threshold
			if (slider.settings.mode == 'fade') {
				var distance = Math.abs(slider.touch.start.x - slider.touch.end.x);
				if (distance >= slider.settings.swipeThreshold) {
					slider.touch.start.x > slider.touch.end.x ? el.goToNextSlide() : el.goToPrevSlide();
					el.stopAuto();
				}
				// not fade mode
			} else {
				var distance = 0;
				// calculate distance and el's animate property
				if (slider.settings.mode == 'horizontal') {
					distance = slider.touch.end.x - slider.touch.start.x;
					value = slider.touch.originalPos.left;
				} else {
					distance = slider.touch.end.y - slider.touch.start.y;
					value = slider.touch.originalPos.top;
				}
				// if not infinite loop and first / last slide, do not attempt a slide transition
				if (!slider.settings.infiniteLoop && (slider.active.index == 0 && distance > 0 || slider.active.last && distance < 0)) {
					setPositionProperty(value, 'reset', 200);
				} else {
					// check if distance clears threshold
					if (Math.abs(distance) >= slider.settings.swipeThreshold) {
						distance < 0 ? el.goToNextSlide() : el.goToPrevSlide();
						el.stopAuto();
					} else {
						// el.animate(property, 200);
						setPositionProperty(value, 'reset', 200);
					}
				}
			}
			slider.viewport.unbind('touchend', onTouchEnd);
		};

		/**
   * Window resize event callback
   */
		var resizeWindow = function resizeWindow(e) {
			// get the new window dimens (again, thank you IE)
			var windowWidthNew = $(window).width();
			var windowHeightNew = $(window).height();
			// make sure that it is a true window resize
			// *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements
			// are resized. Can you just die already?*
			if (windowWidth != windowWidthNew || windowHeight != windowHeightNew) {
				// set the new window dimens
				windowWidth = windowWidthNew;
				windowHeight = windowHeightNew;
				// update all dynamic elements
				el.redrawSlider();
			}
		};

		/**
   * ===================================================================================
   * = PUBLIC FUNCTIONS
   * ===================================================================================
   */

		/**
   * Performs slide transition to the specified slide
   *
   * @param slideIndex (int) 
   *  - the destination slide's index (zero-based)
   *
   * @param direction (string) 
   *  - INTERNAL USE ONLY - the direction of travel ("prev" / "next")
   */
		el.goToSlide = function (slideIndex, direction) {
			// if plugin is currently in motion, ignore request
			if (slider.working || slider.active.index == slideIndex) return;
			// declare that plugin is in motion
			slider.working = true;
			// store the old index
			slider.oldIndex = slider.active.index;
			// if slideIndex is less than zero, set active index to last child (this happens during infinite loop)
			if (slideIndex < 0) {
				slider.active.index = getPagerQty() - 1;
				// if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)
			} else if (slideIndex >= getPagerQty()) {
				slider.active.index = 0;
				// set active index to requested slide
			} else {
				slider.active.index = slideIndex;
			}
			// onSlideBefore, onSlideNext, onSlidePrev callbacks
			slider.settings.onSlideBefore(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
			if (direction == 'next') {
				slider.settings.onSlideNext(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
			} else if (direction == 'prev') {
				slider.settings.onSlidePrev(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);
			}
			// check if last slide
			slider.active.last = slider.active.index >= getPagerQty() - 1;
			// update the pager with active class
			if (slider.settings.pager) updatePagerActive(slider.active.index);
			// // check for direction control update
			if (slider.settings.controls) updateDirectionControls();
			// if slider is set to mode: "fade"
			if (slider.settings.mode == 'fade') {
				// if adaptiveHeight is true and next height is different from current height, animate to the new height
				if (slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()) {
					slider.viewport.animate({ height: getViewportHeight() }, slider.settings.adaptiveHeightSpeed);
				}
				// fade out the visible child and reset its z-index value
				slider.children.filter(':visible').fadeOut(slider.settings.speed).css({ zIndex: 0 });
				// fade in the newly requested slide
				slider.children.eq(slider.active.index).css('zIndex', 51).fadeIn(slider.settings.speed, function () {
					$(this).css('zIndex', 50);
					updateAfterSlideTransition();
				});
				// slider mode is not "fade"
			} else {
				// if adaptiveHeight is true and next height is different from current height, animate to the new height
				if (slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()) {
					slider.viewport.animate({ height: getViewportHeight() }, slider.settings.adaptiveHeightSpeed);
				}
				var moveBy = 0;
				var position = { left: 0, top: 0 };
				// if carousel and not infinite loop
				if (!slider.settings.infiniteLoop && slider.carousel && slider.active.last) {
					if (slider.settings.mode == 'horizontal') {
						// get the last child position
						var lastChild = slider.children.eq(slider.children.length - 1);
						position = lastChild.position();
						// calculate the position of the last slide
						moveBy = slider.viewport.width() - lastChild.outerWidth();
					} else {
						// get last showing index position
						var lastShowingIndex = slider.children.length - slider.settings.minSlides;
						position = slider.children.eq(lastShowingIndex).position();
					}
					// horizontal carousel, going previous while on first slide (infiniteLoop mode)
				} else if (slider.carousel && slider.active.last && direction == 'prev') {
					// get the last child position
					var eq = slider.settings.moveSlides == 1 ? slider.settings.maxSlides - getMoveBy() : (getPagerQty() - 1) * getMoveBy() - (slider.children.length - slider.settings.maxSlides);
					var lastChild = el.children('.bx-clone').eq(eq);
					position = lastChild.position();
					// if infinite loop and "Next" is clicked on the last slide
				} else if (direction == 'next' && slider.active.index == 0) {
					// get the last clone position
					position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position();
					slider.active.last = false;
					// normal non-zero requests
				} else if (slideIndex >= 0) {
					var requestEl = slideIndex * getMoveBy();
					position = slider.children.eq(requestEl).position();
				}

				/* If the position doesn't exist 
     * (e.g. if you destroy the slider on a next click),
     * it doesn't throw an error.
     */
				if ("undefined" !== typeof position) {
					var value = slider.settings.mode == 'horizontal' ? -(position.left - moveBy) : -position.top;
					// plugin values to be animated
					setPositionProperty(value, 'slide', slider.settings.speed);
				}
			}
		};

		/**
   * Transitions to the next slide in the show
   */
		el.goToNextSlide = function () {
			// if infiniteLoop is false and last page is showing, disregard call
			if (!slider.settings.infiniteLoop && slider.active.last) return;
			var pagerIndex = parseInt(slider.active.index) + 1;
			el.goToSlide(pagerIndex, 'next');
		};

		/**
   * Transitions to the prev slide in the show
   */
		el.goToPrevSlide = function () {
			// if infiniteLoop is false and last page is showing, disregard call
			if (!slider.settings.infiniteLoop && slider.active.index == 0) return;
			var pagerIndex = parseInt(slider.active.index) - 1;
			el.goToSlide(pagerIndex, 'prev');
		};

		/**
   * Starts the auto show
   *
   * @param preventControlUpdate (boolean) 
   *  - if true, auto controls state will not be updated
   */
		el.startAuto = function (preventControlUpdate) {
			// if an interval already exists, disregard call
			if (slider.interval) return;
			// create an interval
			slider.interval = setInterval(function () {
				slider.settings.autoDirection == 'next' ? el.goToNextSlide() : el.goToPrevSlide();
			}, slider.settings.pause);
			// if auto controls are displayed and preventControlUpdate is not true
			if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('stop');
		};

		/**
   * Stops the auto show
   *
   * @param preventControlUpdate (boolean) 
   *  - if true, auto controls state will not be updated
   */
		el.stopAuto = function (preventControlUpdate) {
			// if no interval exists, disregard call
			if (!slider.interval) return;
			// clear the interval
			clearInterval(slider.interval);
			slider.interval = null;
			// if auto controls are displayed and preventControlUpdate is not true
			if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('start');
		};

		/**
   * Returns current slide index (zero-based)
   */
		el.getCurrentSlide = function () {
			return slider.active.index;
		};

		/**
   * Returns number of slides in show
   */
		el.getSlideCount = function () {
			return slider.children.length;
		};

		/**
   * Update all dynamic slider elements
   */
		el.redrawSlider = function () {
			// resize all children in ratio to new screen size
			slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth());
			// adjust the height
			slider.viewport.css('height', getViewportHeight());
			// update the slide position
			if (!slider.settings.ticker) setSlidePosition();
			// if active.last was true before the screen resize, we want
			// to keep it last no matter what screen size we end on
			if (slider.active.last) slider.active.index = getPagerQty() - 1;
			// if the active index (page) no longer exists due to the resize, simply set the index as last
			if (slider.active.index >= getPagerQty()) slider.active.last = true;
			// if a pager is being displayed and a custom pager is not being used, update it
			if (slider.settings.pager && !slider.settings.pagerCustom) {
				populatePager();
				updatePagerActive(slider.active.index);
			}
		};

		/**
   * Destroy the current instance of the slider (revert everything back to original state)
   */
		el.destroySlider = function () {
			// don't do anything if slider has already been destroyed
			if (!slider.initialized) return;
			slider.initialized = false;
			$('.bx-clone', this).remove();
			slider.children.each(function () {
				$(this).data("origStyle") != undefined ? $(this).attr("style", $(this).data("origStyle")) : $(this).removeAttr('style');
			});
			$(this).data("origStyle") != undefined ? this.attr("style", $(this).data("origStyle")) : $(this).removeAttr('style');
			$(this).unwrap().unwrap();
			if (slider.controls.el) slider.controls.el.remove();
			if (slider.controls.next) slider.controls.next.remove();
			if (slider.controls.prev) slider.controls.prev.remove();
			if (slider.pagerEl) slider.pagerEl.remove();
			$('.bx-caption', this).remove();
			if (slider.controls.autoEl) slider.controls.autoEl.remove();
			clearInterval(slider.interval);
			if (slider.settings.responsive) $(window).unbind('resize', resizeWindow);
		};

		/**
   * Reload the slider (revert all DOM changes, and re-initialize)
   */
		el.reloadSlider = function (settings) {
			if (settings != undefined) options = settings;
			el.destroySlider();
			init();
		};

		init();

		// returns the current jQuery object
		return this;
	};
})(jQuery);

/***/ }),

/***/ "./javascripts/jquery.cslider.js":
/*!***************************************!*\
  !*** ./javascripts/jquery.cslider.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function ($, undefined) {

    /*
     * Slider object.
     */
    $.Slider = function (options, element) {
        this.$el = $(element);
        this._init(options);
    };

    $.Slider.defaults = {
        width: 1170, //Max slider width
        height: 500, //max slider height
        current: 0, // index of current slide
        bgincrement: 100, // increment the bg position (parallax effect) when sliding
        autoplay: true, // slideshow on / off
        interval: 6000 // time between transitions
    };

    $.Slider.prototype = {
        _init: function _init(options) {
            var self = this;
            this.options = $.extend(true, {}, $.Slider.defaults, options);
            this.ratio = this.$el.width() / this.$el.height();
            this.$slides = this.$el.children().children('.da-slide');
            this.slidesCount = this.$slides.length;

            this.current = this.options.current;

            if (this.current < 0 || this.current >= this.slidesCount) {

                this.current = 0;
            }

            this.$slides.eq(this.current).addClass('da-slide-current');

            var $navigation = $('<nav class="da-dots"/>');
            for (var i = 0; i < this.slidesCount; ++i) {

                $navigation.append('<span/>');
            }
            $navigation.appendTo(this.$el);

            this.$pages = this.$el.find('nav.da-dots > span');
            this.$navNext = this.$el.find('span.da-arrows-next');
            this.$navPrev = this.$el.find('span.da-arrows-prev');

            this.isAnimating = false;

            this.bgpositer = 0;

            this.cssAnimations = Modernizr.cssanimations;
            this.cssTransitions = Modernizr.csstransitions;

            if (!this.cssAnimations || !this.cssAnimations) {

                this.$el.addClass('da-slider-fb');
            }

            this._updatePage();

            // load the events
            this._loadEvents();

            // slideshow
            if (this.options.autoplay) {

                this._startSlideshow();
            }
            $(window).bind('resize', function () {
                setTimeout(function () {
                    self._makeResponsive();
                }, 150);
            });
            this._makeResponsive();
        },
        _navigate: function _navigate(page, dir) {

            var $current = this.$slides.eq(this.current),
                $next,
                _self = this;

            if (this.current === page || this.isAnimating) return false;

            this.isAnimating = true;

            // check dir
            var classTo, classFrom, d;

            if (!dir) {

                page > this.current ? d = 'next' : d = 'prev';
            } else {

                d = dir;
            }

            if (this.cssAnimations && this.cssAnimations) {

                if (d === 'next') {

                    classTo = 'da-slide-toleft';
                    classFrom = 'da-slide-fromright';
                    ++this.bgpositer;
                } else {

                    classTo = 'da-slide-toright';
                    classFrom = 'da-slide-fromleft';
                    --this.bgpositer;
                }

                this.$el.css('background-position', this.bgpositer * this.options.bgincrement + '% center');
            }

            this.current = page;

            $next = this.$slides.eq(this.current);

            if (this.cssAnimations && this.cssAnimations) {

                var rmClasses = 'da-slide-toleft da-slide-toright da-slide-fromleft da-slide-fromright';
                $current.removeClass(rmClasses);
                $next.removeClass(rmClasses);

                $current.addClass(classTo);
                $next.addClass(classFrom);

                $current.removeClass('da-slide-current');
                $next.addClass('da-slide-current');
            }

            // fallback
            if (!this.cssAnimations || !this.cssAnimations) {
                $next.addClass('da-slide-current');
                $next.css('left', d === 'next' ? '100%' : '-100%').stop().animate({
                    left: '0%'
                }, 1000, function () {
                    _self.isAnimating = false;
                });

                $current.stop().animate({
                    left: d === 'next' ? '-100%' : '100%'
                }, 1000, function () {
                    $current.removeClass('da-slide-current');
                });
            }

            this._updatePage();
        },
        _updatePage: function _updatePage() {

            this.$pages.removeClass('da-dots-current');
            this.$pages.eq(this.current).addClass('da-dots-current');
        },
        _startSlideshow: function _startSlideshow() {

            var _self = this;

            this.slideshow = setTimeout(function () {

                var page = _self.current < _self.slidesCount - 1 ? page = _self.current + 1 : page = 0;
                _self._navigate(page, 'next');

                if (_self.options.autoplay) {

                    _self._startSlideshow();
                }
            }, this.options.interval);
        },
        page: function page(idx) {
            if (idx >= this.slidesCount || idx < 0) {
                return false;
            }

            if (this.options.autoplay) {
                clearTimeout(this.slideshow);
                this.options.autoplay = false;
            }

            this._navigate(idx);
        },
        _makeResponsive: function _makeResponsive() {

            var _self = this;

            var w = this.$el.width();
            var h = this.$el.height();
            var nH = h;
            if (w < _self.options.width) {
                var xy = this.options.width / this.options.height;
                var nH = w / xy;
                this.$el.height(Math.ceil(nH));
            } else {
                this.$el.height(Math.ceil(this.options.height));
            }
        },
        _loadEvents: function _loadEvents() {

            var _self = this;

            this.$pages.on('click.cslider', function (event) {

                _self.page($(this).index());
                return false;
            });

            this.$navNext.on('click.cslider', function (event) {

                if (_self.options.autoplay) {

                    clearTimeout(_self.slideshow);
                    _self.options.autoplay = false;
                }

                var page = _self.current < _self.slidesCount - 1 ? page = _self.current + 1 : page = 0;
                _self._navigate(page, 'next');
                return false;
            });

            this.$navPrev.on('click.cslider', function (event) {

                if (_self.options.autoplay) {

                    clearTimeout(_self.slideshow);
                    _self.options.autoplay = false;
                }

                var page = _self.current > 0 ? page = _self.current - 1 : page = _self.slidesCount - 1;
                _self._navigate(page, 'prev');
                return false;
            });

            if (this.cssTransitions) {

                if (!this.options.bgincrement) {

                    this.$el.on('webkitAnimationEnd.cslider animationend.cslider OAnimationEnd.cslider', function (event) {

                        if (event.originalEvent.animationName === 'toRightAnim4' || event.originalEvent.animationName === 'toLeftAnim4') {

                            _self.isAnimating = false;
                        }
                    });
                } else {

                    this.$el.on('webkitTransitionEnd.cslider transitionend.cslider OTransitionEnd.cslider', function (event) {

                        if (event.target.id === _self.$el.attr('id')) _self.isAnimating = false;
                    });
                }
            }
        }
    };

    var logError = function logError(message) {
        if (this.console) {
            console.error(message);
        }
    };

    $.fn.cslider = function (options) {

        if (typeof options === 'string') {

            var args = Array.prototype.slice.call(arguments, 1);

            this.each(function () {

                var instance = $.data(this, 'cslider');

                if (!instance) {
                    logError("cannot call methods on cslider prior to initialization; " + "attempted to call method '" + options + "'");
                    return;
                }

                if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                    logError("no such method '" + options + "' for cslider instance");
                    return;
                }

                instance[options].apply(instance, args);
            });
        } else {

            this.each(function () {

                var instance = $.data(this, 'cslider');
                if (!instance) {
                    $.data(this, 'cslider', new $.Slider(options, this));
                }
            });
        }

        return this;
    };
})(jQuery);

/***/ }),

/***/ "./javascripts/jquery.inview.js":
/*!**************************************!*\
  !*** ./javascripts/jquery.inview.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * author Remy Sharp
 * url http://remysharp.com/2009/01/26/element-in-view-event-plugin/
 */
(function ($) {
    function getViewportHeight() {
        var height = window.innerHeight; // Safari, Opera
        var mode = document.compatMode;

        if (mode || !$.support.boxModel) {
            // IE, Gecko
            height = mode == 'CSS1Compat' ? document.documentElement.clientHeight : // Standards
            document.body.clientHeight; // Quirks
        }

        return height;
    }

    $(window).scroll(function () {
        var vpH = getViewportHeight(),
            scrolltop = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop,
            elems = [];

        // naughty, but this is how it knows which elements to check for
        $.each($.cache, function () {
            if (this.events && this.events.inview) {
                elems.push(this.handle.elem);
            }
        });

        if (elems.length) {
            $(elems).each(function () {
                var $el = $(this),
                    top = $el.offset().top,
                    height = $el.height(),
                    inview = $el.data('inview') || false;

                if (scrolltop > top + height || scrolltop + vpH < top) {
                    if (inview) {
                        $el.data('inview', false);
                        $el.trigger('inview', [false]);
                    }
                } else if (scrolltop < top + height) {
                    if (!inview) {
                        $el.data('inview', true);
                        $el.trigger('inview', [true]);
                    }
                }
            });
        }
    });

    // kick the event to pick up any elements already in view.
    // note however, this only works if the plugin is included after the elements are bound to 'inview'
    $(function () {
        $(window).scroll();
    });
})(jQuery);

/***/ }),

/***/ "./javascripts/jquery.js":
/*!*******************************!*\
  !*** ./javascripts/jquery.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! jQuery v1.8.2 jquery.com | jquery.org/license */
(function (a, b) {
  function G(a) {
    var b = F[a] = {};return p.each(a.split(s), function (a, c) {
      b[c] = !0;
    }), b;
  }function J(a, c, d) {
    if (d === b && a.nodeType === 1) {
      var e = "data-" + c.replace(I, "-$1").toLowerCase();d = a.getAttribute(e);if (typeof d == "string") {
        try {
          d = d === "true" ? !0 : d === "false" ? !1 : d === "null" ? null : +d + "" === d ? +d : H.test(d) ? p.parseJSON(d) : d;
        } catch (f) {}p.data(a, c, d);
      } else d = b;
    }return d;
  }function K(a) {
    var b;for (b in a) {
      if (b === "data" && p.isEmptyObject(a[b])) continue;if (b !== "toJSON") return !1;
    }return !0;
  }function ba() {
    return !1;
  }function bb() {
    return !0;
  }function bh(a) {
    return !a || !a.parentNode || a.parentNode.nodeType === 11;
  }function bi(a, b) {
    do {
      a = a[b];
    } while (a && a.nodeType !== 1);return a;
  }function bj(a, b, c) {
    b = b || 0;if (p.isFunction(b)) return p.grep(a, function (a, d) {
      var e = !!b.call(a, d, a);return e === c;
    });if (b.nodeType) return p.grep(a, function (a, d) {
      return a === b === c;
    });if (typeof b == "string") {
      var d = p.grep(a, function (a) {
        return a.nodeType === 1;
      });if (be.test(b)) return p.filter(b, d, !c);b = p.filter(b, d);
    }return p.grep(a, function (a, d) {
      return p.inArray(a, b) >= 0 === c;
    });
  }function bk(a) {
    var b = bl.split("|"),
        c = a.createDocumentFragment();if (c.createElement) while (b.length) {
      c.createElement(b.pop());
    }return c;
  }function bC(a, b) {
    return a.getElementsByTagName(b)[0] || a.appendChild(a.ownerDocument.createElement(b));
  }function bD(a, b) {
    if (b.nodeType !== 1 || !p.hasData(a)) return;var c,
        d,
        e,
        f = p._data(a),
        g = p._data(b, f),
        h = f.events;if (h) {
      delete g.handle, g.events = {};for (c in h) {
        for (d = 0, e = h[c].length; d < e; d++) {
          p.event.add(b, c, h[c][d]);
        }
      }
    }g.data && (g.data = p.extend({}, g.data));
  }function bE(a, b) {
    var c;if (b.nodeType !== 1) return;b.clearAttributes && b.clearAttributes(), b.mergeAttributes && b.mergeAttributes(a), c = b.nodeName.toLowerCase(), c === "object" ? (b.parentNode && (b.outerHTML = a.outerHTML), p.support.html5Clone && a.innerHTML && !p.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : c === "input" && bv.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : c === "option" ? b.selected = a.defaultSelected : c === "input" || c === "textarea" ? b.defaultValue = a.defaultValue : c === "script" && b.text !== a.text && (b.text = a.text), b.removeAttribute(p.expando);
  }function bF(a) {
    return typeof a.getElementsByTagName != "undefined" ? a.getElementsByTagName("*") : typeof a.querySelectorAll != "undefined" ? a.querySelectorAll("*") : [];
  }function bG(a) {
    bv.test(a.type) && (a.defaultChecked = a.checked);
  }function bY(a, b) {
    if (b in a) return b;var c = b.charAt(0).toUpperCase() + b.slice(1),
        d = b,
        e = bW.length;while (e--) {
      b = bW[e] + c;if (b in a) return b;
    }return d;
  }function bZ(a, b) {
    return a = b || a, p.css(a, "display") === "none" || !p.contains(a.ownerDocument, a);
  }function b$(a, b) {
    var c,
        d,
        e = [],
        f = 0,
        g = a.length;for (; f < g; f++) {
      c = a[f];if (!c.style) continue;e[f] = p._data(c, "olddisplay"), b ? (!e[f] && c.style.display === "none" && (c.style.display = ""), c.style.display === "" && bZ(c) && (e[f] = p._data(c, "olddisplay", cc(c.nodeName)))) : (d = bH(c, "display"), !e[f] && d !== "none" && p._data(c, "olddisplay", d));
    }for (f = 0; f < g; f++) {
      c = a[f];if (!c.style) continue;if (!b || c.style.display === "none" || c.style.display === "") c.style.display = b ? e[f] || "" : "none";
    }return a;
  }function b_(a, b, c) {
    var d = bP.exec(b);return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
  }function ca(a, b, c, d) {
    var e = c === (d ? "border" : "content") ? 4 : b === "width" ? 1 : 0,
        f = 0;for (; e < 4; e += 2) {
      c === "margin" && (f += p.css(a, c + bV[e], !0)), d ? (c === "content" && (f -= parseFloat(bH(a, "padding" + bV[e])) || 0), c !== "margin" && (f -= parseFloat(bH(a, "border" + bV[e] + "Width")) || 0)) : (f += parseFloat(bH(a, "padding" + bV[e])) || 0, c !== "padding" && (f += parseFloat(bH(a, "border" + bV[e] + "Width")) || 0));
    }return f;
  }function cb(a, b, c) {
    var d = b === "width" ? a.offsetWidth : a.offsetHeight,
        e = !0,
        f = p.support.boxSizing && p.css(a, "boxSizing") === "border-box";if (d <= 0 || d == null) {
      d = bH(a, b);if (d < 0 || d == null) d = a.style[b];if (bQ.test(d)) return d;e = f && (p.support.boxSizingReliable || d === a.style[b]), d = parseFloat(d) || 0;
    }return d + ca(a, b, c || (f ? "border" : "content"), e) + "px";
  }function cc(a) {
    if (bS[a]) return bS[a];var b = p("<" + a + ">").appendTo(e.body),
        c = b.css("display");b.remove();if (c === "none" || c === "") {
      bI = e.body.appendChild(bI || p.extend(e.createElement("iframe"), { frameBorder: 0, width: 0, height: 0 }));if (!bJ || !bI.createElement) bJ = (bI.contentWindow || bI.contentDocument).document, bJ.write("<!doctype html><html><body>"), bJ.close();b = bJ.body.appendChild(bJ.createElement(a)), c = bH(b, "display"), e.body.removeChild(bI);
    }return bS[a] = c, c;
  }function ci(a, b, c, d) {
    var e;if (p.isArray(b)) p.each(b, function (b, e) {
      c || ce.test(a) ? d(a, e) : ci(a + "[" + ((typeof e === "undefined" ? "undefined" : _typeof(e)) == "object" ? b : "") + "]", e, c, d);
    });else if (!c && p.type(b) === "object") for (e in b) {
      ci(a + "[" + e + "]", b[e], c, d);
    } else d(a, b);
  }function cz(a) {
    return function (b, c) {
      typeof b != "string" && (c = b, b = "*");var d,
          e,
          f,
          g = b.toLowerCase().split(s),
          h = 0,
          i = g.length;if (p.isFunction(c)) for (; h < i; h++) {
        d = g[h], f = /^\+/.test(d), f && (d = d.substr(1) || "*"), e = a[d] = a[d] || [], e[f ? "unshift" : "push"](c);
      }
    };
  }function cA(a, c, d, e, f, g) {
    f = f || c.dataTypes[0], g = g || {}, g[f] = !0;var h,
        i = a[f],
        j = 0,
        k = i ? i.length : 0,
        l = a === cv;for (; j < k && (l || !h); j++) {
      h = i[j](c, d, e), typeof h == "string" && (!l || g[h] ? h = b : (c.dataTypes.unshift(h), h = cA(a, c, d, e, h, g)));
    }return (l || !h) && !g["*"] && (h = cA(a, c, d, e, "*", g)), h;
  }function cB(a, c) {
    var d,
        e,
        f = p.ajaxSettings.flatOptions || {};for (d in c) {
      c[d] !== b && ((f[d] ? a : e || (e = {}))[d] = c[d]);
    }e && p.extend(!0, a, e);
  }function cC(a, c, d) {
    var e,
        f,
        g,
        h,
        i = a.contents,
        j = a.dataTypes,
        k = a.responseFields;for (f in k) {
      f in d && (c[k[f]] = d[f]);
    }while (j[0] === "*") {
      j.shift(), e === b && (e = a.mimeType || c.getResponseHeader("content-type"));
    }if (e) for (f in i) {
      if (i[f] && i[f].test(e)) {
        j.unshift(f);break;
      }
    }if (j[0] in d) g = j[0];else {
      for (f in d) {
        if (!j[0] || a.converters[f + " " + j[0]]) {
          g = f;break;
        }h || (h = f);
      }g = g || h;
    }if (g) return g !== j[0] && j.unshift(g), d[g];
  }function cD(a, b) {
    var c,
        d,
        e,
        f,
        g = a.dataTypes.slice(),
        h = g[0],
        i = {},
        j = 0;a.dataFilter && (b = a.dataFilter(b, a.dataType));if (g[1]) for (c in a.converters) {
      i[c.toLowerCase()] = a.converters[c];
    }for (; e = g[++j];) {
      if (e !== "*") {
        if (h !== "*" && h !== e) {
          c = i[h + " " + e] || i["* " + e];if (!c) for (d in i) {
            f = d.split(" ");if (f[1] === e) {
              c = i[h + " " + f[0]] || i["* " + f[0]];if (c) {
                c === !0 ? c = i[d] : i[d] !== !0 && (e = f[0], g.splice(j--, 0, e));break;
              }
            }
          }if (c !== !0) if (c && a["throws"]) b = c(b);else try {
            b = c(b);
          } catch (k) {
            return { state: "parsererror", error: c ? k : "No conversion from " + h + " to " + e };
          }
        }h = e;
      }
    }return { state: "success", data: b };
  }function cL() {
    try {
      return new a.XMLHttpRequest();
    } catch (b) {}
  }function cM() {
    try {
      return new a.ActiveXObject("Microsoft.XMLHTTP");
    } catch (b) {}
  }function cU() {
    return setTimeout(function () {
      cN = b;
    }, 0), cN = p.now();
  }function cV(a, b) {
    p.each(b, function (b, c) {
      var d = (cT[b] || []).concat(cT["*"]),
          e = 0,
          f = d.length;for (; e < f; e++) {
        if (d[e].call(a, b, c)) return;
      }
    });
  }function cW(a, b, c) {
    var d,
        e = 0,
        f = 0,
        g = cS.length,
        h = p.Deferred().always(function () {
      delete i.elem;
    }),
        i = function i() {
      var b = cN || cU(),
          c = Math.max(0, j.startTime + j.duration - b),
          d = 1 - (c / j.duration || 0),
          e = 0,
          f = j.tweens.length;for (; e < f; e++) {
        j.tweens[e].run(d);
      }return h.notifyWith(a, [j, d, c]), d < 1 && f ? c : (h.resolveWith(a, [j]), !1);
    },
        j = h.promise({ elem: a, props: p.extend({}, b), opts: p.extend(!0, { specialEasing: {} }, c), originalProperties: b, originalOptions: c, startTime: cN || cU(), duration: c.duration, tweens: [], createTween: function createTween(b, c, d) {
        var e = p.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);return j.tweens.push(e), e;
      }, stop: function stop(b) {
        var c = 0,
            d = b ? j.tweens.length : 0;for (; c < d; c++) {
          j.tweens[c].run(1);
        }return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;
      } }),
        k = j.props;cX(k, j.opts.specialEasing);for (; e < g; e++) {
      d = cS[e].call(j, a, k, j.opts);if (d) return d;
    }return cV(j, k), p.isFunction(j.opts.start) && j.opts.start.call(a, j), p.fx.timer(p.extend(i, { anim: j, queue: j.opts.queue, elem: a })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
  }function cX(a, b) {
    var c, d, e, f, g;for (c in a) {
      d = p.camelCase(c), e = b[d], f = a[c], p.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = p.cssHooks[d];if (g && "expand" in g) {
        f = g.expand(f), delete a[d];for (c in f) {
          c in a || (a[c] = f[c], b[c] = e);
        }
      } else b[d] = e;
    }
  }function cY(a, b, c) {
    var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l = this,
        m = a.style,
        n = {},
        o = [],
        q = a.nodeType && bZ(a);c.queue || (j = p._queueHooks(a, "fx"), j.unqueued == null && (j.unqueued = 0, k = j.empty.fire, j.empty.fire = function () {
      j.unqueued || k();
    }), j.unqueued++, l.always(function () {
      l.always(function () {
        j.unqueued--, p.queue(a, "fx").length || j.empty.fire();
      });
    })), a.nodeType === 1 && ("height" in b || "width" in b) && (c.overflow = [m.overflow, m.overflowX, m.overflowY], p.css(a, "display") === "inline" && p.css(a, "float") === "none" && (!p.support.inlineBlockNeedsLayout || cc(a.nodeName) === "inline" ? m.display = "inline-block" : m.zoom = 1)), c.overflow && (m.overflow = "hidden", p.support.shrinkWrapBlocks || l.done(function () {
      m.overflow = c.overflow[0], m.overflowX = c.overflow[1], m.overflowY = c.overflow[2];
    }));for (d in b) {
      f = b[d];if (cP.exec(f)) {
        delete b[d];if (f === (q ? "hide" : "show")) continue;o.push(d);
      }
    }g = o.length;if (g) {
      h = p._data(a, "fxshow") || p._data(a, "fxshow", {}), q ? p(a).show() : l.done(function () {
        p(a).hide();
      }), l.done(function () {
        var b;p.removeData(a, "fxshow", !0);for (b in n) {
          p.style(a, b, n[b]);
        }
      });for (d = 0; d < g; d++) {
        e = o[d], i = l.createTween(e, q ? h[e] : 0), n[e] = h[e] || p.style(a, e), e in h || (h[e] = i.start, q && (i.end = i.start, i.start = e === "width" || e === "height" ? 1 : 0));
      }
    }
  }function cZ(a, b, c, d, e) {
    return new cZ.prototype.init(a, b, c, d, e);
  }function c$(a, b) {
    var c,
        d = { height: a },
        e = 0;b = b ? 1 : 0;for (; e < 4; e += 2 - b) {
      c = bV[e], d["margin" + c] = d["padding" + c] = a;
    }return b && (d.opacity = d.width = a), d;
  }function da(a) {
    return p.isWindow(a) ? a : a.nodeType === 9 ? a.defaultView || a.parentWindow : !1;
  }var c,
      d,
      e = a.document,
      f = a.location,
      g = a.navigator,
      h = a.jQuery,
      i = a.$,
      j = Array.prototype.push,
      k = Array.prototype.slice,
      l = Array.prototype.indexOf,
      m = Object.prototype.toString,
      n = Object.prototype.hasOwnProperty,
      o = String.prototype.trim,
      p = function p(a, b) {
    return new p.fn.init(a, b, c);
  },
      q = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,
      r = /\S/,
      s = /\s+/,
      t = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      u = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
      v = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
      w = /^[\],:{}\s]*$/,
      x = /(?:^|:|,)(?:\s*\[)+/g,
      y = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
      z = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,
      A = /^-ms-/,
      B = /-([\da-z])/gi,
      C = function C(a, b) {
    return (b + "").toUpperCase();
  },
      D = function D() {
    e.addEventListener ? (e.removeEventListener("DOMContentLoaded", D, !1), p.ready()) : e.readyState === "complete" && (e.detachEvent("onreadystatechange", D), p.ready());
  },
      E = {};p.fn = p.prototype = { constructor: p, init: function init(a, c, d) {
      var f, g, h, i;if (!a) return this;if (a.nodeType) return this.context = this[0] = a, this.length = 1, this;if (typeof a == "string") {
        a.charAt(0) === "<" && a.charAt(a.length - 1) === ">" && a.length >= 3 ? f = [null, a, null] : f = u.exec(a);if (f && (f[1] || !c)) {
          if (f[1]) return c = c instanceof p ? c[0] : c, i = c && c.nodeType ? c.ownerDocument || c : e, a = p.parseHTML(f[1], i, !0), v.test(f[1]) && p.isPlainObject(c) && this.attr.call(a, c, !0), p.merge(this, a);g = e.getElementById(f[2]);if (g && g.parentNode) {
            if (g.id !== f[2]) return d.find(a);this.length = 1, this[0] = g;
          }return this.context = e, this.selector = a, this;
        }return !c || c.jquery ? (c || d).find(a) : this.constructor(c).find(a);
      }return p.isFunction(a) ? d.ready(a) : (a.selector !== b && (this.selector = a.selector, this.context = a.context), p.makeArray(a, this));
    }, selector: "", jquery: "1.8.2", length: 0, size: function size() {
      return this.length;
    }, toArray: function toArray() {
      return k.call(this);
    }, get: function get(a) {
      return a == null ? this.toArray() : a < 0 ? this[this.length + a] : this[a];
    }, pushStack: function pushStack(a, b, c) {
      var d = p.merge(this.constructor(), a);return d.prevObject = this, d.context = this.context, b === "find" ? d.selector = this.selector + (this.selector ? " " : "") + c : b && (d.selector = this.selector + "." + b + "(" + c + ")"), d;
    }, each: function each(a, b) {
      return p.each(this, a, b);
    }, ready: function ready(a) {
      return p.ready.promise().done(a), this;
    }, eq: function eq(a) {
      return a = +a, a === -1 ? this.slice(a) : this.slice(a, a + 1);
    }, first: function first() {
      return this.eq(0);
    }, last: function last() {
      return this.eq(-1);
    }, slice: function slice() {
      return this.pushStack(k.apply(this, arguments), "slice", k.call(arguments).join(","));
    }, map: function map(a) {
      return this.pushStack(p.map(this, function (b, c) {
        return a.call(b, c, b);
      }));
    }, end: function end() {
      return this.prevObject || this.constructor(null);
    }, push: j, sort: [].sort, splice: [].splice }, p.fn.init.prototype = p.fn, p.extend = p.fn.extend = function () {
    var a,
        c,
        d,
        e,
        f,
        g,
        h = arguments[0] || {},
        i = 1,
        j = arguments.length,
        k = !1;typeof h == "boolean" && (k = h, h = arguments[1] || {}, i = 2), (typeof h === "undefined" ? "undefined" : _typeof(h)) != "object" && !p.isFunction(h) && (h = {}), j === i && (h = this, --i);for (; i < j; i++) {
      if ((a = arguments[i]) != null) for (c in a) {
        d = h[c], e = a[c];if (h === e) continue;k && e && (p.isPlainObject(e) || (f = p.isArray(e))) ? (f ? (f = !1, g = d && p.isArray(d) ? d : []) : g = d && p.isPlainObject(d) ? d : {}, h[c] = p.extend(k, g, e)) : e !== b && (h[c] = e);
      }
    }return h;
  }, p.extend({ noConflict: function noConflict(b) {
      return a.$ === p && (a.$ = i), b && a.jQuery === p && (a.jQuery = h), p;
    }, isReady: !1, readyWait: 1, holdReady: function holdReady(a) {
      a ? p.readyWait++ : p.ready(!0);
    }, ready: function ready(a) {
      if (a === !0 ? --p.readyWait : p.isReady) return;if (!e.body) return setTimeout(p.ready, 1);p.isReady = !0;if (a !== !0 && --p.readyWait > 0) return;d.resolveWith(e, [p]), p.fn.trigger && p(e).trigger("ready").off("ready");
    }, isFunction: function isFunction(a) {
      return p.type(a) === "function";
    }, isArray: Array.isArray || function (a) {
      return p.type(a) === "array";
    }, isWindow: function isWindow(a) {
      return a != null && a == a.window;
    }, isNumeric: function isNumeric(a) {
      return !isNaN(parseFloat(a)) && isFinite(a);
    }, type: function type(a) {
      return a == null ? String(a) : E[m.call(a)] || "object";
    }, isPlainObject: function isPlainObject(a) {
      if (!a || p.type(a) !== "object" || a.nodeType || p.isWindow(a)) return !1;try {
        if (a.constructor && !n.call(a, "constructor") && !n.call(a.constructor.prototype, "isPrototypeOf")) return !1;
      } catch (c) {
        return !1;
      }var d;for (d in a) {}return d === b || n.call(a, d);
    }, isEmptyObject: function isEmptyObject(a) {
      var b;for (b in a) {
        return !1;
      }return !0;
    }, error: function error(a) {
      throw new Error(a);
    }, parseHTML: function parseHTML(a, b, c) {
      var d;return !a || typeof a != "string" ? null : (typeof b == "boolean" && (c = b, b = 0), b = b || e, (d = v.exec(a)) ? [b.createElement(d[1])] : (d = p.buildFragment([a], b, c ? null : []), p.merge([], (d.cacheable ? p.clone(d.fragment) : d.fragment).childNodes)));
    }, parseJSON: function parseJSON(b) {
      if (!b || typeof b != "string") return null;b = p.trim(b);if (a.JSON && a.JSON.parse) return a.JSON.parse(b);if (w.test(b.replace(y, "@").replace(z, "]").replace(x, ""))) return new Function("return " + b)();p.error("Invalid JSON: " + b);
    }, parseXML: function parseXML(c) {
      var d, e;if (!c || typeof c != "string") return null;try {
        a.DOMParser ? (e = new DOMParser(), d = e.parseFromString(c, "text/xml")) : (d = new ActiveXObject("Microsoft.XMLDOM"), d.async = "false", d.loadXML(c));
      } catch (f) {
        d = b;
      }return (!d || !d.documentElement || d.getElementsByTagName("parsererror").length) && p.error("Invalid XML: " + c), d;
    }, noop: function noop() {}, globalEval: function globalEval(b) {
      b && r.test(b) && (a.execScript || function (b) {
        a.eval.call(a, b);
      })(b);
    }, camelCase: function camelCase(a) {
      return a.replace(A, "ms-").replace(B, C);
    }, nodeName: function nodeName(a, b) {
      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
    }, each: function each(a, c, d) {
      var e,
          f = 0,
          g = a.length,
          h = g === b || p.isFunction(a);if (d) {
        if (h) {
          for (e in a) {
            if (c.apply(a[e], d) === !1) break;
          }
        } else for (; f < g;) {
          if (c.apply(a[f++], d) === !1) break;
        }
      } else if (h) {
        for (e in a) {
          if (c.call(a[e], e, a[e]) === !1) break;
        }
      } else for (; f < g;) {
        if (c.call(a[f], f, a[f++]) === !1) break;
      }return a;
    }, trim: o && !o.call("﻿ ") ? function (a) {
      return a == null ? "" : o.call(a);
    } : function (a) {
      return a == null ? "" : (a + "").replace(t, "");
    }, makeArray: function makeArray(a, b) {
      var c,
          d = b || [];return a != null && (c = p.type(a), a.length == null || c === "string" || c === "function" || c === "regexp" || p.isWindow(a) ? j.call(d, a) : p.merge(d, a)), d;
    }, inArray: function inArray(a, b, c) {
      var d;if (b) {
        if (l) return l.call(b, a, c);d = b.length, c = c ? c < 0 ? Math.max(0, d + c) : c : 0;for (; c < d; c++) {
          if (c in b && b[c] === a) return c;
        }
      }return -1;
    }, merge: function merge(a, c) {
      var d = c.length,
          e = a.length,
          f = 0;if (typeof d == "number") for (; f < d; f++) {
        a[e++] = c[f];
      } else while (c[f] !== b) {
        a[e++] = c[f++];
      }return a.length = e, a;
    }, grep: function grep(a, b, c) {
      var d,
          e = [],
          f = 0,
          g = a.length;c = !!c;for (; f < g; f++) {
        d = !!b(a[f], f), c !== d && e.push(a[f]);
      }return e;
    }, map: function map(a, c, d) {
      var e,
          f,
          g = [],
          h = 0,
          i = a.length,
          j = a instanceof p || i !== b && typeof i == "number" && (i > 0 && a[0] && a[i - 1] || i === 0 || p.isArray(a));if (j) for (; h < i; h++) {
        e = c(a[h], h, d), e != null && (g[g.length] = e);
      } else for (f in a) {
        e = c(a[f], f, d), e != null && (g[g.length] = e);
      }return g.concat.apply([], g);
    }, guid: 1, proxy: function proxy(a, c) {
      var d, e, f;return typeof c == "string" && (d = a[c], c = a, a = d), p.isFunction(a) ? (e = k.call(arguments, 2), f = function f() {
        return a.apply(c, e.concat(k.call(arguments)));
      }, f.guid = a.guid = a.guid || p.guid++, f) : b;
    }, access: function access(a, c, d, e, f, g, h) {
      var i,
          j = d == null,
          k = 0,
          l = a.length;if (d && (typeof d === "undefined" ? "undefined" : _typeof(d)) == "object") {
        for (k in d) {
          p.access(a, c, k, d[k], 1, g, e);
        }f = 1;
      } else if (e !== b) {
        i = h === b && p.isFunction(e), j && (i ? (i = c, c = function c(a, b, _c) {
          return i.call(p(a), _c);
        }) : (c.call(a, e), c = null));if (c) for (; k < l; k++) {
          c(a[k], d, i ? e.call(a[k], k, c(a[k], d)) : e, h);
        }f = 1;
      }return f ? a : j ? c.call(a) : l ? c(a[0], d) : g;
    }, now: function now() {
      return new Date().getTime();
    } }), p.ready.promise = function (b) {
    if (!d) {
      d = p.Deferred();if (e.readyState === "complete") setTimeout(p.ready, 1);else if (e.addEventListener) e.addEventListener("DOMContentLoaded", D, !1), a.addEventListener("load", p.ready, !1);else {
        e.attachEvent("onreadystatechange", D), a.attachEvent("onload", p.ready);var c = !1;try {
          c = a.frameElement == null && e.documentElement;
        } catch (f) {}c && c.doScroll && function g() {
          if (!p.isReady) {
            try {
              c.doScroll("left");
            } catch (a) {
              return setTimeout(g, 50);
            }p.ready();
          }
        }();
      }
    }return d.promise(b);
  }, p.each("Boolean Number String Function Array Date RegExp Object".split(" "), function (a, b) {
    E["[object " + b + "]"] = b.toLowerCase();
  }), c = p(e);var F = {};p.Callbacks = function (a) {
    a = typeof a == "string" ? F[a] || G(a) : p.extend({}, a);var c,
        d,
        e,
        f,
        g,
        h,
        i = [],
        j = !a.once && [],
        k = function k(b) {
      c = a.memory && b, d = !0, h = f || 0, f = 0, g = i.length, e = !0;for (; i && h < g; h++) {
        if (i[h].apply(b[0], b[1]) === !1 && a.stopOnFalse) {
          c = !1;break;
        }
      }e = !1, i && (j ? j.length && k(j.shift()) : c ? i = [] : l.disable());
    },
        l = { add: function add() {
        if (i) {
          var b = i.length;(function d(b) {
            p.each(b, function (b, c) {
              var e = p.type(c);e === "function" && (!a.unique || !l.has(c)) ? i.push(c) : c && c.length && e !== "string" && d(c);
            });
          })(arguments), e ? g = i.length : c && (f = b, k(c));
        }return this;
      }, remove: function remove() {
        return i && p.each(arguments, function (a, b) {
          var c;while ((c = p.inArray(b, i, c)) > -1) {
            i.splice(c, 1), e && (c <= g && g--, c <= h && h--);
          }
        }), this;
      }, has: function has(a) {
        return p.inArray(a, i) > -1;
      }, empty: function empty() {
        return i = [], this;
      }, disable: function disable() {
        return i = j = c = b, this;
      }, disabled: function disabled() {
        return !i;
      }, lock: function lock() {
        return j = b, c || l.disable(), this;
      }, locked: function locked() {
        return !j;
      }, fireWith: function fireWith(a, b) {
        return b = b || [], b = [a, b.slice ? b.slice() : b], i && (!d || j) && (e ? j.push(b) : k(b)), this;
      }, fire: function fire() {
        return l.fireWith(this, arguments), this;
      }, fired: function fired() {
        return !!d;
      } };return l;
  }, p.extend({ Deferred: function Deferred(a) {
      var b = [["resolve", "done", p.Callbacks("once memory"), "resolved"], ["reject", "fail", p.Callbacks("once memory"), "rejected"], ["notify", "progress", p.Callbacks("memory")]],
          c = "pending",
          d = { state: function state() {
          return c;
        }, always: function always() {
          return e.done(arguments).fail(arguments), this;
        }, then: function then() {
          var a = arguments;return p.Deferred(function (c) {
            p.each(b, function (b, d) {
              var f = d[0],
                  g = a[b];e[d[1]](p.isFunction(g) ? function () {
                var a = g.apply(this, arguments);a && p.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f + "With"](this === e ? c : this, [a]);
              } : c[f]);
            }), a = null;
          }).promise();
        }, promise: function promise(a) {
          return a != null ? p.extend(a, d) : d;
        } },
          e = {};return d.pipe = d.then, p.each(b, function (a, f) {
        var g = f[2],
            h = f[3];d[f[1]] = g.add, h && g.add(function () {
          c = h;
        }, b[a ^ 1][2].disable, b[2][2].lock), e[f[0]] = g.fire, e[f[0] + "With"] = g.fireWith;
      }), d.promise(e), a && a.call(e, e), e;
    }, when: function when(a) {
      var b = 0,
          c = k.call(arguments),
          d = c.length,
          e = d !== 1 || a && p.isFunction(a.promise) ? d : 0,
          f = e === 1 ? a : p.Deferred(),
          g = function g(a, b, c) {
        return function (d) {
          b[a] = this, c[a] = arguments.length > 1 ? k.call(arguments) : d, c === h ? f.notifyWith(b, c) : --e || f.resolveWith(b, c);
        };
      },
          h,
          i,
          j;if (d > 1) {
        h = new Array(d), i = new Array(d), j = new Array(d);for (; b < d; b++) {
          c[b] && p.isFunction(c[b].promise) ? c[b].promise().done(g(b, j, c)).fail(f.reject).progress(g(b, i, h)) : --e;
        }
      }return e || f.resolveWith(j, c), f.promise();
    } }), p.support = function () {
    var b,
        c,
        d,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n = e.createElement("div");n.setAttribute("className", "t"), n.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", c = n.getElementsByTagName("*"), d = n.getElementsByTagName("a")[0], d.style.cssText = "top:1px;float:left;opacity:.5";if (!c || !c.length) return {};f = e.createElement("select"), g = f.appendChild(e.createElement("option")), h = n.getElementsByTagName("input")[0], b = { leadingWhitespace: n.firstChild.nodeType === 3, tbody: !n.getElementsByTagName("tbody").length, htmlSerialize: !!n.getElementsByTagName("link").length, style: /top/.test(d.getAttribute("style")), hrefNormalized: d.getAttribute("href") === "/a", opacity: /^0.5/.test(d.style.opacity), cssFloat: !!d.style.cssFloat, checkOn: h.value === "on", optSelected: g.selected, getSetAttribute: n.className !== "t", enctype: !!e.createElement("form").enctype, html5Clone: e.createElement("nav").cloneNode(!0).outerHTML !== "<:nav></:nav>", boxModel: e.compatMode === "CSS1Compat", submitBubbles: !0, changeBubbles: !0, focusinBubbles: !1, deleteExpando: !0, noCloneEvent: !0, inlineBlockNeedsLayout: !1, shrinkWrapBlocks: !1, reliableMarginRight: !0, boxSizingReliable: !0, pixelPosition: !1 }, h.checked = !0, b.noCloneChecked = h.cloneNode(!0).checked, f.disabled = !0, b.optDisabled = !g.disabled;try {
      delete n.test;
    } catch (o) {
      b.deleteExpando = !1;
    }!n.addEventListener && n.attachEvent && n.fireEvent && (n.attachEvent("onclick", m = function m() {
      b.noCloneEvent = !1;
    }), n.cloneNode(!0).fireEvent("onclick"), n.detachEvent("onclick", m)), h = e.createElement("input"), h.value = "t", h.setAttribute("type", "radio"), b.radioValue = h.value === "t", h.setAttribute("checked", "checked"), h.setAttribute("name", "t"), n.appendChild(h), i = e.createDocumentFragment(), i.appendChild(n.lastChild), b.checkClone = i.cloneNode(!0).cloneNode(!0).lastChild.checked, b.appendChecked = h.checked, i.removeChild(h), i.appendChild(n);if (n.attachEvent) for (k in { submit: !0, change: !0, focusin: !0 }) {
      j = "on" + k, l = j in n, l || (n.setAttribute(j, "return;"), l = typeof n[j] == "function"), b[k + "Bubbles"] = l;
    }return p(function () {
      var c,
          d,
          f,
          g,
          h = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
          i = e.getElementsByTagName("body")[0];if (!i) return;c = e.createElement("div"), c.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px", i.insertBefore(c, i.firstChild), d = e.createElement("div"), c.appendChild(d), d.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", f = d.getElementsByTagName("td"), f[0].style.cssText = "padding:0;margin:0;border:0;display:none", l = f[0].offsetHeight === 0, f[0].style.display = "", f[1].style.display = "none", b.reliableHiddenOffsets = l && f[0].offsetHeight === 0, d.innerHTML = "", d.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;", b.boxSizing = d.offsetWidth === 4, b.doesNotIncludeMarginInBodyOffset = i.offsetTop !== 1, a.getComputedStyle && (b.pixelPosition = (a.getComputedStyle(d, null) || {}).top !== "1%", b.boxSizingReliable = (a.getComputedStyle(d, null) || { width: "4px" }).width === "4px", g = e.createElement("div"), g.style.cssText = d.style.cssText = h, g.style.marginRight = g.style.width = "0", d.style.width = "1px", d.appendChild(g), b.reliableMarginRight = !parseFloat((a.getComputedStyle(g, null) || {}).marginRight)), typeof d.style.zoom != "undefined" && (d.innerHTML = "", d.style.cssText = h + "width:1px;padding:1px;display:inline;zoom:1", b.inlineBlockNeedsLayout = d.offsetWidth === 3, d.style.display = "block", d.style.overflow = "visible", d.innerHTML = "<div></div>", d.firstChild.style.width = "5px", b.shrinkWrapBlocks = d.offsetWidth !== 3, c.style.zoom = 1), i.removeChild(c), c = d = f = g = null;
    }), i.removeChild(n), c = d = f = g = h = i = n = null, b;
  }();var H = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
      I = /([A-Z])/g;p.extend({ cache: {}, deletedIds: [], uuid: 0, expando: "jQuery" + (p.fn.jquery + Math.random()).replace(/\D/g, ""), noData: { embed: !0, object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000", applet: !0 }, hasData: function hasData(a) {
      return a = a.nodeType ? p.cache[a[p.expando]] : a[p.expando], !!a && !K(a);
    }, data: function data(a, c, d, e) {
      if (!p.acceptData(a)) return;var f,
          g,
          h = p.expando,
          i = typeof c == "string",
          j = a.nodeType,
          k = j ? p.cache : a,
          l = j ? a[h] : a[h] && h;if ((!l || !k[l] || !e && !k[l].data) && i && d === b) return;l || (j ? a[h] = l = p.deletedIds.pop() || p.guid++ : l = h), k[l] || (k[l] = {}, j || (k[l].toJSON = p.noop));if ((typeof c === "undefined" ? "undefined" : _typeof(c)) == "object" || typeof c == "function") e ? k[l] = p.extend(k[l], c) : k[l].data = p.extend(k[l].data, c);return f = k[l], e || (f.data || (f.data = {}), f = f.data), d !== b && (f[p.camelCase(c)] = d), i ? (g = f[c], g == null && (g = f[p.camelCase(c)])) : g = f, g;
    }, removeData: function removeData(a, b, c) {
      if (!p.acceptData(a)) return;var d,
          e,
          f,
          g = a.nodeType,
          h = g ? p.cache : a,
          i = g ? a[p.expando] : p.expando;if (!h[i]) return;if (b) {
        d = c ? h[i] : h[i].data;if (d) {
          p.isArray(b) || (b in d ? b = [b] : (b = p.camelCase(b), b in d ? b = [b] : b = b.split(" ")));for (e = 0, f = b.length; e < f; e++) {
            delete d[b[e]];
          }if (!(c ? K : p.isEmptyObject)(d)) return;
        }
      }if (!c) {
        delete h[i].data;if (!K(h[i])) return;
      }g ? p.cleanData([a], !0) : p.support.deleteExpando || h != h.window ? delete h[i] : h[i] = null;
    }, _data: function _data(a, b, c) {
      return p.data(a, b, c, !0);
    }, acceptData: function acceptData(a) {
      var b = a.nodeName && p.noData[a.nodeName.toLowerCase()];return !b || b !== !0 && a.getAttribute("classid") === b;
    } }), p.fn.extend({ data: function data(a, c) {
      var d,
          e,
          f,
          g,
          h,
          i = this[0],
          j = 0,
          k = null;if (a === b) {
        if (this.length) {
          k = p.data(i);if (i.nodeType === 1 && !p._data(i, "parsedAttrs")) {
            f = i.attributes;for (h = f.length; j < h; j++) {
              g = f[j].name, g.indexOf("data-") || (g = p.camelCase(g.substring(5)), J(i, g, k[g]));
            }p._data(i, "parsedAttrs", !0);
          }
        }return k;
      }return (typeof a === "undefined" ? "undefined" : _typeof(a)) == "object" ? this.each(function () {
        p.data(this, a);
      }) : (d = a.split(".", 2), d[1] = d[1] ? "." + d[1] : "", e = d[1] + "!", p.access(this, function (c) {
        if (c === b) return k = this.triggerHandler("getData" + e, [d[0]]), k === b && i && (k = p.data(i, a), k = J(i, a, k)), k === b && d[1] ? this.data(d[0]) : k;d[1] = c, this.each(function () {
          var b = p(this);b.triggerHandler("setData" + e, d), p.data(this, a, c), b.triggerHandler("changeData" + e, d);
        });
      }, null, c, arguments.length > 1, null, !1));
    }, removeData: function removeData(a) {
      return this.each(function () {
        p.removeData(this, a);
      });
    } }), p.extend({ queue: function queue(a, b, c) {
      var d;if (a) return b = (b || "fx") + "queue", d = p._data(a, b), c && (!d || p.isArray(c) ? d = p._data(a, b, p.makeArray(c)) : d.push(c)), d || [];
    }, dequeue: function dequeue(a, b) {
      b = b || "fx";var c = p.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = p._queueHooks(a, b),
          g = function g() {
        p.dequeue(a, b);
      };e === "inprogress" && (e = c.shift(), d--), e && (b === "fx" && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
    }, _queueHooks: function _queueHooks(a, b) {
      var c = b + "queueHooks";return p._data(a, c) || p._data(a, c, { empty: p.Callbacks("once memory").add(function () {
          p.removeData(a, b + "queue", !0), p.removeData(a, c, !0);
        }) });
    } }), p.fn.extend({ queue: function queue(a, c) {
      var d = 2;return typeof a != "string" && (c = a, a = "fx", d--), arguments.length < d ? p.queue(this[0], a) : c === b ? this : this.each(function () {
        var b = p.queue(this, a, c);p._queueHooks(this, a), a === "fx" && b[0] !== "inprogress" && p.dequeue(this, a);
      });
    }, dequeue: function dequeue(a) {
      return this.each(function () {
        p.dequeue(this, a);
      });
    }, delay: function delay(a, b) {
      return a = p.fx ? p.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) {
        var d = setTimeout(b, a);c.stop = function () {
          clearTimeout(d);
        };
      });
    }, clearQueue: function clearQueue(a) {
      return this.queue(a || "fx", []);
    }, promise: function promise(a, c) {
      var d,
          e = 1,
          f = p.Deferred(),
          g = this,
          h = this.length,
          i = function i() {
        --e || f.resolveWith(g, [g]);
      };typeof a != "string" && (c = a, a = b), a = a || "fx";while (h--) {
        d = p._data(g[h], a + "queueHooks"), d && d.empty && (e++, d.empty.add(i));
      }return i(), f.promise(c);
    } });var L,
      M,
      N,
      O = /[\t\r\n]/g,
      P = /\r/g,
      Q = /^(?:button|input)$/i,
      R = /^(?:button|input|object|select|textarea)$/i,
      S = /^a(?:rea|)$/i,
      T = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
      U = p.support.getSetAttribute;p.fn.extend({ attr: function attr(a, b) {
      return p.access(this, p.attr, a, b, arguments.length > 1);
    }, removeAttr: function removeAttr(a) {
      return this.each(function () {
        p.removeAttr(this, a);
      });
    }, prop: function prop(a, b) {
      return p.access(this, p.prop, a, b, arguments.length > 1);
    }, removeProp: function removeProp(a) {
      return a = p.propFix[a] || a, this.each(function () {
        try {
          this[a] = b, delete this[a];
        } catch (c) {}
      });
    }, addClass: function addClass(a) {
      var b, c, d, e, f, g, h;if (p.isFunction(a)) return this.each(function (b) {
        p(this).addClass(a.call(this, b, this.className));
      });if (a && typeof a == "string") {
        b = a.split(s);for (c = 0, d = this.length; c < d; c++) {
          e = this[c];if (e.nodeType === 1) if (!e.className && b.length === 1) e.className = a;else {
            f = " " + e.className + " ";for (g = 0, h = b.length; g < h; g++) {
              f.indexOf(" " + b[g] + " ") < 0 && (f += b[g] + " ");
            }e.className = p.trim(f);
          }
        }
      }return this;
    }, removeClass: function removeClass(a) {
      var c, d, e, f, g, h, i;if (p.isFunction(a)) return this.each(function (b) {
        p(this).removeClass(a.call(this, b, this.className));
      });if (a && typeof a == "string" || a === b) {
        c = (a || "").split(s);for (h = 0, i = this.length; h < i; h++) {
          e = this[h];if (e.nodeType === 1 && e.className) {
            d = (" " + e.className + " ").replace(O, " ");for (f = 0, g = c.length; f < g; f++) {
              while (d.indexOf(" " + c[f] + " ") >= 0) {
                d = d.replace(" " + c[f] + " ", " ");
              }
            }e.className = a ? p.trim(d) : "";
          }
        }
      }return this;
    }, toggleClass: function toggleClass(a, b) {
      var c = typeof a === "undefined" ? "undefined" : _typeof(a),
          d = typeof b == "boolean";return p.isFunction(a) ? this.each(function (c) {
        p(this).toggleClass(a.call(this, c, this.className, b), b);
      }) : this.each(function () {
        if (c === "string") {
          var e,
              f = 0,
              g = p(this),
              h = b,
              i = a.split(s);while (e = i[f++]) {
            h = d ? h : !g.hasClass(e), g[h ? "addClass" : "removeClass"](e);
          }
        } else if (c === "undefined" || c === "boolean") this.className && p._data(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : p._data(this, "__className__") || "";
      });
    }, hasClass: function hasClass(a) {
      var b = " " + a + " ",
          c = 0,
          d = this.length;for (; c < d; c++) {
        if (this[c].nodeType === 1 && (" " + this[c].className + " ").replace(O, " ").indexOf(b) >= 0) return !0;
      }return !1;
    }, val: function val(a) {
      var c,
          d,
          e,
          f = this[0];if (!arguments.length) {
        if (f) return c = p.valHooks[f.type] || p.valHooks[f.nodeName.toLowerCase()], c && "get" in c && (d = c.get(f, "value")) !== b ? d : (d = f.value, typeof d == "string" ? d.replace(P, "") : d == null ? "" : d);return;
      }return e = p.isFunction(a), this.each(function (d) {
        var f,
            g = p(this);if (this.nodeType !== 1) return;e ? f = a.call(this, d, g.val()) : f = a, f == null ? f = "" : typeof f == "number" ? f += "" : p.isArray(f) && (f = p.map(f, function (a) {
          return a == null ? "" : a + "";
        })), c = p.valHooks[this.type] || p.valHooks[this.nodeName.toLowerCase()];if (!c || !("set" in c) || c.set(this, f, "value") === b) this.value = f;
      });
    } }), p.extend({ valHooks: { option: { get: function get(a) {
          var b = a.attributes.value;return !b || b.specified ? a.value : a.text;
        } }, select: { get: function get(a) {
          var b,
              c,
              d,
              e,
              f = a.selectedIndex,
              g = [],
              h = a.options,
              i = a.type === "select-one";if (f < 0) return null;c = i ? f : 0, d = i ? f + 1 : h.length;for (; c < d; c++) {
            e = h[c];if (e.selected && (p.support.optDisabled ? !e.disabled : e.getAttribute("disabled") === null) && (!e.parentNode.disabled || !p.nodeName(e.parentNode, "optgroup"))) {
              b = p(e).val();if (i) return b;g.push(b);
            }
          }return i && !g.length && h.length ? p(h[f]).val() : g;
        }, set: function set(a, b) {
          var c = p.makeArray(b);return p(a).find("option").each(function () {
            this.selected = p.inArray(p(this).val(), c) >= 0;
          }), c.length || (a.selectedIndex = -1), c;
        } } }, attrFn: {}, attr: function attr(a, c, d, e) {
      var f,
          g,
          h,
          i = a.nodeType;if (!a || i === 3 || i === 8 || i === 2) return;if (e && p.isFunction(p.fn[c])) return p(a)[c](d);if (typeof a.getAttribute == "undefined") return p.prop(a, c, d);h = i !== 1 || !p.isXMLDoc(a), h && (c = c.toLowerCase(), g = p.attrHooks[c] || (T.test(c) ? M : L));if (d !== b) {
        if (d === null) {
          p.removeAttr(a, c);return;
        }return g && "set" in g && h && (f = g.set(a, d, c)) !== b ? f : (a.setAttribute(c, d + ""), d);
      }return g && "get" in g && h && (f = g.get(a, c)) !== null ? f : (f = a.getAttribute(c), f === null ? b : f);
    }, removeAttr: function removeAttr(a, b) {
      var c,
          d,
          e,
          f,
          g = 0;if (b && a.nodeType === 1) {
        d = b.split(s);for (; g < d.length; g++) {
          e = d[g], e && (c = p.propFix[e] || e, f = T.test(e), f || p.attr(a, e, ""), a.removeAttribute(U ? e : c), f && c in a && (a[c] = !1));
        }
      }
    }, attrHooks: { type: { set: function set(a, b) {
          if (Q.test(a.nodeName) && a.parentNode) p.error("type property can't be changed");else if (!p.support.radioValue && b === "radio" && p.nodeName(a, "input")) {
            var c = a.value;return a.setAttribute("type", b), c && (a.value = c), b;
          }
        } }, value: { get: function get(a, b) {
          return L && p.nodeName(a, "button") ? L.get(a, b) : b in a ? a.value : null;
        }, set: function set(a, b, c) {
          if (L && p.nodeName(a, "button")) return L.set(a, b, c);a.value = b;
        } } }, propFix: { tabindex: "tabIndex", readonly: "readOnly", "for": "htmlFor", "class": "className", maxlength: "maxLength", cellspacing: "cellSpacing", cellpadding: "cellPadding", rowspan: "rowSpan", colspan: "colSpan", usemap: "useMap", frameborder: "frameBorder", contenteditable: "contentEditable" }, prop: function prop(a, c, d) {
      var e,
          f,
          g,
          h = a.nodeType;if (!a || h === 3 || h === 8 || h === 2) return;return g = h !== 1 || !p.isXMLDoc(a), g && (c = p.propFix[c] || c, f = p.propHooks[c]), d !== b ? f && "set" in f && (e = f.set(a, d, c)) !== b ? e : a[c] = d : f && "get" in f && (e = f.get(a, c)) !== null ? e : a[c];
    }, propHooks: { tabIndex: { get: function get(a) {
          var c = a.getAttributeNode("tabindex");return c && c.specified ? parseInt(c.value, 10) : R.test(a.nodeName) || S.test(a.nodeName) && a.href ? 0 : b;
        } } } }), M = { get: function get(a, c) {
      var d,
          e = p.prop(a, c);return e === !0 || typeof e != "boolean" && (d = a.getAttributeNode(c)) && d.nodeValue !== !1 ? c.toLowerCase() : b;
    }, set: function set(a, b, c) {
      var d;return b === !1 ? p.removeAttr(a, c) : (d = p.propFix[c] || c, d in a && (a[d] = !0), a.setAttribute(c, c.toLowerCase())), c;
    } }, U || (N = { name: !0, id: !0, coords: !0 }, L = p.valHooks.button = { get: function get(a, c) {
      var d;return d = a.getAttributeNode(c), d && (N[c] ? d.value !== "" : d.specified) ? d.value : b;
    }, set: function set(a, b, c) {
      var d = a.getAttributeNode(c);return d || (d = e.createAttribute(c), a.setAttributeNode(d)), d.value = b + "";
    } }, p.each(["width", "height"], function (a, b) {
    p.attrHooks[b] = p.extend(p.attrHooks[b], { set: function set(a, c) {
        if (c === "") return a.setAttribute(b, "auto"), c;
      } });
  }), p.attrHooks.contenteditable = { get: L.get, set: function set(a, b, c) {
      b === "" && (b = "false"), L.set(a, b, c);
    } }), p.support.hrefNormalized || p.each(["href", "src", "width", "height"], function (a, c) {
    p.attrHooks[c] = p.extend(p.attrHooks[c], { get: function get(a) {
        var d = a.getAttribute(c, 2);return d === null ? b : d;
      } });
  }), p.support.style || (p.attrHooks.style = { get: function get(a) {
      return a.style.cssText.toLowerCase() || b;
    }, set: function set(a, b) {
      return a.style.cssText = b + "";
    } }), p.support.optSelected || (p.propHooks.selected = p.extend(p.propHooks.selected, { get: function get(a) {
      var b = a.parentNode;return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;
    } })), p.support.enctype || (p.propFix.enctype = "encoding"), p.support.checkOn || p.each(["radio", "checkbox"], function () {
    p.valHooks[this] = { get: function get(a) {
        return a.getAttribute("value") === null ? "on" : a.value;
      } };
  }), p.each(["radio", "checkbox"], function () {
    p.valHooks[this] = p.extend(p.valHooks[this], { set: function set(a, b) {
        if (p.isArray(b)) return a.checked = p.inArray(p(a).val(), b) >= 0;
      } });
  });var V = /^(?:textarea|input|select)$/i,
      W = /^([^\.]*|)(?:\.(.+)|)$/,
      X = /(?:^|\s)hover(\.\S+|)\b/,
      Y = /^key/,
      Z = /^(?:mouse|contextmenu)|click/,
      $ = /^(?:focusinfocus|focusoutblur)$/,
      _ = function _(a) {
    return p.event.special.hover ? a : a.replace(X, "mouseenter$1 mouseleave$1");
  };p.event = { add: function add(a, c, d, e, f) {
      var g, _h, i, j, k, l, m, n, o, q, r;if (a.nodeType === 3 || a.nodeType === 8 || !c || !d || !(g = p._data(a))) return;d.handler && (o = d, d = o.handler, f = o.selector), d.guid || (d.guid = p.guid++), i = g.events, i || (g.events = i = {}), _h = g.handle, _h || (g.handle = _h = function h(a) {
        return typeof p != "undefined" && (!a || p.event.triggered !== a.type) ? p.event.dispatch.apply(_h.elem, arguments) : b;
      }, _h.elem = a), c = p.trim(_(c)).split(" ");for (j = 0; j < c.length; j++) {
        k = W.exec(c[j]) || [], l = k[1], m = (k[2] || "").split(".").sort(), r = p.event.special[l] || {}, l = (f ? r.delegateType : r.bindType) || l, r = p.event.special[l] || {}, n = p.extend({ type: l, origType: k[1], data: e, handler: d, guid: d.guid, selector: f, needsContext: f && p.expr.match.needsContext.test(f), namespace: m.join(".") }, o), q = i[l];if (!q) {
          q = i[l] = [], q.delegateCount = 0;if (!r.setup || r.setup.call(a, e, m, _h) === !1) a.addEventListener ? a.addEventListener(l, _h, !1) : a.attachEvent && a.attachEvent("on" + l, _h);
        }r.add && (r.add.call(a, n), n.handler.guid || (n.handler.guid = d.guid)), f ? q.splice(q.delegateCount++, 0, n) : q.push(n), p.event.global[l] = !0;
      }a = null;
    }, global: {}, remove: function remove(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          q,
          r = p.hasData(a) && p._data(a);if (!r || !(m = r.events)) return;b = p.trim(_(b || "")).split(" ");for (f = 0; f < b.length; f++) {
        g = W.exec(b[f]) || [], h = i = g[1], j = g[2];if (!h) {
          for (h in m) {
            p.event.remove(a, h + b[f], c, d, !0);
          }continue;
        }n = p.event.special[h] || {}, h = (d ? n.delegateType : n.bindType) || h, o = m[h] || [], k = o.length, j = j ? new RegExp("(^|\\.)" + j.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;for (l = 0; l < o.length; l++) {
          q = o[l], (e || i === q.origType) && (!c || c.guid === q.guid) && (!j || j.test(q.namespace)) && (!d || d === q.selector || d === "**" && q.selector) && (o.splice(l--, 1), q.selector && o.delegateCount--, n.remove && n.remove.call(a, q));
        }o.length === 0 && k !== o.length && ((!n.teardown || n.teardown.call(a, j, r.handle) === !1) && p.removeEvent(a, h, r.handle), delete m[h]);
      }p.isEmptyObject(m) && (delete r.handle, p.removeData(a, "events", !0));
    }, customEvent: { getData: !0, setData: !0, changeData: !0 }, trigger: function trigger(c, d, f, g) {
      if (!f || f.nodeType !== 3 && f.nodeType !== 8) {
        var h,
            i,
            j,
            k,
            l,
            m,
            n,
            o,
            q,
            r,
            s = c.type || c,
            t = [];if ($.test(s + p.event.triggered)) return;s.indexOf("!") >= 0 && (s = s.slice(0, -1), i = !0), s.indexOf(".") >= 0 && (t = s.split("."), s = t.shift(), t.sort());if ((!f || p.event.customEvent[s]) && !p.event.global[s]) return;c = (typeof c === "undefined" ? "undefined" : _typeof(c)) == "object" ? c[p.expando] ? c : new p.Event(s, c) : new p.Event(s), c.type = s, c.isTrigger = !0, c.exclusive = i, c.namespace = t.join("."), c.namespace_re = c.namespace ? new RegExp("(^|\\.)" + t.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, m = s.indexOf(":") < 0 ? "on" + s : "";if (!f) {
          h = p.cache;for (j in h) {
            h[j].events && h[j].events[s] && p.event.trigger(c, d, h[j].handle.elem, !0);
          }return;
        }c.result = b, c.target || (c.target = f), d = d != null ? p.makeArray(d) : [], d.unshift(c), n = p.event.special[s] || {};if (n.trigger && n.trigger.apply(f, d) === !1) return;q = [[f, n.bindType || s]];if (!g && !n.noBubble && !p.isWindow(f)) {
          r = n.delegateType || s, k = $.test(r + s) ? f : f.parentNode;for (l = f; k; k = k.parentNode) {
            q.push([k, r]), l = k;
          }l === (f.ownerDocument || e) && q.push([l.defaultView || l.parentWindow || a, r]);
        }for (j = 0; j < q.length && !c.isPropagationStopped(); j++) {
          k = q[j][0], c.type = q[j][1], o = (p._data(k, "events") || {})[c.type] && p._data(k, "handle"), o && o.apply(k, d), o = m && k[m], o && p.acceptData(k) && o.apply && o.apply(k, d) === !1 && c.preventDefault();
        }return c.type = s, !g && !c.isDefaultPrevented() && (!n._default || n._default.apply(f.ownerDocument, d) === !1) && (s !== "click" || !p.nodeName(f, "a")) && p.acceptData(f) && m && f[s] && (s !== "focus" && s !== "blur" || c.target.offsetWidth !== 0) && !p.isWindow(f) && (l = f[m], l && (f[m] = null), p.event.triggered = s, f[s](), p.event.triggered = b, l && (f[m] = l)), c.result;
      }return;
    }, dispatch: function dispatch(c) {
      c = p.event.fix(c || a.event);var d,
          e,
          f,
          g,
          h,
          i,
          j,
          l,
          m,
          n,
          o = (p._data(this, "events") || {})[c.type] || [],
          q = o.delegateCount,
          r = k.call(arguments),
          s = !c.exclusive && !c.namespace,
          t = p.event.special[c.type] || {},
          u = [];r[0] = c, c.delegateTarget = this;if (t.preDispatch && t.preDispatch.call(this, c) === !1) return;if (q && (!c.button || c.type !== "click")) for (f = c.target; f != this; f = f.parentNode || this) {
        if (f.disabled !== !0 || c.type !== "click") {
          h = {}, j = [];for (d = 0; d < q; d++) {
            l = o[d], m = l.selector, h[m] === b && (h[m] = l.needsContext ? p(m, this).index(f) >= 0 : p.find(m, this, null, [f]).length), h[m] && j.push(l);
          }j.length && u.push({ elem: f, matches: j });
        }
      }o.length > q && u.push({ elem: this, matches: o.slice(q) });for (d = 0; d < u.length && !c.isPropagationStopped(); d++) {
        i = u[d], c.currentTarget = i.elem;for (e = 0; e < i.matches.length && !c.isImmediatePropagationStopped(); e++) {
          l = i.matches[e];if (s || !c.namespace && !l.namespace || c.namespace_re && c.namespace_re.test(l.namespace)) c.data = l.data, c.handleObj = l, g = ((p.event.special[l.origType] || {}).handle || l.handler).apply(i.elem, r), g !== b && (c.result = g, g === !1 && (c.preventDefault(), c.stopPropagation()));
        }
      }return t.postDispatch && t.postDispatch.call(this, c), c.result;
    }, props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function filter(a, b) {
        return a.which == null && (a.which = b.charCode != null ? b.charCode : b.keyCode), a;
      } }, mouseHooks: { props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function filter(a, c) {
        var d,
            f,
            g,
            h = c.button,
            i = c.fromElement;return a.pageX == null && c.clientX != null && (d = a.target.ownerDocument || e, f = d.documentElement, g = d.body, a.pageX = c.clientX + (f && f.scrollLeft || g && g.scrollLeft || 0) - (f && f.clientLeft || g && g.clientLeft || 0), a.pageY = c.clientY + (f && f.scrollTop || g && g.scrollTop || 0) - (f && f.clientTop || g && g.clientTop || 0)), !a.relatedTarget && i && (a.relatedTarget = i === a.target ? c.toElement : i), !a.which && h !== b && (a.which = h & 1 ? 1 : h & 2 ? 3 : h & 4 ? 2 : 0), a;
      } }, fix: function fix(a) {
      if (a[p.expando]) return a;var b,
          c,
          d = a,
          f = p.event.fixHooks[a.type] || {},
          g = f.props ? this.props.concat(f.props) : this.props;a = p.Event(d);for (b = g.length; b;) {
        c = g[--b], a[c] = d[c];
      }return a.target || (a.target = d.srcElement || e), a.target.nodeType === 3 && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, f.filter ? f.filter(a, d) : a;
    }, special: { load: { noBubble: !0 }, focus: { delegateType: "focusin" }, blur: { delegateType: "focusout" }, beforeunload: { setup: function setup(a, b, c) {
          p.isWindow(this) && (this.onbeforeunload = c);
        }, teardown: function teardown(a, b) {
          this.onbeforeunload === b && (this.onbeforeunload = null);
        } } }, simulate: function simulate(a, b, c, d) {
      var e = p.extend(new p.Event(), c, { type: a, isSimulated: !0, originalEvent: {} });d ? p.event.trigger(e, null, b) : p.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
    } }, p.event.handle = p.event.dispatch, p.removeEvent = e.removeEventListener ? function (a, b, c) {
    a.removeEventListener && a.removeEventListener(b, c, !1);
  } : function (a, b, c) {
    var d = "on" + b;a.detachEvent && (typeof a[d] == "undefined" && (a[d] = null), a.detachEvent(d, c));
  }, p.Event = function (a, b) {
    if (this instanceof p.Event) a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || a.returnValue === !1 || a.getPreventDefault && a.getPreventDefault() ? bb : ba) : this.type = a, b && p.extend(this, b), this.timeStamp = a && a.timeStamp || p.now(), this[p.expando] = !0;else return new p.Event(a, b);
  }, p.Event.prototype = { preventDefault: function preventDefault() {
      this.isDefaultPrevented = bb;var a = this.originalEvent;if (!a) return;a.preventDefault ? a.preventDefault() : a.returnValue = !1;
    }, stopPropagation: function stopPropagation() {
      this.isPropagationStopped = bb;var a = this.originalEvent;if (!a) return;a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0;
    }, stopImmediatePropagation: function stopImmediatePropagation() {
      this.isImmediatePropagationStopped = bb, this.stopPropagation();
    }, isDefaultPrevented: ba, isPropagationStopped: ba, isImmediatePropagationStopped: ba }, p.each({ mouseenter: "mouseover", mouseleave: "mouseout" }, function (a, b) {
    p.event.special[a] = { delegateType: b, bindType: b, handle: function handle(a) {
        var c,
            d = this,
            e = a.relatedTarget,
            f = a.handleObj,
            g = f.selector;if (!e || e !== d && !p.contains(d, e)) a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b;return c;
      } };
  }), p.support.submitBubbles || (p.event.special.submit = { setup: function setup() {
      if (p.nodeName(this, "form")) return !1;p.event.add(this, "click._submit keypress._submit", function (a) {
        var c = a.target,
            d = p.nodeName(c, "input") || p.nodeName(c, "button") ? c.form : b;d && !p._data(d, "_submit_attached") && (p.event.add(d, "submit._submit", function (a) {
          a._submit_bubble = !0;
        }), p._data(d, "_submit_attached", !0));
      });
    }, postDispatch: function postDispatch(a) {
      a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && p.event.simulate("submit", this.parentNode, a, !0));
    }, teardown: function teardown() {
      if (p.nodeName(this, "form")) return !1;p.event.remove(this, "._submit");
    } }), p.support.changeBubbles || (p.event.special.change = { setup: function setup() {
      if (V.test(this.nodeName)) {
        if (this.type === "checkbox" || this.type === "radio") p.event.add(this, "propertychange._change", function (a) {
          a.originalEvent.propertyName === "checked" && (this._just_changed = !0);
        }), p.event.add(this, "click._change", function (a) {
          this._just_changed && !a.isTrigger && (this._just_changed = !1), p.event.simulate("change", this, a, !0);
        });return !1;
      }p.event.add(this, "beforeactivate._change", function (a) {
        var b = a.target;V.test(b.nodeName) && !p._data(b, "_change_attached") && (p.event.add(b, "change._change", function (a) {
          this.parentNode && !a.isSimulated && !a.isTrigger && p.event.simulate("change", this.parentNode, a, !0);
        }), p._data(b, "_change_attached", !0));
      });
    }, handle: function handle(a) {
      var b = a.target;if (this !== b || a.isSimulated || a.isTrigger || b.type !== "radio" && b.type !== "checkbox") return a.handleObj.handler.apply(this, arguments);
    }, teardown: function teardown() {
      return p.event.remove(this, "._change"), !V.test(this.nodeName);
    } }), p.support.focusinBubbles || p.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
    var c = 0,
        d = function d(a) {
      p.event.simulate(b, a.target, p.event.fix(a), !0);
    };p.event.special[b] = { setup: function setup() {
        c++ === 0 && e.addEventListener(a, d, !0);
      }, teardown: function teardown() {
        --c === 0 && e.removeEventListener(a, d, !0);
      } };
  }), p.fn.extend({ on: function on(a, c, d, e, f) {
      var g, h;if ((typeof a === "undefined" ? "undefined" : _typeof(a)) == "object") {
        typeof c != "string" && (d = d || c, c = b);for (h in a) {
          this.on(h, c, d, a[h], f);
        }return this;
      }d == null && e == null ? (e = c, d = c = b) : e == null && (typeof c == "string" ? (e = d, d = b) : (e = d, d = c, c = b));if (e === !1) e = ba;else if (!e) return this;return f === 1 && (g = e, e = function e(a) {
        return p().off(a), g.apply(this, arguments);
      }, e.guid = g.guid || (g.guid = p.guid++)), this.each(function () {
        p.event.add(this, a, e, d, c);
      });
    }, one: function one(a, b, c, d) {
      return this.on(a, b, c, d, 1);
    }, off: function off(a, c, d) {
      var e, f;if (a && a.preventDefault && a.handleObj) return e = a.handleObj, p(a.delegateTarget).off(e.namespace ? e.origType + "." + e.namespace : e.origType, e.selector, e.handler), this;if ((typeof a === "undefined" ? "undefined" : _typeof(a)) == "object") {
        for (f in a) {
          this.off(f, c, a[f]);
        }return this;
      }if (c === !1 || typeof c == "function") d = c, c = b;return d === !1 && (d = ba), this.each(function () {
        p.event.remove(this, a, d, c);
      });
    }, bind: function bind(a, b, c) {
      return this.on(a, null, b, c);
    }, unbind: function unbind(a, b) {
      return this.off(a, null, b);
    }, live: function live(a, b, c) {
      return p(this.context).on(a, this.selector, b, c), this;
    }, die: function die(a, b) {
      return p(this.context).off(a, this.selector || "**", b), this;
    }, delegate: function delegate(a, b, c, d) {
      return this.on(b, a, c, d);
    }, undelegate: function undelegate(a, b, c) {
      return arguments.length === 1 ? this.off(a, "**") : this.off(b, a || "**", c);
    }, trigger: function trigger(a, b) {
      return this.each(function () {
        p.event.trigger(a, b, this);
      });
    }, triggerHandler: function triggerHandler(a, b) {
      if (this[0]) return p.event.trigger(a, b, this[0], !0);
    }, toggle: function toggle(a) {
      var b = arguments,
          c = a.guid || p.guid++,
          d = 0,
          e = function e(c) {
        var e = (p._data(this, "lastToggle" + a.guid) || 0) % d;return p._data(this, "lastToggle" + a.guid, e + 1), c.preventDefault(), b[e].apply(this, arguments) || !1;
      };e.guid = c;while (d < b.length) {
        b[d++].guid = c;
      }return this.click(e);
    }, hover: function hover(a, b) {
      return this.mouseenter(a).mouseleave(b || a);
    } }), p.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {
    p.fn[b] = function (a, c) {
      return c == null && (c = a, a = null), arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
    }, Y.test(b) && (p.event.fixHooks[b] = p.event.keyHooks), Z.test(b) && (p.event.fixHooks[b] = p.event.mouseHooks);
  }), function (a, b) {
    function bc(a, b, c, d) {
      c = c || [], b = b || r;var e,
          f,
          i,
          j,
          k = b.nodeType;if (!a || typeof a != "string") return c;if (k !== 1 && k !== 9) return [];i = g(b);if (!i && !d) if (e = P.exec(a)) if (j = e[1]) {
        if (k === 9) {
          f = b.getElementById(j);if (!f || !f.parentNode) return c;if (f.id === j) return c.push(f), c;
        } else if (b.ownerDocument && (f = b.ownerDocument.getElementById(j)) && h(b, f) && f.id === j) return c.push(f), c;
      } else {
        if (e[2]) return w.apply(c, x.call(b.getElementsByTagName(a), 0)), c;if ((j = e[3]) && _ && b.getElementsByClassName) return w.apply(c, x.call(b.getElementsByClassName(j), 0)), c;
      }return bp(a.replace(L, "$1"), b, c, d, i);
    }function bd(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();return c === "input" && b.type === a;
      };
    }function be(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();return (c === "input" || c === "button") && b.type === a;
      };
    }function bf(a) {
      return z(function (b) {
        return b = +b, z(function (c, d) {
          var e,
              f = a([], c.length, b),
              g = f.length;while (g--) {
            c[e = f[g]] && (c[e] = !(d[e] = c[e]));
          }
        });
      });
    }function bg(a, b, c) {
      if (a === b) return c;var d = a.nextSibling;while (d) {
        if (d === b) return -1;d = d.nextSibling;
      }return 1;
    }function bh(a, b) {
      var c,
          d,
          f,
          g,
          h,
          i,
          j,
          k = C[o][a];if (k) return b ? 0 : k.slice(0);h = a, i = [], j = e.preFilter;while (h) {
        if (!c || (d = M.exec(h))) d && (h = h.slice(d[0].length)), i.push(f = []);c = !1;if (d = N.exec(h)) f.push(c = new q(d.shift())), h = h.slice(c.length), c.type = d[0].replace(L, " ");for (g in e.filter) {
          (d = W[g].exec(h)) && (!j[g] || (d = j[g](d, r, !0))) && (f.push(c = new q(d.shift())), h = h.slice(c.length), c.type = g, c.matches = d);
        }if (!c) break;
      }return b ? h.length : h ? bc.error(a) : C(a, i).slice(0);
    }function bi(a, b, d) {
      var e = b.dir,
          f = d && b.dir === "parentNode",
          g = u++;return b.first ? function (b, c, d) {
        while (b = b[e]) {
          if (f || b.nodeType === 1) return a(b, c, d);
        }
      } : function (b, d, h) {
        if (!h) {
          var i,
              j = t + " " + g + " ",
              k = j + c;while (b = b[e]) {
            if (f || b.nodeType === 1) {
              if ((i = b[o]) === k) return b.sizset;if (typeof i == "string" && i.indexOf(j) === 0) {
                if (b.sizset) return b;
              } else {
                b[o] = k;if (a(b, d, h)) return b.sizset = !0, b;b.sizset = !1;
              }
            }
          }
        } else while (b = b[e]) {
          if (f || b.nodeType === 1) if (a(b, d, h)) return b;
        }
      };
    }function bj(a) {
      return a.length > 1 ? function (b, c, d) {
        var e = a.length;while (e--) {
          if (!a[e](b, c, d)) return !1;
        }return !0;
      } : a[0];
    }function bk(a, b, c, d, e) {
      var f,
          g = [],
          h = 0,
          i = a.length,
          j = b != null;for (; h < i; h++) {
        if (f = a[h]) if (!c || c(f, d, e)) g.push(f), j && b.push(h);
      }return g;
    }function bl(a, b, c, d, e, f) {
      return d && !d[o] && (d = bl(d)), e && !e[o] && (e = bl(e, f)), z(function (f, g, h, i) {
        if (f && e) return;var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || bo(b || "*", h.nodeType ? [h] : h, [], f),
            q = a && (f || !b) ? bk(p, m, a, h, i) : p,
            r = c ? e || (f ? a : o || d) ? [] : g : q;c && c(q, r, h, i);if (d) {
          l = bk(r, n), d(l, [], h, i), j = l.length;while (j--) {
            if (k = l[j]) r[n[j]] = !(q[n[j]] = k);
          }
        }if (f) {
          j = a && r.length;while (j--) {
            if (k = r[j]) f[m[j]] = !(g[m[j]] = k);
          }
        } else r = bk(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : w.apply(g, r);
      });
    }function bm(a) {
      var b,
          c,
          d,
          f = a.length,
          g = e.relative[a[0].type],
          h = g || e.relative[" "],
          i = g ? 1 : 0,
          j = bi(function (a) {
        return a === b;
      }, h, !0),
          k = bi(function (a) {
        return y.call(b, a) > -1;
      }, h, !0),
          m = [function (a, c, d) {
        return !g && (d || c !== l) || ((b = c).nodeType ? j(a, c, d) : k(a, c, d));
      }];for (; i < f; i++) {
        if (c = e.relative[a[i].type]) m = [bi(bj(m), c)];else {
          c = e.filter[a[i].type].apply(null, a[i].matches);if (c[o]) {
            d = ++i;for (; d < f; d++) {
              if (e.relative[a[d].type]) break;
            }return bl(i > 1 && bj(m), i > 1 && a.slice(0, i - 1).join("").replace(L, "$1"), c, i < d && bm(a.slice(i, d)), d < f && bm(a = a.slice(d)), d < f && a.join(""));
          }m.push(c);
        }
      }return bj(m);
    }function bn(a, b) {
      var d = b.length > 0,
          f = a.length > 0,
          g = function g(h, i, j, k, m) {
        var n,
            o,
            p,
            q = [],
            s = 0,
            u = "0",
            x = h && [],
            y = m != null,
            z = l,
            A = h || f && e.find.TAG("*", m && i.parentNode || i),
            B = t += z == null ? 1 : Math.E;y && (l = i !== r && i, c = g.el);for (; (n = A[u]) != null; u++) {
          if (f && n) {
            for (o = 0; p = a[o]; o++) {
              if (p(n, i, j)) {
                k.push(n);break;
              }
            }y && (t = B, c = ++g.el);
          }d && ((n = !p && n) && s--, h && x.push(n));
        }s += u;if (d && u !== s) {
          for (o = 0; p = b[o]; o++) {
            p(x, q, i, j);
          }if (h) {
            if (s > 0) while (u--) {
              !x[u] && !q[u] && (q[u] = v.call(k));
            }q = bk(q);
          }w.apply(k, q), y && !h && q.length > 0 && s + b.length > 1 && bc.uniqueSort(k);
        }return y && (t = B, l = z), x;
      };return g.el = 0, d ? z(g) : g;
    }function bo(a, b, c, d) {
      var e = 0,
          f = b.length;for (; e < f; e++) {
        bc(a, b[e], c, d);
      }return c;
    }function bp(a, b, c, d, f) {
      var g,
          h,
          j,
          k,
          l,
          m = bh(a),
          n = m.length;if (!d && m.length === 1) {
        h = m[0] = m[0].slice(0);if (h.length > 2 && (j = h[0]).type === "ID" && b.nodeType === 9 && !f && e.relative[h[1].type]) {
          b = e.find.ID(j.matches[0].replace(V, ""), b, f)[0];if (!b) return c;a = a.slice(h.shift().length);
        }for (g = W.POS.test(a) ? -1 : h.length - 1; g >= 0; g--) {
          j = h[g];if (e.relative[k = j.type]) break;if (l = e.find[k]) if (d = l(j.matches[0].replace(V, ""), R.test(h[0].type) && b.parentNode || b, f)) {
            h.splice(g, 1), a = d.length && h.join("");if (!a) return w.apply(c, x.call(d, 0)), c;break;
          }
        }
      }return i(a, m)(d, b, f, c, R.test(a)), c;
    }function bq() {}var c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m = !0,
        n = "undefined",
        o = ("sizcache" + Math.random()).replace(".", ""),
        q = String,
        r = a.document,
        s = r.documentElement,
        t = 0,
        u = 0,
        v = [].pop,
        w = [].push,
        x = [].slice,
        y = [].indexOf || function (a) {
      var b = 0,
          c = this.length;for (; b < c; b++) {
        if (this[b] === a) return b;
      }return -1;
    },
        z = function z(a, b) {
      return a[o] = b == null || b, a;
    },
        A = function A() {
      var a = {},
          b = [];return z(function (c, d) {
        return b.push(c) > e.cacheLength && delete a[b.shift()], a[c] = d;
      }, a);
    },
        B = A(),
        C = A(),
        D = A(),
        E = "[\\x20\\t\\r\\n\\f]",
        F = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",
        G = F.replace("w", "w#"),
        H = "([*^$|!~]?=)",
        I = "\\[" + E + "*(" + F + ")" + E + "*(?:" + H + E + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + G + ")|)|)" + E + "*\\]",
        J = ":(" + F + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + I + ")|[^:]|\\\\.)*|.*))\\)|)",
        K = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + E + "*((?:-\\d)?\\d*)" + E + "*\\)|)(?=[^-]|$)",
        L = new RegExp("^" + E + "+|((?:^|[^\\\\])(?:\\\\.)*)" + E + "+$", "g"),
        M = new RegExp("^" + E + "*," + E + "*"),
        N = new RegExp("^" + E + "*([\\x20\\t\\r\\n\\f>+~])" + E + "*"),
        O = new RegExp(J),
        P = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,
        Q = /^:not/,
        R = /[\x20\t\r\n\f]*[+~]/,
        S = /:not\($/,
        T = /h\d/i,
        U = /input|select|textarea|button/i,
        V = /\\(?!\\)/g,
        W = { ID: new RegExp("^#(" + F + ")"), CLASS: new RegExp("^\\.(" + F + ")"), NAME: new RegExp("^\\[name=['\"]?(" + F + ")['\"]?\\]"), TAG: new RegExp("^(" + F.replace("w", "w*") + ")"), ATTR: new RegExp("^" + I), PSEUDO: new RegExp("^" + J), POS: new RegExp(K, "i"), CHILD: new RegExp("^:(only|nth|first|last)-child(?:\\(" + E + "*(even|odd|(([+-]|)(\\d*)n|)" + E + "*(?:([+-]|)" + E + "*(\\d+)|))" + E + "*\\)|)", "i"), needsContext: new RegExp("^" + E + "*[>+~]|" + K, "i") },
        X = function X(a) {
      var b = r.createElement("div");try {
        return a(b);
      } catch (c) {
        return !1;
      } finally {
        b = null;
      }
    },
        Y = X(function (a) {
      return a.appendChild(r.createComment("")), !a.getElementsByTagName("*").length;
    }),
        Z = X(function (a) {
      return a.innerHTML = "<a href='#'></a>", a.firstChild && _typeof(a.firstChild.getAttribute) !== n && a.firstChild.getAttribute("href") === "#";
    }),
        $ = X(function (a) {
      a.innerHTML = "<select></select>";var b = _typeof(a.lastChild.getAttribute("multiple"));return b !== "boolean" && b !== "string";
    }),
        _ = X(function (a) {
      return a.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>", !a.getElementsByClassName || !a.getElementsByClassName("e").length ? !1 : (a.lastChild.className = "e", a.getElementsByClassName("e").length === 2);
    }),
        ba = X(function (a) {
      a.id = o + 0, a.innerHTML = "<a name='" + o + "'></a><div name='" + o + "'></div>", s.insertBefore(a, s.firstChild);var b = r.getElementsByName && r.getElementsByName(o).length === 2 + r.getElementsByName(o + 0).length;return d = !r.getElementById(o), s.removeChild(a), b;
    });try {
      x.call(s.childNodes, 0)[0].nodeType;
    } catch (bb) {
      x = function x(a) {
        var b,
            c = [];for (; b = this[a]; a++) {
          c.push(b);
        }return c;
      };
    }bc.matches = function (a, b) {
      return bc(a, null, null, b);
    }, bc.matchesSelector = function (a, b) {
      return bc(b, null, null, [a]).length > 0;
    }, f = bc.getText = function (a) {
      var b,
          c = "",
          d = 0,
          e = a.nodeType;if (e) {
        if (e === 1 || e === 9 || e === 11) {
          if (typeof a.textContent == "string") return a.textContent;for (a = a.firstChild; a; a = a.nextSibling) {
            c += f(a);
          }
        } else if (e === 3 || e === 4) return a.nodeValue;
      } else for (; b = a[d]; d++) {
        c += f(b);
      }return c;
    }, g = bc.isXML = function (a) {
      var b = a && (a.ownerDocument || a).documentElement;return b ? b.nodeName !== "HTML" : !1;
    }, h = bc.contains = s.contains ? function (a, b) {
      var c = a.nodeType === 9 ? a.documentElement : a,
          d = b && b.parentNode;return a === d || !!(d && d.nodeType === 1 && c.contains && c.contains(d));
    } : s.compareDocumentPosition ? function (a, b) {
      return b && !!(a.compareDocumentPosition(b) & 16);
    } : function (a, b) {
      while (b = b.parentNode) {
        if (b === a) return !0;
      }return !1;
    }, bc.attr = function (a, b) {
      var c,
          d = g(a);return d || (b = b.toLowerCase()), (c = e.attrHandle[b]) ? c(a) : d || $ ? a.getAttribute(b) : (c = a.getAttributeNode(b), c ? typeof a[b] == "boolean" ? a[b] ? b : null : c.specified ? c.value : null : null);
    }, e = bc.selectors = { cacheLength: 50, createPseudo: z, match: W, attrHandle: Z ? {} : { href: function href(a) {
          return a.getAttribute("href", 2);
        }, type: function type(a) {
          return a.getAttribute("type");
        } }, find: { ID: d ? function (a, b, c) {
          if (_typeof(b.getElementById) !== n && !c) {
            var d = b.getElementById(a);return d && d.parentNode ? [d] : [];
          }
        } : function (a, c, d) {
          if (_typeof(c.getElementById) !== n && !d) {
            var e = c.getElementById(a);return e ? e.id === a || _typeof(e.getAttributeNode) !== n && e.getAttributeNode("id").value === a ? [e] : b : [];
          }
        }, TAG: Y ? function (a, b) {
          if (_typeof(b.getElementsByTagName) !== n) return b.getElementsByTagName(a);
        } : function (a, b) {
          var c = b.getElementsByTagName(a);if (a === "*") {
            var d,
                e = [],
                f = 0;for (; d = c[f]; f++) {
              d.nodeType === 1 && e.push(d);
            }return e;
          }return c;
        }, NAME: ba && function (a, b) {
          if (_typeof(b.getElementsByName) !== n) return b.getElementsByName(name);
        }, CLASS: _ && function (a, b, c) {
          if (_typeof(b.getElementsByClassName) !== n && !c) return b.getElementsByClassName(a);
        } }, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(a) {
          return a[1] = a[1].replace(V, ""), a[3] = (a[4] || a[5] || "").replace(V, ""), a[2] === "~=" && (a[3] = " " + a[3] + " "), a.slice(0, 4);
        }, CHILD: function CHILD(a) {
          return a[1] = a[1].toLowerCase(), a[1] === "nth" ? (a[2] || bc.error(a[0]), a[3] = +(a[3] ? a[4] + (a[5] || 1) : 2 * (a[2] === "even" || a[2] === "odd")), a[4] = +(a[6] + a[7] || a[2] === "odd")) : a[2] && bc.error(a[0]), a;
        }, PSEUDO: function PSEUDO(a) {
          var b, c;if (W.CHILD.test(a[0])) return null;if (a[3]) a[2] = a[3];else if (b = a[4]) O.test(b) && (c = bh(b, !0)) && (c = b.indexOf(")", b.length - c) - b.length) && (b = b.slice(0, c), a[0] = a[0].slice(0, c)), a[2] = b;return a.slice(0, 3);
        } }, filter: { ID: d ? function (a) {
          return a = a.replace(V, ""), function (b) {
            return b.getAttribute("id") === a;
          };
        } : function (a) {
          return a = a.replace(V, ""), function (b) {
            var c = _typeof(b.getAttributeNode) !== n && b.getAttributeNode("id");return c && c.value === a;
          };
        }, TAG: function TAG(a) {
          return a === "*" ? function () {
            return !0;
          } : (a = a.replace(V, "").toLowerCase(), function (b) {
            return b.nodeName && b.nodeName.toLowerCase() === a;
          });
        }, CLASS: function CLASS(a) {
          var b = B[o][a];return b || (b = B(a, new RegExp("(^|" + E + ")" + a + "(" + E + "|$)"))), function (a) {
            return b.test(a.className || _typeof(a.getAttribute) !== n && a.getAttribute("class") || "");
          };
        }, ATTR: function ATTR(a, b, c) {
          return function (d, e) {
            var f = bc.attr(d, a);return f == null ? b === "!=" : b ? (f += "", b === "=" ? f === c : b === "!=" ? f !== c : b === "^=" ? c && f.indexOf(c) === 0 : b === "*=" ? c && f.indexOf(c) > -1 : b === "$=" ? c && f.substr(f.length - c.length) === c : b === "~=" ? (" " + f + " ").indexOf(c) > -1 : b === "|=" ? f === c || f.substr(0, c.length + 1) === c + "-" : !1) : !0;
          };
        }, CHILD: function CHILD(a, b, c, d) {
          return a === "nth" ? function (a) {
            var b,
                e,
                f = a.parentNode;if (c === 1 && d === 0) return !0;if (f) {
              e = 0;for (b = f.firstChild; b; b = b.nextSibling) {
                if (b.nodeType === 1) {
                  e++;if (a === b) break;
                }
              }
            }return e -= d, e === c || e % c === 0 && e / c >= 0;
          } : function (b) {
            var c = b;switch (a) {case "only":case "first":
                while (c = c.previousSibling) {
                  if (c.nodeType === 1) return !1;
                }if (a === "first") return !0;c = b;case "last":
                while (c = c.nextSibling) {
                  if (c.nodeType === 1) return !1;
                }return !0;}
          };
        }, PSEUDO: function PSEUDO(a, b) {
          var c,
              d = e.pseudos[a] || e.setFilters[a.toLowerCase()] || bc.error("unsupported pseudo: " + a);return d[o] ? d(b) : d.length > 1 ? (c = [a, a, "", b], e.setFilters.hasOwnProperty(a.toLowerCase()) ? z(function (a, c) {
            var e,
                f = d(a, b),
                g = f.length;while (g--) {
              e = y.call(a, f[g]), a[e] = !(c[e] = f[g]);
            }
          }) : function (a) {
            return d(a, 0, c);
          }) : d;
        } }, pseudos: { not: z(function (a) {
          var b = [],
              c = [],
              d = i(a.replace(L, "$1"));return d[o] ? z(function (a, b, c, e) {
            var f,
                g = d(a, null, e, []),
                h = a.length;while (h--) {
              if (f = g[h]) a[h] = !(b[h] = f);
            }
          }) : function (a, e, f) {
            return b[0] = a, d(b, null, f, c), !c.pop();
          };
        }), has: z(function (a) {
          return function (b) {
            return bc(a, b).length > 0;
          };
        }), contains: z(function (a) {
          return function (b) {
            return (b.textContent || b.innerText || f(b)).indexOf(a) > -1;
          };
        }), enabled: function enabled(a) {
          return a.disabled === !1;
        }, disabled: function disabled(a) {
          return a.disabled === !0;
        }, checked: function checked(a) {
          var b = a.nodeName.toLowerCase();return b === "input" && !!a.checked || b === "option" && !!a.selected;
        }, selected: function selected(a) {
          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
        }, parent: function parent(a) {
          return !e.pseudos.empty(a);
        }, empty: function empty(a) {
          var b;a = a.firstChild;while (a) {
            if (a.nodeName > "@" || (b = a.nodeType) === 3 || b === 4) return !1;a = a.nextSibling;
          }return !0;
        }, header: function header(a) {
          return T.test(a.nodeName);
        }, text: function text(a) {
          var b, c;return a.nodeName.toLowerCase() === "input" && (b = a.type) === "text" && ((c = a.getAttribute("type")) == null || c.toLowerCase() === b);
        }, radio: bd("radio"), checkbox: bd("checkbox"), file: bd("file"), password: bd("password"), image: bd("image"), submit: be("submit"), reset: be("reset"), button: function button(a) {
          var b = a.nodeName.toLowerCase();return b === "input" && a.type === "button" || b === "button";
        }, input: function input(a) {
          return U.test(a.nodeName);
        }, focus: function focus(a) {
          var b = a.ownerDocument;return a === b.activeElement && (!b.hasFocus || b.hasFocus()) && (!!a.type || !!a.href);
        }, active: function active(a) {
          return a === a.ownerDocument.activeElement;
        }, first: bf(function (a, b, c) {
          return [0];
        }), last: bf(function (a, b, c) {
          return [b - 1];
        }), eq: bf(function (a, b, c) {
          return [c < 0 ? c + b : c];
        }), even: bf(function (a, b, c) {
          for (var d = 0; d < b; d += 2) {
            a.push(d);
          }return a;
        }), odd: bf(function (a, b, c) {
          for (var d = 1; d < b; d += 2) {
            a.push(d);
          }return a;
        }), lt: bf(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; --d >= 0;) {
            a.push(d);
          }return a;
        }), gt: bf(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; ++d < b;) {
            a.push(d);
          }return a;
        }) } }, j = s.compareDocumentPosition ? function (a, b) {
      return a === b ? (k = !0, 0) : (!a.compareDocumentPosition || !b.compareDocumentPosition ? a.compareDocumentPosition : a.compareDocumentPosition(b) & 4) ? -1 : 1;
    } : function (a, b) {
      if (a === b) return k = !0, 0;if (a.sourceIndex && b.sourceIndex) return a.sourceIndex - b.sourceIndex;var c,
          d,
          e = [],
          f = [],
          g = a.parentNode,
          h = b.parentNode,
          i = g;if (g === h) return bg(a, b);if (!g) return -1;if (!h) return 1;while (i) {
        e.unshift(i), i = i.parentNode;
      }i = h;while (i) {
        f.unshift(i), i = i.parentNode;
      }c = e.length, d = f.length;for (var j = 0; j < c && j < d; j++) {
        if (e[j] !== f[j]) return bg(e[j], f[j]);
      }return j === c ? bg(a, f[j], -1) : bg(e[j], b, 1);
    }, [0, 0].sort(j), m = !k, bc.uniqueSort = function (a) {
      var b,
          c = 1;k = m, a.sort(j);if (k) for (; b = a[c]; c++) {
        b === a[c - 1] && a.splice(c--, 1);
      }return a;
    }, bc.error = function (a) {
      throw new Error("Syntax error, unrecognized expression: " + a);
    }, i = bc.compile = function (a, b) {
      var c,
          d = [],
          e = [],
          f = D[o][a];if (!f) {
        b || (b = bh(a)), c = b.length;while (c--) {
          f = bm(b[c]), f[o] ? d.push(f) : e.push(f);
        }f = D(a, bn(e, d));
      }return f;
    }, r.querySelectorAll && function () {
      var a,
          b = bp,
          c = /'|\\/g,
          d = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,
          e = [":focus"],
          f = [":active", ":focus"],
          h = s.matchesSelector || s.mozMatchesSelector || s.webkitMatchesSelector || s.oMatchesSelector || s.msMatchesSelector;X(function (a) {
        a.innerHTML = "<select><option selected=''></option></select>", a.querySelectorAll("[selected]").length || e.push("\\[" + E + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)"), a.querySelectorAll(":checked").length || e.push(":checked");
      }), X(function (a) {
        a.innerHTML = "<p test=''></p>", a.querySelectorAll("[test^='']").length && e.push("[*^$]=" + E + "*(?:\"\"|'')"), a.innerHTML = "<input type='hidden'/>", a.querySelectorAll(":enabled").length || e.push(":enabled", ":disabled");
      }), e = new RegExp(e.join("|")), bp = function bp(a, d, f, g, h) {
        if (!g && !h && (!e || !e.test(a))) {
          var i,
              j,
              k = !0,
              l = o,
              m = d,
              n = d.nodeType === 9 && a;if (d.nodeType === 1 && d.nodeName.toLowerCase() !== "object") {
            i = bh(a), (k = d.getAttribute("id")) ? l = k.replace(c, "\\$&") : d.setAttribute("id", l), l = "[id='" + l + "'] ", j = i.length;while (j--) {
              i[j] = l + i[j].join("");
            }m = R.test(a) && d.parentNode || d, n = i.join(",");
          }if (n) try {
            return w.apply(f, x.call(m.querySelectorAll(n), 0)), f;
          } catch (p) {} finally {
            k || d.removeAttribute("id");
          }
        }return b(a, d, f, g, h);
      }, h && (X(function (b) {
        a = h.call(b, "div");try {
          h.call(b, "[test!='']:sizzle"), f.push("!=", J);
        } catch (c) {}
      }), f = new RegExp(f.join("|")), bc.matchesSelector = function (b, c) {
        c = c.replace(d, "='$1']");if (!g(b) && !f.test(c) && (!e || !e.test(c))) try {
          var i = h.call(b, c);if (i || a || b.document && b.document.nodeType !== 11) return i;
        } catch (j) {}return bc(c, null, null, [b]).length > 0;
      });
    }(), e.pseudos.nth = e.pseudos.eq, e.filters = bq.prototype = e.pseudos, e.setFilters = new bq(), bc.attr = p.attr, p.find = bc, p.expr = bc.selectors, p.expr[":"] = p.expr.pseudos, p.unique = bc.uniqueSort, p.text = bc.getText, p.isXMLDoc = bc.isXML, p.contains = bc.contains;
  }(a);var bc = /Until$/,
      bd = /^(?:parents|prev(?:Until|All))/,
      be = /^.[^:#\[\.,]*$/,
      bf = p.expr.match.needsContext,
      bg = { children: !0, contents: !0, next: !0, prev: !0 };p.fn.extend({ find: function find(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h = this;if (typeof a != "string") return p(a).filter(function () {
        for (b = 0, c = h.length; b < c; b++) {
          if (p.contains(h[b], this)) return !0;
        }
      });g = this.pushStack("", "find", a);for (b = 0, c = this.length; b < c; b++) {
        d = g.length, p.find(a, this[b], g);if (b > 0) for (e = d; e < g.length; e++) {
          for (f = 0; f < d; f++) {
            if (g[f] === g[e]) {
              g.splice(e--, 1);break;
            }
          }
        }
      }return g;
    }, has: function has(a) {
      var b,
          c = p(a, this),
          d = c.length;return this.filter(function () {
        for (b = 0; b < d; b++) {
          if (p.contains(this, c[b])) return !0;
        }
      });
    }, not: function not(a) {
      return this.pushStack(bj(this, a, !1), "not", a);
    }, filter: function filter(a) {
      return this.pushStack(bj(this, a, !0), "filter", a);
    }, is: function is(a) {
      return !!a && (typeof a == "string" ? bf.test(a) ? p(a, this.context).index(this[0]) >= 0 : p.filter(a, this).length > 0 : this.filter(a).length > 0);
    }, closest: function closest(a, b) {
      var c,
          d = 0,
          e = this.length,
          f = [],
          g = bf.test(a) || typeof a != "string" ? p(a, b || this.context) : 0;for (; d < e; d++) {
        c = this[d];while (c && c.ownerDocument && c !== b && c.nodeType !== 11) {
          if (g ? g.index(c) > -1 : p.find.matchesSelector(c, a)) {
            f.push(c);break;
          }c = c.parentNode;
        }
      }return f = f.length > 1 ? p.unique(f) : f, this.pushStack(f, "closest", a);
    }, index: function index(a) {
      return a ? typeof a == "string" ? p.inArray(this[0], p(a)) : p.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.prevAll().length : -1;
    }, add: function add(a, b) {
      var c = typeof a == "string" ? p(a, b) : p.makeArray(a && a.nodeType ? [a] : a),
          d = p.merge(this.get(), c);return this.pushStack(bh(c[0]) || bh(d[0]) ? d : p.unique(d));
    }, addBack: function addBack(a) {
      return this.add(a == null ? this.prevObject : this.prevObject.filter(a));
    } }), p.fn.andSelf = p.fn.addBack, p.each({ parent: function parent(a) {
      var b = a.parentNode;return b && b.nodeType !== 11 ? b : null;
    }, parents: function parents(a) {
      return p.dir(a, "parentNode");
    }, parentsUntil: function parentsUntil(a, b, c) {
      return p.dir(a, "parentNode", c);
    }, next: function next(a) {
      return bi(a, "nextSibling");
    }, prev: function prev(a) {
      return bi(a, "previousSibling");
    }, nextAll: function nextAll(a) {
      return p.dir(a, "nextSibling");
    }, prevAll: function prevAll(a) {
      return p.dir(a, "previousSibling");
    }, nextUntil: function nextUntil(a, b, c) {
      return p.dir(a, "nextSibling", c);
    }, prevUntil: function prevUntil(a, b, c) {
      return p.dir(a, "previousSibling", c);
    }, siblings: function siblings(a) {
      return p.sibling((a.parentNode || {}).firstChild, a);
    }, children: function children(a) {
      return p.sibling(a.firstChild);
    }, contents: function contents(a) {
      return p.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : p.merge([], a.childNodes);
    } }, function (a, b) {
    p.fn[a] = function (c, d) {
      var e = p.map(this, b, c);return bc.test(a) || (d = c), d && typeof d == "string" && (e = p.filter(d, e)), e = this.length > 1 && !bg[a] ? p.unique(e) : e, this.length > 1 && bd.test(a) && (e = e.reverse()), this.pushStack(e, a, k.call(arguments).join(","));
    };
  }), p.extend({ filter: function filter(a, b, c) {
      return c && (a = ":not(" + a + ")"), b.length === 1 ? p.find.matchesSelector(b[0], a) ? [b[0]] : [] : p.find.matches(a, b);
    }, dir: function dir(a, c, d) {
      var e = [],
          f = a[c];while (f && f.nodeType !== 9 && (d === b || f.nodeType !== 1 || !p(f).is(d))) {
        f.nodeType === 1 && e.push(f), f = f[c];
      }return e;
    }, sibling: function sibling(a, b) {
      var c = [];for (; a; a = a.nextSibling) {
        a.nodeType === 1 && a !== b && c.push(a);
      }return c;
    } });var bl = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
      bm = / jQuery\d+="(?:null|\d+)"/g,
      bn = /^\s+/,
      bo = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
      bp = /<([\w:]+)/,
      bq = /<tbody/i,
      br = /<|&#?\w+;/,
      bs = /<(?:script|style|link)/i,
      bt = /<(?:script|object|embed|option|style)/i,
      bu = new RegExp("<(?:" + bl + ")[\\s/>]", "i"),
      bv = /^(?:checkbox|radio)$/,
      bw = /checked\s*(?:[^=]|=\s*.checked.)/i,
      bx = /\/(java|ecma)script/i,
      by = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
      bz = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], area: [1, "<map>", "</map>"], _default: [0, "", ""] },
      bA = bk(e),
      bB = bA.appendChild(e.createElement("div"));bz.optgroup = bz.option, bz.tbody = bz.tfoot = bz.colgroup = bz.caption = bz.thead, bz.th = bz.td, p.support.htmlSerialize || (bz._default = [1, "X<div>", "</div>"]), p.fn.extend({ text: function text(a) {
      return p.access(this, function (a) {
        return a === b ? p.text(this) : this.empty().append((this[0] && this[0].ownerDocument || e).createTextNode(a));
      }, null, a, arguments.length);
    }, wrapAll: function wrapAll(a) {
      if (p.isFunction(a)) return this.each(function (b) {
        p(this).wrapAll(a.call(this, b));
      });if (this[0]) {
        var b = p(a, this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
          var a = this;while (a.firstChild && a.firstChild.nodeType === 1) {
            a = a.firstChild;
          }return a;
        }).append(this);
      }return this;
    }, wrapInner: function wrapInner(a) {
      return p.isFunction(a) ? this.each(function (b) {
        p(this).wrapInner(a.call(this, b));
      }) : this.each(function () {
        var b = p(this),
            c = b.contents();c.length ? c.wrapAll(a) : b.append(a);
      });
    }, wrap: function wrap(a) {
      var b = p.isFunction(a);return this.each(function (c) {
        p(this).wrapAll(b ? a.call(this, c) : a);
      });
    }, unwrap: function unwrap() {
      return this.parent().each(function () {
        p.nodeName(this, "body") || p(this).replaceWith(this.childNodes);
      }).end();
    }, append: function append() {
      return this.domManip(arguments, !0, function (a) {
        (this.nodeType === 1 || this.nodeType === 11) && this.appendChild(a);
      });
    }, prepend: function prepend() {
      return this.domManip(arguments, !0, function (a) {
        (this.nodeType === 1 || this.nodeType === 11) && this.insertBefore(a, this.firstChild);
      });
    }, before: function before() {
      if (!bh(this[0])) return this.domManip(arguments, !1, function (a) {
        this.parentNode.insertBefore(a, this);
      });if (arguments.length) {
        var a = p.clean(arguments);return this.pushStack(p.merge(a, this), "before", this.selector);
      }
    }, after: function after() {
      if (!bh(this[0])) return this.domManip(arguments, !1, function (a) {
        this.parentNode.insertBefore(a, this.nextSibling);
      });if (arguments.length) {
        var a = p.clean(arguments);return this.pushStack(p.merge(this, a), "after", this.selector);
      }
    }, remove: function remove(a, b) {
      var c,
          d = 0;for (; (c = this[d]) != null; d++) {
        if (!a || p.filter(a, [c]).length) !b && c.nodeType === 1 && (p.cleanData(c.getElementsByTagName("*")), p.cleanData([c])), c.parentNode && c.parentNode.removeChild(c);
      }return this;
    }, empty: function empty() {
      var a,
          b = 0;for (; (a = this[b]) != null; b++) {
        a.nodeType === 1 && p.cleanData(a.getElementsByTagName("*"));while (a.firstChild) {
          a.removeChild(a.firstChild);
        }
      }return this;
    }, clone: function clone(a, b) {
      return a = a == null ? !1 : a, b = b == null ? a : b, this.map(function () {
        return p.clone(this, a, b);
      });
    }, html: function html(a) {
      return p.access(this, function (a) {
        var c = this[0] || {},
            d = 0,
            e = this.length;if (a === b) return c.nodeType === 1 ? c.innerHTML.replace(bm, "") : b;if (typeof a == "string" && !bs.test(a) && (p.support.htmlSerialize || !bu.test(a)) && (p.support.leadingWhitespace || !bn.test(a)) && !bz[(bp.exec(a) || ["", ""])[1].toLowerCase()]) {
          a = a.replace(bo, "<$1></$2>");try {
            for (; d < e; d++) {
              c = this[d] || {}, c.nodeType === 1 && (p.cleanData(c.getElementsByTagName("*")), c.innerHTML = a);
            }c = 0;
          } catch (f) {}
        }c && this.empty().append(a);
      }, null, a, arguments.length);
    }, replaceWith: function replaceWith(a) {
      return bh(this[0]) ? this.length ? this.pushStack(p(p.isFunction(a) ? a() : a), "replaceWith", a) : this : p.isFunction(a) ? this.each(function (b) {
        var c = p(this),
            d = c.html();c.replaceWith(a.call(this, b, d));
      }) : (typeof a != "string" && (a = p(a).detach()), this.each(function () {
        var b = this.nextSibling,
            c = this.parentNode;p(this).remove(), b ? p(b).before(a) : p(c).append(a);
      }));
    }, detach: function detach(a) {
      return this.remove(a, !0);
    }, domManip: function domManip(a, c, d) {
      a = [].concat.apply([], a);var e,
          f,
          g,
          h,
          i = 0,
          j = a[0],
          k = [],
          l = this.length;if (!p.support.checkClone && l > 1 && typeof j == "string" && bw.test(j)) return this.each(function () {
        p(this).domManip(a, c, d);
      });if (p.isFunction(j)) return this.each(function (e) {
        var f = p(this);a[0] = j.call(this, e, c ? f.html() : b), f.domManip(a, c, d);
      });if (this[0]) {
        e = p.buildFragment(a, this, k), g = e.fragment, f = g.firstChild, g.childNodes.length === 1 && (g = f);if (f) {
          c = c && p.nodeName(f, "tr");for (h = e.cacheable || l - 1; i < l; i++) {
            d.call(c && p.nodeName(this[i], "table") ? bC(this[i], "tbody") : this[i], i === h ? g : p.clone(g, !0, !0));
          }
        }g = f = null, k.length && p.each(k, function (a, b) {
          b.src ? p.ajax ? p.ajax({ url: b.src, type: "GET", dataType: "script", async: !1, global: !1, "throws": !0 }) : p.error("no ajax") : p.globalEval((b.text || b.textContent || b.innerHTML || "").replace(by, "")), b.parentNode && b.parentNode.removeChild(b);
        });
      }return this;
    } }), p.buildFragment = function (a, c, d) {
    var f,
        g,
        h,
        i = a[0];return c = c || e, c = !c.nodeType && c[0] || c, c = c.ownerDocument || c, a.length === 1 && typeof i == "string" && i.length < 512 && c === e && i.charAt(0) === "<" && !bt.test(i) && (p.support.checkClone || !bw.test(i)) && (p.support.html5Clone || !bu.test(i)) && (g = !0, f = p.fragments[i], h = f !== b), f || (f = c.createDocumentFragment(), p.clean(a, c, f, d), g && (p.fragments[i] = h && f)), { fragment: f, cacheable: g };
  }, p.fragments = {}, p.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {
    p.fn[a] = function (c) {
      var d,
          e = 0,
          f = [],
          g = p(c),
          h = g.length,
          i = this.length === 1 && this[0].parentNode;if ((i == null || i && i.nodeType === 11 && i.childNodes.length === 1) && h === 1) return g[b](this[0]), this;for (; e < h; e++) {
        d = (e > 0 ? this.clone(!0) : this).get(), p(g[e])[b](d), f = f.concat(d);
      }return this.pushStack(f, a, g.selector);
    };
  }), p.extend({ clone: function clone(a, b, c) {
      var d, e, f, g;p.support.html5Clone || p.isXMLDoc(a) || !bu.test("<" + a.nodeName + ">") ? g = a.cloneNode(!0) : (bB.innerHTML = a.outerHTML, bB.removeChild(g = bB.firstChild));if ((!p.support.noCloneEvent || !p.support.noCloneChecked) && (a.nodeType === 1 || a.nodeType === 11) && !p.isXMLDoc(a)) {
        bE(a, g), d = bF(a), e = bF(g);for (f = 0; d[f]; ++f) {
          e[f] && bE(d[f], e[f]);
        }
      }if (b) {
        bD(a, g);if (c) {
          d = bF(a), e = bF(g);for (f = 0; d[f]; ++f) {
            bD(d[f], e[f]);
          }
        }
      }return d = e = null, g;
    }, clean: function clean(a, b, c, d) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          q,
          r,
          s = b === e && bA,
          t = [];if (!b || typeof b.createDocumentFragment == "undefined") b = e;for (f = 0; (h = a[f]) != null; f++) {
        typeof h == "number" && (h += "");if (!h) continue;if (typeof h == "string") if (!br.test(h)) h = b.createTextNode(h);else {
          s = s || bk(b), l = b.createElement("div"), s.appendChild(l), h = h.replace(bo, "<$1></$2>"), i = (bp.exec(h) || ["", ""])[1].toLowerCase(), j = bz[i] || bz._default, k = j[0], l.innerHTML = j[1] + h + j[2];while (k--) {
            l = l.lastChild;
          }if (!p.support.tbody) {
            m = bq.test(h), n = i === "table" && !m ? l.firstChild && l.firstChild.childNodes : j[1] === "<table>" && !m ? l.childNodes : [];for (g = n.length - 1; g >= 0; --g) {
              p.nodeName(n[g], "tbody") && !n[g].childNodes.length && n[g].parentNode.removeChild(n[g]);
            }
          }!p.support.leadingWhitespace && bn.test(h) && l.insertBefore(b.createTextNode(bn.exec(h)[0]), l.firstChild), h = l.childNodes, l.parentNode.removeChild(l);
        }h.nodeType ? t.push(h) : p.merge(t, h);
      }l && (h = l = s = null);if (!p.support.appendChecked) for (f = 0; (h = t[f]) != null; f++) {
        p.nodeName(h, "input") ? bG(h) : typeof h.getElementsByTagName != "undefined" && p.grep(h.getElementsByTagName("input"), bG);
      }if (c) {
        q = function q(a) {
          if (!a.type || bx.test(a.type)) return d ? d.push(a.parentNode ? a.parentNode.removeChild(a) : a) : c.appendChild(a);
        };for (f = 0; (h = t[f]) != null; f++) {
          if (!p.nodeName(h, "script") || !q(h)) c.appendChild(h), typeof h.getElementsByTagName != "undefined" && (r = p.grep(p.merge([], h.getElementsByTagName("script")), q), t.splice.apply(t, [f + 1, 0].concat(r)), f += r.length);
        }
      }return t;
    }, cleanData: function cleanData(a, b) {
      var c,
          d,
          e,
          f,
          g = 0,
          h = p.expando,
          i = p.cache,
          j = p.support.deleteExpando,
          k = p.event.special;for (; (e = a[g]) != null; g++) {
        if (b || p.acceptData(e)) {
          d = e[h], c = d && i[d];if (c) {
            if (c.events) for (f in c.events) {
              k[f] ? p.event.remove(e, f) : p.removeEvent(e, f, c.handle);
            }i[d] && (delete i[d], j ? delete e[h] : e.removeAttribute ? e.removeAttribute(h) : e[h] = null, p.deletedIds.push(d));
          }
        }
      }
    } }), function () {
    var a, b;p.uaMatch = function (a) {
      a = a.toLowerCase();var b = /(chrome)[ \/]([\w.]+)/.exec(a) || /(webkit)[ \/]([\w.]+)/.exec(a) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a) || /(msie) ([\w.]+)/.exec(a) || a.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a) || [];return { browser: b[1] || "", version: b[2] || "0" };
    }, a = p.uaMatch(g.userAgent), b = {}, a.browser && (b[a.browser] = !0, b.version = a.version), b.chrome ? b.webkit = !0 : b.webkit && (b.safari = !0), p.browser = b, p.sub = function () {
      function a(b, c) {
        return new a.fn.init(b, c);
      }p.extend(!0, a, this), a.superclass = this, a.fn = a.prototype = this(), a.fn.constructor = a, a.sub = this.sub, a.fn.init = function c(c, d) {
        return d && d instanceof p && !(d instanceof a) && (d = a(d)), p.fn.init.call(this, c, d, b);
      }, a.fn.init.prototype = a.fn;var b = a(e);return a;
    };
  }();var bH,
      bI,
      bJ,
      bK = /alpha\([^)]*\)/i,
      bL = /opacity=([^)]*)/,
      bM = /^(top|right|bottom|left)$/,
      bN = /^(none|table(?!-c[ea]).+)/,
      bO = /^margin/,
      bP = new RegExp("^(" + q + ")(.*)$", "i"),
      bQ = new RegExp("^(" + q + ")(?!px)[a-z%]+$", "i"),
      bR = new RegExp("^([-+])=(" + q + ")", "i"),
      bS = {},
      bT = { position: "absolute", visibility: "hidden", display: "block" },
      bU = { letterSpacing: 0, fontWeight: 400 },
      bV = ["Top", "Right", "Bottom", "Left"],
      bW = ["Webkit", "O", "Moz", "ms"],
      bX = p.fn.toggle;p.fn.extend({ css: function css(a, c) {
      return p.access(this, function (a, c, d) {
        return d !== b ? p.style(a, c, d) : p.css(a, c);
      }, a, c, arguments.length > 1);
    }, show: function show() {
      return b$(this, !0);
    }, hide: function hide() {
      return b$(this);
    }, toggle: function toggle(a, b) {
      var c = typeof a == "boolean";return p.isFunction(a) && p.isFunction(b) ? bX.apply(this, arguments) : this.each(function () {
        (c ? a : bZ(this)) ? p(this).show() : p(this).hide();
      });
    } }), p.extend({ cssHooks: { opacity: { get: function get(a, b) {
          if (b) {
            var c = bH(a, "opacity");return c === "" ? "1" : c;
          }
        } } }, cssNumber: { fillOpacity: !0, fontWeight: !0, lineHeight: !0, opacity: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": p.support.cssFloat ? "cssFloat" : "styleFloat" }, style: function style(a, c, d, e) {
      if (!a || a.nodeType === 3 || a.nodeType === 8 || !a.style) return;var f,
          g,
          h,
          i = p.camelCase(c),
          j = a.style;c = p.cssProps[i] || (p.cssProps[i] = bY(j, i)), h = p.cssHooks[c] || p.cssHooks[i];if (d === b) return h && "get" in h && (f = h.get(a, !1, e)) !== b ? f : j[c];g = typeof d === "undefined" ? "undefined" : _typeof(d), g === "string" && (f = bR.exec(d)) && (d = (f[1] + 1) * f[2] + parseFloat(p.css(a, c)), g = "number");if (d == null || g === "number" && isNaN(d)) return;g === "number" && !p.cssNumber[i] && (d += "px");if (!h || !("set" in h) || (d = h.set(a, d, e)) !== b) try {
        j[c] = d;
      } catch (k) {}
    }, css: function css(a, c, d, e) {
      var f,
          g,
          h,
          i = p.camelCase(c);return c = p.cssProps[i] || (p.cssProps[i] = bY(a.style, i)), h = p.cssHooks[c] || p.cssHooks[i], h && "get" in h && (f = h.get(a, !0, e)), f === b && (f = bH(a, c)), f === "normal" && c in bU && (f = bU[c]), d || e !== b ? (g = parseFloat(f), d || p.isNumeric(g) ? g || 0 : f) : f;
    }, swap: function swap(a, b, c) {
      var d,
          e,
          f = {};for (e in b) {
        f[e] = a.style[e], a.style[e] = b[e];
      }d = c.call(a);for (e in b) {
        a.style[e] = f[e];
      }return d;
    } }), a.getComputedStyle ? bH = function bH(b, c) {
    var d,
        e,
        f,
        g,
        h = a.getComputedStyle(b, null),
        i = b.style;return h && (d = h[c], d === "" && !p.contains(b.ownerDocument, b) && (d = p.style(b, c)), bQ.test(d) && bO.test(c) && (e = i.width, f = i.minWidth, g = i.maxWidth, i.minWidth = i.maxWidth = i.width = d, d = h.width, i.width = e, i.minWidth = f, i.maxWidth = g)), d;
  } : e.documentElement.currentStyle && (bH = function bH(a, b) {
    var c,
        d,
        e = a.currentStyle && a.currentStyle[b],
        f = a.style;return e == null && f && f[b] && (e = f[b]), bQ.test(e) && !bM.test(b) && (c = f.left, d = a.runtimeStyle && a.runtimeStyle.left, d && (a.runtimeStyle.left = a.currentStyle.left), f.left = b === "fontSize" ? "1em" : e, e = f.pixelLeft + "px", f.left = c, d && (a.runtimeStyle.left = d)), e === "" ? "auto" : e;
  }), p.each(["height", "width"], function (a, b) {
    p.cssHooks[b] = { get: function get(a, c, d) {
        if (c) return a.offsetWidth === 0 && bN.test(bH(a, "display")) ? p.swap(a, bT, function () {
          return cb(a, b, d);
        }) : cb(a, b, d);
      }, set: function set(a, c, d) {
        return b_(a, c, d ? ca(a, b, d, p.support.boxSizing && p.css(a, "boxSizing") === "border-box") : 0);
      } };
  }), p.support.opacity || (p.cssHooks.opacity = { get: function get(a, b) {
      return bL.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : "";
    }, set: function set(a, b) {
      var c = a.style,
          d = a.currentStyle,
          e = p.isNumeric(b) ? "alpha(opacity=" + b * 100 + ")" : "",
          f = d && d.filter || c.filter || "";c.zoom = 1;if (b >= 1 && p.trim(f.replace(bK, "")) === "" && c.removeAttribute) {
        c.removeAttribute("filter");if (d && !d.filter) return;
      }c.filter = bK.test(f) ? f.replace(bK, e) : f + " " + e;
    } }), p(function () {
    p.support.reliableMarginRight || (p.cssHooks.marginRight = { get: function get(a, b) {
        return p.swap(a, { display: "inline-block" }, function () {
          if (b) return bH(a, "marginRight");
        });
      } }), !p.support.pixelPosition && p.fn.position && p.each(["top", "left"], function (a, b) {
      p.cssHooks[b] = { get: function get(a, c) {
          if (c) {
            var d = bH(a, b);return bQ.test(d) ? p(a).position()[b] + "px" : d;
          }
        } };
    });
  }), p.expr && p.expr.filters && (p.expr.filters.hidden = function (a) {
    return a.offsetWidth === 0 && a.offsetHeight === 0 || !p.support.reliableHiddenOffsets && (a.style && a.style.display || bH(a, "display")) === "none";
  }, p.expr.filters.visible = function (a) {
    return !p.expr.filters.hidden(a);
  }), p.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
    p.cssHooks[a + b] = { expand: function expand(c) {
        var d,
            e = typeof c == "string" ? c.split(" ") : [c],
            f = {};for (d = 0; d < 4; d++) {
          f[a + bV[d] + b] = e[d] || e[d - 2] || e[0];
        }return f;
      } }, bO.test(a) || (p.cssHooks[a + b].set = b_);
  });var cd = /%20/g,
      ce = /\[\]$/,
      cf = /\r?\n/g,
      cg = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
      ch = /^(?:select|textarea)/i;p.fn.extend({ serialize: function serialize() {
      return p.param(this.serializeArray());
    }, serializeArray: function serializeArray() {
      return this.map(function () {
        return this.elements ? p.makeArray(this.elements) : this;
      }).filter(function () {
        return this.name && !this.disabled && (this.checked || ch.test(this.nodeName) || cg.test(this.type));
      }).map(function (a, b) {
        var c = p(this).val();return c == null ? null : p.isArray(c) ? p.map(c, function (a, c) {
          return { name: b.name, value: a.replace(cf, "\r\n") };
        }) : { name: b.name, value: c.replace(cf, "\r\n") };
      }).get();
    } }), p.param = function (a, c) {
    var d,
        e = [],
        f = function f(a, b) {
      b = p.isFunction(b) ? b() : b == null ? "" : b, e[e.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);
    };c === b && (c = p.ajaxSettings && p.ajaxSettings.traditional);if (p.isArray(a) || a.jquery && !p.isPlainObject(a)) p.each(a, function () {
      f(this.name, this.value);
    });else for (d in a) {
      ci(d, a[d], c, f);
    }return e.join("&").replace(cd, "+");
  };var cj,
      ck,
      cl = /#.*$/,
      cm = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
      cn = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
      co = /^(?:GET|HEAD)$/,
      cp = /^\/\//,
      cq = /\?/,
      cr = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
      cs = /([?&])_=[^&]*/,
      ct = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
      cu = p.fn.load,
      cv = {},
      cw = {},
      cx = ["*/"] + ["*"];try {
    ck = f.href;
  } catch (cy) {
    ck = e.createElement("a"), ck.href = "", ck = ck.href;
  }cj = ct.exec(ck.toLowerCase()) || [], p.fn.load = function (a, c, d) {
    if (typeof a != "string" && cu) return cu.apply(this, arguments);if (!this.length) return this;var e,
        f,
        g,
        h = this,
        i = a.indexOf(" ");return i >= 0 && (e = a.slice(i, a.length), a = a.slice(0, i)), p.isFunction(c) ? (d = c, c = b) : c && (typeof c === "undefined" ? "undefined" : _typeof(c)) == "object" && (f = "POST"), p.ajax({ url: a, type: f, dataType: "html", data: c, complete: function complete(a, b) {
        d && h.each(d, g || [a.responseText, b, a]);
      } }).done(function (a) {
      g = arguments, h.html(e ? p("<div>").append(a.replace(cr, "")).find(e) : a);
    }), this;
  }, p.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (a, b) {
    p.fn[b] = function (a) {
      return this.on(b, a);
    };
  }), p.each(["get", "post"], function (a, c) {
    p[c] = function (a, d, e, f) {
      return p.isFunction(d) && (f = f || e, e = d, d = b), p.ajax({ type: c, url: a, data: d, success: e, dataType: f });
    };
  }), p.extend({ getScript: function getScript(a, c) {
      return p.get(a, b, c, "script");
    }, getJSON: function getJSON(a, b, c) {
      return p.get(a, b, c, "json");
    }, ajaxSetup: function ajaxSetup(a, b) {
      return b ? cB(a, p.ajaxSettings) : (b = a, a = p.ajaxSettings), cB(a, b), a;
    }, ajaxSettings: { url: ck, isLocal: cn.test(cj[1]), global: !0, type: "GET", contentType: "application/x-www-form-urlencoded; charset=UTF-8", processData: !0, async: !0, accepts: { xml: "application/xml, text/xml", html: "text/html", text: "text/plain", json: "application/json, text/javascript", "*": cx }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText" }, converters: { "* text": a.String, "text html": !0, "text json": p.parseJSON, "text xml": p.parseXML }, flatOptions: { context: !0, url: !0 } }, ajaxPrefilter: cz(cv), ajaxTransport: cz(cw), ajax: function ajax(a, c) {
      function y(a, c, f, i) {
        var k,
            s,
            t,
            u,
            w,
            y = c;if (v === 2) return;v = 2, h && clearTimeout(h), g = b, e = i || "", x.readyState = a > 0 ? 4 : 0, f && (u = cC(l, x, f));if (a >= 200 && a < 300 || a === 304) l.ifModified && (w = x.getResponseHeader("Last-Modified"), w && (p.lastModified[d] = w), w = x.getResponseHeader("Etag"), w && (p.etag[d] = w)), a === 304 ? (y = "notmodified", k = !0) : (k = cD(l, u), y = k.state, s = k.data, t = k.error, k = !t);else {
          t = y;if (!y || a) y = "error", a < 0 && (a = 0);
        }x.status = a, x.statusText = (c || y) + "", k ? o.resolveWith(m, [s, y, x]) : o.rejectWith(m, [x, y, t]), x.statusCode(r), r = b, j && n.trigger("ajax" + (k ? "Success" : "Error"), [x, l, k ? s : t]), q.fireWith(m, [x, y]), j && (n.trigger("ajaxComplete", [x, l]), --p.active || p.event.trigger("ajaxStop"));
      }(typeof a === "undefined" ? "undefined" : _typeof(a)) == "object" && (c = a, a = b), c = c || {};var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k,
          l = p.ajaxSetup({}, c),
          m = l.context || l,
          n = m !== l && (m.nodeType || m instanceof p) ? p(m) : p.event,
          o = p.Deferred(),
          q = p.Callbacks("once memory"),
          r = l.statusCode || {},
          t = {},
          u = {},
          v = 0,
          w = "canceled",
          x = { readyState: 0, setRequestHeader: function setRequestHeader(a, b) {
          if (!v) {
            var c = a.toLowerCase();a = u[c] = u[c] || a, t[a] = b;
          }return this;
        }, getAllResponseHeaders: function getAllResponseHeaders() {
          return v === 2 ? e : null;
        }, getResponseHeader: function getResponseHeader(a) {
          var c;if (v === 2) {
            if (!f) {
              f = {};while (c = cm.exec(e)) {
                f[c[1].toLowerCase()] = c[2];
              }
            }c = f[a.toLowerCase()];
          }return c === b ? null : c;
        }, overrideMimeType: function overrideMimeType(a) {
          return v || (l.mimeType = a), this;
        }, abort: function abort(a) {
          return a = a || w, g && g.abort(a), y(0, a), this;
        } };o.promise(x), x.success = x.done, x.error = x.fail, x.complete = q.add, x.statusCode = function (a) {
        if (a) {
          var b;if (v < 2) for (b in a) {
            r[b] = [r[b], a[b]];
          } else b = a[x.status], x.always(b);
        }return this;
      }, l.url = ((a || l.url) + "").replace(cl, "").replace(cp, cj[1] + "//"), l.dataTypes = p.trim(l.dataType || "*").toLowerCase().split(s), l.crossDomain == null && (i = ct.exec(l.url.toLowerCase()) || !1, l.crossDomain = i && i.join(":") + (i[3] ? "" : i[1] === "http:" ? 80 : 443) !== cj.join(":") + (cj[3] ? "" : cj[1] === "http:" ? 80 : 443)), l.data && l.processData && typeof l.data != "string" && (l.data = p.param(l.data, l.traditional)), cA(cv, l, c, x);if (v === 2) return x;j = l.global, l.type = l.type.toUpperCase(), l.hasContent = !co.test(l.type), j && p.active++ === 0 && p.event.trigger("ajaxStart");if (!l.hasContent) {
        l.data && (l.url += (cq.test(l.url) ? "&" : "?") + l.data, delete l.data), d = l.url;if (l.cache === !1) {
          var z = p.now(),
              A = l.url.replace(cs, "$1_=" + z);l.url = A + (A === l.url ? (cq.test(l.url) ? "&" : "?") + "_=" + z : "");
        }
      }(l.data && l.hasContent && l.contentType !== !1 || c.contentType) && x.setRequestHeader("Content-Type", l.contentType), l.ifModified && (d = d || l.url, p.lastModified[d] && x.setRequestHeader("If-Modified-Since", p.lastModified[d]), p.etag[d] && x.setRequestHeader("If-None-Match", p.etag[d])), x.setRequestHeader("Accept", l.dataTypes[0] && l.accepts[l.dataTypes[0]] ? l.accepts[l.dataTypes[0]] + (l.dataTypes[0] !== "*" ? ", " + cx + "; q=0.01" : "") : l.accepts["*"]);for (k in l.headers) {
        x.setRequestHeader(k, l.headers[k]);
      }if (!l.beforeSend || l.beforeSend.call(m, x, l) !== !1 && v !== 2) {
        w = "abort";for (k in { success: 1, error: 1, complete: 1 }) {
          x[k](l[k]);
        }g = cA(cw, l, c, x);if (!g) y(-1, "No Transport");else {
          x.readyState = 1, j && n.trigger("ajaxSend", [x, l]), l.async && l.timeout > 0 && (h = setTimeout(function () {
            x.abort("timeout");
          }, l.timeout));try {
            v = 1, g.send(t, y);
          } catch (B) {
            if (v < 2) y(-1, B);else throw B;
          }
        }return x;
      }return x.abort();
    }, active: 0, lastModified: {}, etag: {} });var cE = [],
      cF = /\?/,
      cG = /(=)\?(?=&|$)|\?\?/,
      cH = p.now();p.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {
      var a = cE.pop() || p.expando + "_" + cH++;return this[a] = !0, a;
    } }), p.ajaxPrefilter("json jsonp", function (c, d, e) {
    var f,
        g,
        h,
        i = c.data,
        j = c.url,
        k = c.jsonp !== !1,
        l = k && cG.test(j),
        m = k && !l && typeof i == "string" && !(c.contentType || "").indexOf("application/x-www-form-urlencoded") && cG.test(i);if (c.dataTypes[0] === "jsonp" || l || m) return f = c.jsonpCallback = p.isFunction(c.jsonpCallback) ? c.jsonpCallback() : c.jsonpCallback, g = a[f], l ? c.url = j.replace(cG, "$1" + f) : m ? c.data = i.replace(cG, "$1" + f) : k && (c.url += (cF.test(j) ? "&" : "?") + c.jsonp + "=" + f), c.converters["script json"] = function () {
      return h || p.error(f + " was not called"), h[0];
    }, c.dataTypes[0] = "json", a[f] = function () {
      h = arguments;
    }, e.always(function () {
      a[f] = g, c[f] && (c.jsonpCallback = d.jsonpCallback, cE.push(f)), h && p.isFunction(g) && g(h[0]), h = g = b;
    }), "script";
  }), p.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /javascript|ecmascript/ }, converters: { "text script": function textScript(a) {
        return p.globalEval(a), a;
      } } }), p.ajaxPrefilter("script", function (a) {
    a.cache === b && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1);
  }), p.ajaxTransport("script", function (a) {
    if (a.crossDomain) {
      var c,
          d = e.head || e.getElementsByTagName("head")[0] || e.documentElement;return { send: function send(f, g) {
          c = e.createElement("script"), c.async = "async", a.scriptCharset && (c.charset = a.scriptCharset), c.src = a.url, c.onload = c.onreadystatechange = function (a, e) {
            if (e || !c.readyState || /loaded|complete/.test(c.readyState)) c.onload = c.onreadystatechange = null, d && c.parentNode && d.removeChild(c), c = b, e || g(200, "success");
          }, d.insertBefore(c, d.firstChild);
        }, abort: function abort() {
          c && c.onload(0, 1);
        } };
    }
  });var cI,
      cJ = a.ActiveXObject ? function () {
    for (var a in cI) {
      cI[a](0, 1);
    }
  } : !1,
      cK = 0;p.ajaxSettings.xhr = a.ActiveXObject ? function () {
    return !this.isLocal && cL() || cM();
  } : cL, function (a) {
    p.extend(p.support, { ajax: !!a, cors: !!a && "withCredentials" in a });
  }(p.ajaxSettings.xhr()), p.support.ajax && p.ajaxTransport(function (c) {
    if (!c.crossDomain || p.support.cors) {
      var _d;return { send: function send(e, f) {
          var g,
              h,
              i = c.xhr();c.username ? i.open(c.type, c.url, c.async, c.username, c.password) : i.open(c.type, c.url, c.async);if (c.xhrFields) for (h in c.xhrFields) {
            i[h] = c.xhrFields[h];
          }c.mimeType && i.overrideMimeType && i.overrideMimeType(c.mimeType), !c.crossDomain && !e["X-Requested-With"] && (e["X-Requested-With"] = "XMLHttpRequest");try {
            for (h in e) {
              i.setRequestHeader(h, e[h]);
            }
          } catch (j) {}i.send(c.hasContent && c.data || null), _d = function d(a, e) {
            var h, j, k, l, m;try {
              if (_d && (e || i.readyState === 4)) {
                _d = b, g && (i.onreadystatechange = p.noop, cJ && delete cI[g]);if (e) i.readyState !== 4 && i.abort();else {
                  h = i.status, k = i.getAllResponseHeaders(), l = {}, m = i.responseXML, m && m.documentElement && (l.xml = m);try {
                    l.text = i.responseText;
                  } catch (a) {}try {
                    j = i.statusText;
                  } catch (n) {
                    j = "";
                  }!h && c.isLocal && !c.crossDomain ? h = l.text ? 200 : 404 : h === 1223 && (h = 204);
                }
              }
            } catch (o) {
              e || f(-1, o);
            }l && f(h, j, l, k);
          }, c.async ? i.readyState === 4 ? setTimeout(_d, 0) : (g = ++cK, cJ && (cI || (cI = {}, p(a).unload(cJ)), cI[g] = _d), i.onreadystatechange = _d) : _d();
        }, abort: function abort() {
          _d && _d(0, 1);
        } };
    }
  });var cN,
      cO,
      cP = /^(?:toggle|show|hide)$/,
      cQ = new RegExp("^(?:([-+])=|)(" + q + ")([a-z%]*)$", "i"),
      cR = /queueHooks$/,
      cS = [cY],
      cT = { "*": [function (a, b) {
      var c,
          d,
          e = this.createTween(a, b),
          f = cQ.exec(b),
          g = e.cur(),
          h = +g || 0,
          i = 1,
          j = 20;if (f) {
        c = +f[2], d = f[3] || (p.cssNumber[a] ? "" : "px");if (d !== "px" && h) {
          h = p.css(e.elem, a, !0) || c || 1;do {
            i = i || ".5", h = h / i, p.style(e.elem, a, h + d);
          } while (i !== (i = e.cur() / g) && i !== 1 && --j);
        }e.unit = d, e.start = h, e.end = f[1] ? h + (f[1] + 1) * c : c;
      }return e;
    }] };p.Animation = p.extend(cW, { tweener: function tweener(a, b) {
      p.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");var c,
          d = 0,
          e = a.length;for (; d < e; d++) {
        c = a[d], cT[c] = cT[c] || [], cT[c].unshift(b);
      }
    }, prefilter: function prefilter(a, b) {
      b ? cS.unshift(a) : cS.push(a);
    } }), p.Tween = cZ, cZ.prototype = { constructor: cZ, init: function init(a, b, c, d, e, f) {
      this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (p.cssNumber[c] ? "" : "px");
    }, cur: function cur() {
      var a = cZ.propHooks[this.prop];return a && a.get ? a.get(this) : cZ.propHooks._default.get(this);
    }, run: function run(a) {
      var b,
          c = cZ.propHooks[this.prop];return this.options.duration ? this.pos = b = p.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : cZ.propHooks._default.set(this), this;
    } }, cZ.prototype.init.prototype = cZ.prototype, cZ.propHooks = { _default: { get: function get(a) {
        var b;return a.elem[a.prop] == null || !!a.elem.style && a.elem.style[a.prop] != null ? (b = p.css(a.elem, a.prop, !1, ""), !b || b === "auto" ? 0 : b) : a.elem[a.prop];
      }, set: function set(a) {
        p.fx.step[a.prop] ? p.fx.step[a.prop](a) : a.elem.style && (a.elem.style[p.cssProps[a.prop]] != null || p.cssHooks[a.prop]) ? p.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
      } } }, cZ.propHooks.scrollTop = cZ.propHooks.scrollLeft = { set: function set(a) {
      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
    } }, p.each(["toggle", "show", "hide"], function (a, b) {
    var c = p.fn[b];p.fn[b] = function (d, e, f) {
      return d == null || typeof d == "boolean" || !a && p.isFunction(d) && p.isFunction(e) ? c.apply(this, arguments) : this.animate(c$(b, !0), d, e, f);
    };
  }), p.fn.extend({ fadeTo: function fadeTo(a, b, c, d) {
      return this.filter(bZ).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);
    }, animate: function animate(a, b, c, d) {
      var e = p.isEmptyObject(a),
          f = p.speed(b, c, d),
          g = function g() {
        var b = cW(this, p.extend({}, a), f);e && b.stop(!0);
      };return e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
    }, stop: function stop(a, c, d) {
      var e = function e(a) {
        var b = a.stop;delete a.stop, b(d);
      };return typeof a != "string" && (d = c, c = a, a = b), c && a !== !1 && this.queue(a || "fx", []), this.each(function () {
        var b = !0,
            c = a != null && a + "queueHooks",
            f = p.timers,
            g = p._data(this);if (c) g[c] && g[c].stop && e(g[c]);else for (c in g) {
          g[c] && g[c].stop && cR.test(c) && e(g[c]);
        }for (c = f.length; c--;) {
          f[c].elem === this && (a == null || f[c].queue === a) && (f[c].anim.stop(d), b = !1, f.splice(c, 1));
        }(b || !d) && p.dequeue(this, a);
      });
    } }), p.each({ slideDown: c$("show"), slideUp: c$("hide"), slideToggle: c$("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {
    p.fn[a] = function (a, c, d) {
      return this.animate(b, a, c, d);
    };
  }), p.speed = function (a, b, c) {
    var d = a && (typeof a === "undefined" ? "undefined" : _typeof(a)) == "object" ? p.extend({}, a) : { complete: c || !c && b || p.isFunction(a) && a, duration: a, easing: c && b || b && !p.isFunction(b) && b };d.duration = p.fx.off ? 0 : typeof d.duration == "number" ? d.duration : d.duration in p.fx.speeds ? p.fx.speeds[d.duration] : p.fx.speeds._default;if (d.queue == null || d.queue === !0) d.queue = "fx";return d.old = d.complete, d.complete = function () {
      p.isFunction(d.old) && d.old.call(this), d.queue && p.dequeue(this, d.queue);
    }, d;
  }, p.easing = { linear: function linear(a) {
      return a;
    }, swing: function swing(a) {
      return .5 - Math.cos(a * Math.PI) / 2;
    } }, p.timers = [], p.fx = cZ.prototype.init, p.fx.tick = function () {
    var a,
        b = p.timers,
        c = 0;for (; c < b.length; c++) {
      a = b[c], !a() && b[c] === a && b.splice(c--, 1);
    }b.length || p.fx.stop();
  }, p.fx.timer = function (a) {
    a() && p.timers.push(a) && !cO && (cO = setInterval(p.fx.tick, p.fx.interval));
  }, p.fx.interval = 13, p.fx.stop = function () {
    clearInterval(cO), cO = null;
  }, p.fx.speeds = { slow: 600, fast: 200, _default: 400 }, p.fx.step = {}, p.expr && p.expr.filters && (p.expr.filters.animated = function (a) {
    return p.grep(p.timers, function (b) {
      return a === b.elem;
    }).length;
  });var c_ = /^(?:body|html)$/i;p.fn.offset = function (a) {
    if (arguments.length) return a === b ? this : this.each(function (b) {
      p.offset.setOffset(this, a, b);
    });var c,
        d,
        e,
        f,
        g,
        h,
        i,
        j = { top: 0, left: 0 },
        k = this[0],
        l = k && k.ownerDocument;if (!l) return;return (d = l.body) === k ? p.offset.bodyOffset(k) : (c = l.documentElement, p.contains(c, k) ? (typeof k.getBoundingClientRect != "undefined" && (j = k.getBoundingClientRect()), e = da(l), f = c.clientTop || d.clientTop || 0, g = c.clientLeft || d.clientLeft || 0, h = e.pageYOffset || c.scrollTop, i = e.pageXOffset || c.scrollLeft, { top: j.top + h - f, left: j.left + i - g }) : j);
  }, p.offset = { bodyOffset: function bodyOffset(a) {
      var b = a.offsetTop,
          c = a.offsetLeft;return p.support.doesNotIncludeMarginInBodyOffset && (b += parseFloat(p.css(a, "marginTop")) || 0, c += parseFloat(p.css(a, "marginLeft")) || 0), { top: b, left: c };
    }, setOffset: function setOffset(a, b, c) {
      var d = p.css(a, "position");d === "static" && (a.style.position = "relative");var e = p(a),
          f = e.offset(),
          g = p.css(a, "top"),
          h = p.css(a, "left"),
          i = (d === "absolute" || d === "fixed") && p.inArray("auto", [g, h]) > -1,
          j = {},
          k = {},
          l,
          m;i ? (k = e.position(), l = k.top, m = k.left) : (l = parseFloat(g) || 0, m = parseFloat(h) || 0), p.isFunction(b) && (b = b.call(a, c, f)), b.top != null && (j.top = b.top - f.top + l), b.left != null && (j.left = b.left - f.left + m), "using" in b ? b.using.call(a, j) : e.css(j);
    } }, p.fn.extend({ position: function position() {
      if (!this[0]) return;var a = this[0],
          b = this.offsetParent(),
          c = this.offset(),
          d = c_.test(b[0].nodeName) ? { top: 0, left: 0 } : b.offset();return c.top -= parseFloat(p.css(a, "marginTop")) || 0, c.left -= parseFloat(p.css(a, "marginLeft")) || 0, d.top += parseFloat(p.css(b[0], "borderTopWidth")) || 0, d.left += parseFloat(p.css(b[0], "borderLeftWidth")) || 0, { top: c.top - d.top, left: c.left - d.left };
    }, offsetParent: function offsetParent() {
      return this.map(function () {
        var a = this.offsetParent || e.body;while (a && !c_.test(a.nodeName) && p.css(a, "position") === "static") {
          a = a.offsetParent;
        }return a || e.body;
      });
    } }), p.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, c) {
    var d = /Y/.test(c);p.fn[a] = function (e) {
      return p.access(this, function (a, e, f) {
        var g = da(a);if (f === b) return g ? c in g ? g[c] : g.document.documentElement[e] : a[e];g ? g.scrollTo(d ? p(g).scrollLeft() : f, d ? f : p(g).scrollTop()) : a[e] = f;
      }, a, e, arguments.length, null);
    };
  }), p.each({ Height: "height", Width: "width" }, function (a, c) {
    p.each({ padding: "inner" + a, content: c, "": "outer" + a }, function (d, e) {
      p.fn[e] = function (e, f) {
        var g = arguments.length && (d || typeof e != "boolean"),
            h = d || (e === !0 || f === !0 ? "margin" : "border");return p.access(this, function (c, d, e) {
          var f;return p.isWindow(c) ? c.document.documentElement["client" + a] : c.nodeType === 9 ? (f = c.documentElement, Math.max(c.body["scroll" + a], f["scroll" + a], c.body["offset" + a], f["offset" + a], f["client" + a])) : e === b ? p.css(c, d, e, h) : p.style(c, d, e, h);
        }, c, g ? e : b, g, null);
      };
    });
  }), a.jQuery = a.$ = p,  true && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js").jQuery && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return p;
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
})(window);

/***/ }),

/***/ "./javascripts/jquery.mixitup.js":
/*!***************************************!*\
  !*** ./javascripts/jquery.mixitup.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
* MIXITUP - A CSS3 and JQuery Filter & Sort Plugin
* Version: 1.5.4
* License: Creative Commons Attribution-NoDerivs 3.0 Unported - CC BY-ND 3.0
* http://creativecommons.org/licenses/by-nd/3.0/
* This software may be used freely on commercial and non-commercial projects with attribution to the author/copyright holder.
* Author: Patrick Kunka
* Copyright 2012-2013 Patrick Kunka, Barrel LLC, All Rights Reserved
* 
* http://mixitup.io
*/

(function ($) {

	// DECLARE METHODS

	var methods = {

		// "INIT" METHOD

		init: function init(settings) {

			return this.each(function () {

				// BUILD CONFIG OBJECT

				var config = {

					// PUBLIC PROPERTIES

					targetSelector: '.mix',
					filterSelector: '.filter',
					sortSelector: '.sort',
					buttonEvent: 'click',
					effects: ['fade', 'scale'],
					listEffects: null,
					easing: 'smooth',
					layoutMode: 'grid',
					targetDisplayGrid: 'inline-block',
					targetDisplayList: 'block',
					listClass: '',
					gridClass: '',
					transitionSpeed: 600,
					showOnLoad: 'all',
					sortOnLoad: false,
					multiFilter: false,
					filterLogic: 'or',
					resizeContainer: true,
					minHeight: 0,
					failClass: 'fail',
					perspectiveDistance: '3000',
					perspectiveOrigin: '50% 50%',
					animateGridList: true,
					onMixLoad: null,
					onMixStart: null,
					onMixEnd: null,

					// MISC

					container: null,
					origOrder: [],
					startOrder: [],
					newOrder: [],
					origSort: [],
					checkSort: [],
					filter: '',
					mixing: false,
					origDisplay: '',
					origLayout: '',
					origHeight: 0,
					newHeight: 0,
					isTouch: false,
					resetDelay: 0,
					failsafe: null,

					// CSS

					prefix: '',
					easingFallback: 'ease-in-out',
					transition: {},
					perspective: {},
					clean: {},
					fade: '1',
					scale: '',
					rotateX: '',
					rotateY: '',
					rotateZ: '',
					blur: '',
					grayscale: ''
				};

				if (settings) {
					$.extend(config, settings);
				};

				// ADD CONFIG OBJECT TO CONTAINER OBJECT PER INSTANTIATION

				this.config = config;

				// DETECT TOUCH

				$.support.touch = 'ontouchend' in document;

				if ($.support.touch) {
					config.isTouch = true;
					config.resetDelay = 350;
				};

				// LOCALIZE CONTAINER

				config.container = $(this);
				var $cont = config.container;

				// GET VENDOR PREFIX

				config.prefix = prefix($cont[0]);
				config.prefix = config.prefix ? '-' + config.prefix.toLowerCase() + '-' : '';

				// CACHE 'DEFAULT' SORTING ORDER

				$cont.find(config.targetSelector).each(function () {
					config.origOrder.push($(this));
				});

				// PERFORM SORT ON LOAD 

				if (config.sortOnLoad) {
					var sortby, order;
					if ($.isArray(config.sortOnLoad)) {
						sortby = config.sortOnLoad[0], order = config.sortOnLoad[1];
						$(config.sortSelector + '[data-sort=' + config.sortOnLoad[0] + '][data-order=' + config.sortOnLoad[1] + ']').addClass('active');
					} else {
						$(config.sortSelector + '[data-sort=' + config.sortOnLoad + ']').addClass('active');
						sortby = config.sortOnLoad, config.sortOnLoad = 'desc';
					};
					sort(sortby, order, $cont, config);
				};

				// BUILD TRANSITION AND PERSPECTIVE OBJECTS

				for (var i = 0; i < 2; i++) {
					var a = i == 0 ? a = config.prefix : '';
					config.transition[a + 'transition'] = 'all ' + config.transitionSpeed + 'ms ease-in-out';
					config.perspective[a + 'perspective'] = config.perspectiveDistance + 'px';
					config.perspective[a + 'perspective-origin'] = config.perspectiveOrigin;
				};

				// BUILD TRANSITION CLEANER

				for (var i = 0; i < 2; i++) {
					var a = i == 0 ? a = config.prefix : '';
					config.clean[a + 'transition'] = 'none';
				};

				// CHOOSE GRID OR LIST

				if (config.layoutMode == 'list') {
					$cont.addClass(config.listClass);
					config.origDisplay = config.targetDisplayList;
				} else {
					$cont.addClass(config.gridClass);
					config.origDisplay = config.targetDisplayGrid;
				};
				config.origLayout = config.layoutMode;

				// PARSE 'SHOWONLOAD'

				var showOnLoadArray = config.showOnLoad.split(' ');

				// GIVE ACTIVE FILTER ACTIVE CLASS

				$.each(showOnLoadArray, function () {
					$(config.filterSelector + '[data-filter="' + this + '"]').addClass('active');
				});

				// RENAME "ALL" CATEGORY TO "MIX_ALL"

				$cont.find(config.targetSelector).addClass('mix_all');
				if (showOnLoadArray[0] == 'all') {
					showOnLoadArray[0] = 'mix_all', config.showOnLoad = 'mix_all';
				};

				// FADE IN 'SHOWONLOAD'

				var $showOnLoad = $();
				$.each(showOnLoadArray, function () {
					$showOnLoad = $showOnLoad.add($('.' + this));
				});

				$showOnLoad.each(function () {
					var $t = $(this);
					if (config.layoutMode == 'list') {
						$t.css('display', config.targetDisplayList);
					} else {
						$t.css('display', config.targetDisplayGrid);
					};
					$t.css(config.transition);
				});

				// WRAP FADE-IN TO PREVENT RACE CONDITION

				var delay = setTimeout(function () {

					config.mixing = true;

					$showOnLoad.css('opacity', '1');

					// CLEAN UP

					var reset = setTimeout(function () {
						if (config.layoutMode == 'list') {
							$showOnLoad.removeStyle(config.prefix + 'transition, transition').css({
								display: config.targetDisplayList,
								opacity: 1
							});
						} else {
							$showOnLoad.removeStyle(config.prefix + 'transition, transition').css({
								display: config.targetDisplayGrid,
								opacity: 1
							});
						};

						// FIRE "ONMIXLOAD" CALLBACK

						config.mixing = false;

						if (typeof config.onMixLoad == 'function') {
							var output = config.onMixLoad.call(this, config);

							// UPDATE CONFIG IF DATA RETURNED

							config = output ? output : config;
						};
					}, config.transitionSpeed);
				}, 10);

				// PRESET ACTIVE FILTER

				config.filter = config.showOnLoad;

				// BIND SORT CLICK HANDLERS

				$(config.sortSelector).bind(config.buttonEvent, function () {

					if (!config.mixing) {

						// PARSE SORT ARGUMENTS FROM BUTTON CLASSES

						var $t = $(this),
						    sortby = $t.attr('data-sort'),
						    order = $t.attr('data-order');

						if (!$t.hasClass('active')) {
							$(config.sortSelector).removeClass('active');
							$t.addClass('active');
						} else {
							if (sortby != 'random') return false;
						};

						$cont.find(config.targetSelector).each(function () {
							config.startOrder.push($(this));
						});

						goMix(config.filter, sortby, order, $cont, config);
					};
				});

				// BIND FILTER CLICK HANDLERS

				$(config.filterSelector).bind(config.buttonEvent, function () {

					if (!config.mixing) {

						var $t = $(this);

						// PARSE FILTER ARGUMENTS FROM BUTTON CLASSES

						if (config.multiFilter == false) {

							// SINGLE ACTIVE BUTTON

							$(config.filterSelector).removeClass('active');
							$t.addClass('active');

							config.filter = $t.attr('data-filter');

							$(config.filterSelector + '[data-filter="' + config.filter + '"]').addClass('active');
						} else {

							// MULTIPLE ACTIVE BUTTONS

							var thisFilter = $t.attr('data-filter');

							if ($t.hasClass('active')) {
								$t.removeClass('active');

								// REMOVE FILTER FROM SPACE-SEPERATED STRING

								var re = new RegExp('(\\s|^)' + thisFilter);
								config.filter = config.filter.replace(re, '');
							} else {

								// ADD FILTER TO SPACE-SEPERATED STRING

								$t.addClass('active');
								config.filter = config.filter + ' ' + thisFilter;
							};
						};

						// GO MIX

						goMix(config.filter, null, null, $cont, config);
					};
				});
			});
		},

		// "TOGRID" METHOD

		toGrid: function toGrid() {
			return this.each(function () {
				var config = this.config;
				if (config.layoutMode != 'grid') {
					config.layoutMode = 'grid';
					goMix(config.filter, null, null, $(this), config);
				};
			});
		},

		// "TOLIST" METHOD

		toList: function toList() {
			return this.each(function () {
				var config = this.config;
				if (config.layoutMode != 'list') {
					config.layoutMode = 'list';
					goMix(config.filter, null, null, $(this), config);
				};
			});
		},

		// "FILTER" METHOD

		filter: function filter(arg) {
			return this.each(function () {
				var config = this.config;
				if (!config.mixing) {
					$(config.filterSelector).removeClass('active');
					$(config.filterSelector + '[data-filter="' + arg + '"]').addClass('active');
					goMix(arg, null, null, $(this), config);
				};
			});
		},

		// "SORT" METHOD

		sort: function sort(args) {
			return this.each(function () {
				var config = this.config,
				    $t = $(this);
				if (!config.mixing) {
					$(config.sortSelector).removeClass('active');
					if ($.isArray(args)) {
						var sortby = args[0],
						    order = args[1];
						$(config.sortSelector + '[data-sort="' + args[0] + '"][data-order="' + args[1] + '"]').addClass('active');
					} else {
						$(config.sortSelector + '[data-sort="' + args + '"]').addClass('active');
						var sortby = args,
						    order = 'desc';
					};
					$t.find(config.targetSelector).each(function () {
						config.startOrder.push($(this));
					});

					goMix(config.filter, sortby, order, $t, config);
				};
			});
		},

		// "MULTIMIX" METHOD

		multimix: function multimix(args) {
			return this.each(function () {
				var config = this.config,
				    $t = $(this);
				multiOut = {
					filter: config.filter,
					sort: null,
					order: 'desc',
					layoutMode: config.layoutMode
				};
				$.extend(multiOut, args);
				if (!config.mixing) {
					$(config.filterSelector).add(config.sortSelector).removeClass('active');
					$(config.filterSelector + '[data-filter="' + multiOut.filter + '"]').addClass('active');
					if (typeof multiOut.sort !== 'undefined') {
						$(config.sortSelector + '[data-sort="' + multiOut.sort + '"][data-order="' + multiOut.order + '"]').addClass('active');
						$t.find(config.targetSelector).each(function () {
							config.startOrder.push($(this));
						});
					};
					config.layoutMode = multiOut.layoutMode;
					goMix(multiOut.filter, multiOut.sort, multiOut.order, $t, config);
				};
			});
		},

		// "REMIX" METHOD

		remix: function remix(arg) {
			return this.each(function () {
				var config = this.config,
				    $t = $(this);
				config.origOrder = [];
				$t.find(config.targetSelector).each(function () {
					var $th = $(this);
					$th.addClass('mix_all');
					config.origOrder.push($th);
				});
				if (!config.mixing && typeof arg !== 'undefined') {
					$(config.filterSelector).removeClass('active');
					$(config.filterSelector + '[data-filter="' + arg + '"]').addClass('active');
					goMix(arg, null, null, $t, config);
				};
			});
		}
	};

	// DECLARE PLUGIN

	$.fn.mixitup = function (method, arg) {
		if (methods[method]) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if ((typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' || !method) {
			return methods.init.apply(this, arguments);
		};
	};

	/* ==== THE MAGIC ==== */

	function goMix(filter, sortby, order, $cont, config) {

		// WE ARE NOW MIXING

		clearInterval(config.failsafe);
		config.mixing = true;

		// APPLY ARGS TO CONFIG

		config.filter = filter;

		// FIRE "ONMIXSTART" CALLBACK

		if (typeof config.onMixStart == 'function') {
			var output = config.onMixStart.call(this, config);

			// UPDATE CONFIG IF DATA RETURNED

			config = output ? output : config;
		};

		// SHORT LOCAL VARS

		var speed = config.transitionSpeed;

		// REBUILD TRANSITION AND PERSPECTIVE OBJECTS

		for (var i = 0; i < 2; i++) {
			var a = i == 0 ? a = config.prefix : '';
			config.transition[a + 'transition'] = 'all ' + speed + 'ms linear';
			config.transition[a + 'transform'] = a + 'translate3d(0,0,0)';
			config.perspective[a + 'perspective'] = config.perspectiveDistance + 'px';
			config.perspective[a + 'perspective-origin'] = config.perspectiveOrigin;
		};

		// CACHE TARGET ELEMENTS FOR QUICK ACCESS

		var mixSelector = config.targetSelector,
		    $targets = $cont.find(mixSelector);

		// ADD DATA OBJECT TO EACH TARGET

		$targets.each(function () {
			this.data = {};
		});

		// RE-DEFINE CONTAINER INCASE NOT IMMEDIATE PARENT OF TARGET ELEMENTS 

		var $par = $targets.parent();

		// ADD PERSPECTIVE TO CONTAINER 

		$par.css(config.perspective);

		// SETUP EASING

		config.easingFallback = 'ease-in-out';
		if (config.easing == 'smooth') config.easing = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
		if (config.easing == 'snap') config.easing = 'cubic-bezier(0.77, 0, 0.175, 1)';
		if (config.easing == 'windback') {
			config.easing = 'cubic-bezier(0.175, 0.885, 0.320, 1.275)', config.easingFallback = 'cubic-bezier(0.175, 0.885, 0.320, 1)'; // Fall-back for old webkit, with no values > 1 or < 1
		};
		if (config.easing == 'windup') {
			config.easing = 'cubic-bezier(0.6, -0.28, 0.735, 0.045)', config.easingFallback = 'cubic-bezier(0.6, 0.28, 0.735, 0.045)';
		};

		// USE LIST SPECIFIC EFFECTS IF DECLARED

		var effectsOut = config.layoutMode == 'list' && config.listEffects != null ? config.listEffects : config.effects;

		// BUILD EFFECTS STRINGS & SKIP IF IE8

		if (Array.prototype.indexOf) {
			config.fade = effectsOut.indexOf('fade') > -1 ? '0' : '';
			config.scale = effectsOut.indexOf('scale') > -1 ? 'scale(.01)' : '';
			config.rotateZ = effectsOut.indexOf('rotateZ') > -1 ? 'rotate(180deg)' : '';
			config.rotateY = effectsOut.indexOf('rotateY') > -1 ? 'rotateY(90deg)' : '';
			config.rotateX = effectsOut.indexOf('rotateX') > -1 ? 'rotateX(90deg)' : '';
			config.blur = effectsOut.indexOf('blur') > -1 ? 'blur(8px)' : '';
			config.grayscale = effectsOut.indexOf('grayscale') > -1 ? 'grayscale(100%)' : '';
		};

		// DECLARE NEW JQUERY OBJECTS FOR GROUPING

		var $show = $(),
		    $hide = $(),
		    filterArray = [],
		    multiDimensional = false;

		// BUILD FILTER ARRAY(S)

		if (typeof filter === 'string') {

			// SINGLE DIMENSIONAL FILTERING

			filterArray = buildFilterArray(filter);
		} else {

			// MULTI DIMENSIONAL FILTERING

			multiDimensional = true;

			$.each(filter, function (i) {
				filterArray[i] = buildFilterArray(this);
			});
		};

		// "OR" LOGIC (DEFAULT)

		if (config.filterLogic == 'or') {

			if (filterArray[0] == '') filterArray.shift(); // IF FIRST ITEM IN ARRAY IS AN EMPTY SPACE, DELETE

			// IF NO ELEMENTS ARE DESIRED THEN HIDE ALL VISIBLE ELEMENTS

			if (filterArray.length < 1) {

				$hide = $hide.add($cont.find(mixSelector + ':visible'));
			} else {

				// ELSE CHECK EACH TARGET ELEMENT FOR ANY FILTER CATEGORY:

				$targets.each(function () {
					var $t = $(this);
					if (!multiDimensional) {
						// IF HAS ANY FILTER, ADD TO "SHOW" OBJECT
						if ($t.is('.' + filterArray.join(', .'))) {
							$show = $show.add($t);
							// ELSE IF HAS NO FILTERS, ADD TO "HIDE" OBJECT
						} else {
							$hide = $hide.add($t);
						};
					} else {

						var pass = 0;
						// FOR EACH DIMENSION

						$.each(filterArray, function (i) {
							if (this.length) {
								if ($t.is('.' + this.join(', .'))) {
									pass++;
								};
							} else if (pass > 0) {
								pass++;
							};
						});
						// IF PASSES ALL DIMENSIONS, SHOW
						if (pass == filterArray.length) {
							$show = $show.add($t);
							// ELSE HIDE
						} else {
							$hide = $hide.add($t);
						};
					};
				});
			};
		} else {

			// "AND" LOGIC

			// ADD "MIX_SHOW" CLASS TO ELEMENTS THAT HAVE ALL FILTERS

			$show = $show.add($par.find(mixSelector + '.' + filterArray.join('.')));

			// ADD "MIX_HIDE" CLASS TO EVERYTHING ELSE

			$hide = $hide.add($par.find(mixSelector + ':not(.' + filterArray.join('.') + '):visible'));
		};

		// GET TOTAL NUMBER OF ELEMENTS TO SHOW

		var total = $show.length;

		// DECLARE NEW JQUERY OBJECTS

		var $tohide = $(),
		    $toshow = $(),
		    $pre = $();

		// FOR ELEMENTS TO BE HIDDEN, IF NOT ALREADY HIDDEN THEN ADD TO OBJECTS "TOHIDE" AND "PRE" 
		// TO INDICATE PRE-EXISTING ELEMENTS TO BE HIDDEN

		$hide.each(function () {
			var $t = $(this);
			if ($t.css('display') != 'none') {
				$tohide = $tohide.add($t);
				$pre = $pre.add($t);
			};
		});

		// IF ALL ELEMENTS ARE ALREADY SHOWN AND THERE IS NOTHING TO HIDE, AND NOT PERFORMING A LAYOUT CHANGE OR SORT:

		if ($show.filter(':visible').length == total && !$tohide.length && !sortby) {

			if (config.origLayout == config.layoutMode) {

				// THEN CLEAN UP AND GO HOME

				resetFilter();
				return false;
			} else {

				// IF ONLY ONE ITEM AND CHANGING FORM GRID TO LIST, MOST LIKELY POSITION WILL NOT CHANGE SO WE'RE DONE

				if ($show.length == 1) {

					if (config.layoutMode == 'list') {
						$cont.addClass(config.listClass);
						$cont.removeClass(config.gridClass);
						$pre.css('display', config.targetDisplayList);
					} else {
						$cont.addClass(config.gridClass);
						$cont.removeClass(config.listClass);
						$pre.css('display', config.targetDisplayGrid);
					};

					// THEN CLEAN UP AND GO HOME

					resetFilter();
					return false;
				}
			};
		};

		// GET CONTAINER'S STARTING HEIGHT

		config.origHeight = $par.height();

		// IF THERE IS SOMETHING TO BE SHOWN:

		if ($show.length) {

			// REMOVE "FAIL CLASS" FROM CONTAINER IF EXISTS

			$cont.removeClass(config.failClass);

			// FOR ELEMENTS TO BE SHOWN, IF NOT ALREADY SHOWN THEN ADD TO OBJECTS "TOSHOW" ELSE ADD CLASS "MIX_PRE"
			// TO INDICATE PRE-EXISTING ELEMENT

			$show.each(function () {
				var $t = $(this);
				if ($t.css('display') == 'none') {
					$toshow = $toshow.add($t);
				} else {
					$pre = $pre.add($t);
				};
			});

			// IF NON-ANIMATED LAYOUT MODE TRANSITION:

			if (config.origLayout != config.layoutMode && config.animateGridList == false) {

				// ADD NEW DISPLAY TYPES, CLEAN UP AND GO HOME

				if (config.layoutMode == 'list') {
					$cont.addClass(config.listClass);
					$cont.removeClass(config.gridClass);
					$pre.css('display', config.targetDisplayList);
				} else {
					$cont.addClass(config.gridClass);
					$cont.removeClass(config.listClass);
					$pre.css('display', config.targetDisplayGrid);
				};

				resetFilter();
				return false;
			};

			// IF IE, FUCK OFF, AND THEN CLEAN UP AND GO HOME

			if (!window.atob) {
				resetFilter();
				return false;
			};

			// OVERRIDE ANY EXISTING TRANSITION TIMING FOR CALCULATIONS

			$targets.css(config.clean);

			// FOR EACH PRE-EXISTING ELEMENT, ADD STARTING POSITION TO 'ORIGPOS' ARRAY

			$pre.each(function () {
				this.data.origPos = $(this).offset();
			});

			// TEMPORARILY SHOW ALL ELEMENTS TO SHOW (THAT ARE NOT ALREADY SHOWN), WITHOUT HIDING ELEMENTS TO HIDE
			// AND ADD/REMOVE GRID AND LIST CLASSES FROM CONTAINER

			if (config.layoutMode == 'list') {
				$cont.addClass(config.listClass);
				$cont.removeClass(config.gridClass);
				$toshow.css('display', config.targetDisplayList);
			} else {
				$cont.addClass(config.gridClass);
				$cont.removeClass(config.listClass);
				$toshow.css('display', config.targetDisplayGrid);
			};

			// FOR EACH ELEMENT NOW SHOWN, ADD ITS INTERMEDIATE POSITION TO 'SHOWINTERPOS' ARRAY

			$toshow.each(function () {
				this.data.showInterPos = $(this).offset();
			});

			// FOR EACH ELEMENT TO BE HIDDEN, BUT NOT YET HIDDEN, AND NOW MOVED DUE TO SHOWN ELEMENTS,
			// ADD ITS INTERMEDIATE POSITION TO 'HIDEINTERPOS' ARRAY

			$tohide.each(function () {
				this.data.hideInterPos = $(this).offset();
			});

			// FOR EACH PRE-EXISTING ELEMENT, NOW MOVED DUE TO SHOWN ELEMENTS, ADD ITS POSITION TO 'PREINTERPOS' ARRAY

			$pre.each(function () {
				this.data.preInterPos = $(this).offset();
			});

			// SET DISPLAY PROPERTY OF PRE-EXISTING ELEMENTS INCASE WE ARE CHANGING LAYOUT MODE

			if (config.layoutMode == 'list') {
				$pre.css('display', config.targetDisplayList);
			} else {
				$pre.css('display', config.targetDisplayGrid);
			};

			// IF A SORT ARGUMENT HAS BEEN SENT, RUN SORT FUNCTION SO OBJECTS WILL MOVE TO THEIR FINAL ORDER

			if (sortby) {
				sort(sortby, order, $cont, config);
			};

			// IF VISIBLE SORT ORDER IS THE SAME (WHICH WOULD NOT TRIGGER A TRANSITION EVENT)

			if (sortby && compareArr(config.origSort, config.checkSort)) {

				// THEN CLEAN UP AND GO HOME
				resetFilter();
				return false;
			};

			// TEMPORARILY HIDE ALL SHOWN ELEMENTS TO HIDE

			$tohide.hide();

			// FOR EACH ELEMENT TO SHOW, AND NOW MOVED DUE TO HIDDEN ELEMENTS BEING REMOVED, 
			// ADD ITS POSITION TO 'FINALPOS' ARRAY

			$toshow.each(function (i) {
				this.data.finalPos = $(this).offset();
			});

			// FOR EACH PRE-EXISTING ELEMENT NOW MOVED DUE TO HIDDEN ELEMENTS BEING REMOVED,
			// ADD ITS POSITION TO 'FINALPREPOS' ARRAY

			$pre.each(function () {
				this.data.finalPrePos = $(this).offset();
			});

			// SINCE WE ARE IN OUT FINAL STATE, GET NEW HEIGHT OF CONTAINER

			config.newHeight = $par.height();

			// IF A SORT ARGUMENT AS BEEN SENT, RUN SORT FUNCTION 'RESET' TO MOVE ELEMENTS BACK TO THEIR STARTING ORDER

			if (sortby) {
				sort('reset', null, $cont, config);
			};

			// RE-HIDE ALL ELEMENTS TEMPORARILY SHOWN

			$toshow.hide();

			// SET DISPLAY PROPERTY OF PRE-EXISTING ELEMENTS BACK TO THEIR 
			// ORIGINAL PROPERTY, INCASE WE ARE CHANGING LAYOUT MODE

			$pre.css('display', config.origDisplay);

			// ADD/REMOVE GRID AND LIST CLASSES FROM CONTAINER

			if (config.origDisplay == 'block') {
				$cont.addClass(config.listClass);
				$toshow.css('display', config.targetDisplayList);
			} else {
				$cont.removeClass(config.listClass);
				$toshow.css('display', config.targetDisplayGrid);
			};

			// IF WE ARE ANIMATING CONTAINER, RESET IT TO ITS STARTING HEIGHT

			if (config.resizeContainer) $par.css('height', config.origHeight + 'px');

			// ADD TRANSFORMS TO ALL ELEMENTS TO SHOW

			var toShowCSS = {};

			for (var i = 0; i < 2; i++) {
				var a = i == 0 ? a = config.prefix : '';
				toShowCSS[a + 'transform'] = config.scale + ' ' + config.rotateX + ' ' + config.rotateY + ' ' + config.rotateZ;
				toShowCSS[a + 'filter'] = config.blur + ' ' + config.grayscale;
			};

			$toshow.css(toShowCSS);

			// FOR EACH PRE-EXISTING ELEMENT, SUBTRACT ITS INTERMEDIATE POSITION FROM ITS ORIGINAL POSITION 
			// TO GET ITS STARTING OFFSET

			$pre.each(function () {
				var data = this.data,
				    $t = $(this);

				if ($t.hasClass('mix_tohide')) {
					data.preTX = data.origPos.left - data.hideInterPos.left;
					data.preTY = data.origPos.top - data.hideInterPos.top;
				} else {
					data.preTX = data.origPos.left - data.preInterPos.left;
					data.preTY = data.origPos.top - data.preInterPos.top;
				};
				var preCSS = {};
				for (var i = 0; i < 2; i++) {
					var a = i == 0 ? a = config.prefix : '';
					preCSS[a + 'transform'] = 'translate(' + data.preTX + 'px,' + data.preTY + 'px)';
				};

				$t.css(preCSS);
			});

			// ADD/REMOVE GRID AND LIST CLASSES FROM CONTAINER

			if (config.layoutMode == 'list') {
				$cont.addClass(config.listClass);
				$cont.removeClass(config.gridClass);
			} else {
				$cont.addClass(config.gridClass);
				$cont.removeClass(config.listClass);
			};

			// WRAP ANIMATION FUNCTIONS IN 10ms TIMEOUT TO PREVENT RACE CONDITION

			var delay = setTimeout(function () {

				// APPLY TRANSITION TIMING TO CONTAINER, AND BEGIN ANIMATION TO NEW HEIGHT

				if (config.resizeContainer) {
					var containerCSS = {};
					for (var i = 0; i < 2; i++) {
						var a = i == 0 ? a = config.prefix : '';
						containerCSS[a + 'transition'] = 'all ' + speed + 'ms ease-in-out';
						containerCSS['height'] = config.newHeight + 'px';
					};
					$par.css(containerCSS);
				};

				// BEGIN FADING IN/OUT OF ALL ELEMENTS TO SHOW/HIDE
				$tohide.css('opacity', config.fade);
				$toshow.css('opacity', 1);

				// FOR EACH ELEMENT BEING SHOWN, CALCULATE ITS TRAJECTORY BY SUBTRACTING
				// ITS INTERMEDIATE POSITION FROM ITS FINAL POSITION.
				// ALSO ADD SPEED AND EASING

				$toshow.each(function () {
					var data = this.data;
					data.tX = data.finalPos.left - data.showInterPos.left;
					data.tY = data.finalPos.top - data.showInterPos.top;

					var toShowCSS = {};
					for (var i = 0; i < 2; i++) {
						var a = i == 0 ? a = config.prefix : '';
						toShowCSS[a + 'transition-property'] = a + 'transform, ' + a + 'filter, opacity';
						toShowCSS[a + 'transition-timing-function'] = config.easing + ', linear, linear';
						toShowCSS[a + 'transition-duration'] = speed + 'ms';
						toShowCSS[a + 'transition-delay'] = '0';
						toShowCSS[a + 'transform'] = 'translate(' + data.tX + 'px,' + data.tY + 'px)';
						toShowCSS[a + 'filter'] = 'none';
					};

					$(this).css('-webkit-transition', 'all ' + speed + 'ms ' + config.easingFallback).css(toShowCSS);
				});

				// FOR EACH PRE-EXISTING ELEMENT, IF IT HAS A FINAL POSITION, CALCULATE 
				// ITS TRAJETORY BY SUBTRACTING ITS INTERMEDIATE POSITION FROM ITS FINAL POSITION.
				// ALSO ADD SPEED AND EASING

				$pre.each(function () {
					var data = this.data;
					data.tX = data.finalPrePos.left != 0 ? data.finalPrePos.left - data.preInterPos.left : 0;
					data.tY = data.finalPrePos.left != 0 ? data.finalPrePos.top - data.preInterPos.top : 0;

					var preCSS = {};
					for (var i = 0; i < 2; i++) {
						var a = i == 0 ? a = config.prefix : '';
						preCSS[a + 'transition'] = 'all ' + speed + 'ms ' + config.easing;
						preCSS[a + 'transform'] = 'translate(' + data.tX + 'px,' + data.tY + 'px)';
					};

					$(this).css('-webkit-transition', 'all ' + speed + 'ms ' + config.easingFallback).css(preCSS);
				});

				// BEGIN TRANSFORMS ON ALL ELEMENTS TO BE HIDDEN

				var toHideCSS = {};
				for (var i = 0; i < 2; i++) {
					var a = i == 0 ? a = config.prefix : '';
					toHideCSS[a + 'transition'] = 'all ' + speed + 'ms ' + config.easing + ', ' + a + 'filter ' + speed + 'ms linear, opacity ' + speed + 'ms linear';
					toHideCSS[a + 'transform'] = config.scale + ' ' + config.rotateX + ' ' + config.rotateY + ' ' + config.rotateZ;
					toHideCSS[a + 'filter'] = config.blur + ' ' + config.grayscale;
					toHideCSS['opacity'] = config.fade;
				};

				$tohide.css(toHideCSS);

				// ALL ANIMATIONS HAVE NOW BEEN STARTED, NOW LISTEN FOR TRANSITION END:

				$par.bind('webkitTransitionEnd transitionend otransitionend oTransitionEnd', function (e) {

					if (e.originalEvent.propertyName.indexOf('transform') > -1 || e.originalEvent.propertyName.indexOf('opacity') > -1) {

						if (mixSelector.indexOf('.') > -1) {

							// IF MIXSELECTOR IS A CLASS NAME

							if ($(e.target).hasClass(mixSelector.replace('.', ''))) {
								resetFilter();
							};
						} else {

							// IF MIXSELECTOR IS A TAG

							if ($(e.target).is(mixSelector)) {
								resetFilter();
							};
						};
					};
				});
			}, 10);

			// LAST RESORT EMERGENCY FAILSAFE

			config.failsafe = setTimeout(function () {
				if (config.mixing) {
					resetFilter();
				};
			}, speed + 400);
		} else {

			// ELSE IF NOTHING TO SHOW, AND EVERYTHING TO BE HIDDEN

			// IF WE ARE RESIZING CONTAINER, SET ITS STARTING HEIGHT

			if (config.resizeContainer) $par.css('height', config.origHeight + 'px');

			// IF IE, FUCK OFF, AND THEN GO HOME

			if (!window.atob) {
				resetFilter();
				return false;
			};

			// GROUP ALL ELEMENTS TO HIDE INTO JQUERY OBJECT

			$tohide = $hide;

			// WRAP ANIMATION FUNCTIONS IN A 10ms DELAY TO PREVENT RACE CONDITION

			var delay = setTimeout(function () {

				// APPLY PERSPECTIVE TO CONTAINER

				$par.css(config.perspective);

				// APPLY TRANSITION TIMING TO CONTAINER, AND BEGIN ANIMATION TO NEW HEIGHT

				if (config.resizeContainer) {
					var containerCSS = {};
					for (var i = 0; i < 2; i++) {
						var a = i == 0 ? a = config.prefix : '';
						containerCSS[a + 'transition'] = 'height ' + speed + 'ms ease-in-out';
						containerCSS['height'] = config.minHeight + 'px';
					};
					$par.css(containerCSS);
				};

				// APPLY TRANSITION TIMING TO ALL TARGET ELEMENTS

				$targets.css(config.transition);

				// GET TOTAL NUMBER OF ELEMENTS TO HIDE

				var totalHide = $hide.length;

				// IF SOMETHING TO HIDE:

				if (totalHide) {

					// BEGIN TRANSFORMS ON ALL ELEMENTS TO BE HIDDEN

					var toHideCSS = {};
					for (var i = 0; i < 2; i++) {
						var a = i == 0 ? a = config.prefix : '';
						toHideCSS[a + 'transform'] = config.scale + ' ' + config.rotateX + ' ' + config.rotateY + ' ' + config.rotateZ;
						toHideCSS[a + 'filter'] = config.blur + ' ' + config.grayscale;
						toHideCSS['opacity'] = config.fade;
					};

					$tohide.css(toHideCSS);

					// ALL ANIMATIONS HAVE NOW BEEN STARTED, NOW LISTEN FOR TRANSITION END:

					$par.bind('webkitTransitionEnd transitionend otransitionend oTransitionEnd', function (e) {
						if (e.originalEvent.propertyName.indexOf('transform') > -1 || e.originalEvent.propertyName.indexOf('opacity') > -1) {
							$cont.addClass(config.failClass);
							resetFilter();
						};
					});
				} else {

					// ELSE, WE'RE DONE MIXING

					config.mixing = false;
				};
			}, 10);
		};

		// CLEAN UP AND RESET FUNCTION

		function resetFilter() {

			// UNBIND TRANSITION END EVENTS FROM CONTAINER

			$par.unbind('webkitTransitionEnd transitionend otransitionend oTransitionEnd');

			// IF A SORT ARGUMENT HAS BEEN SENT, SORT ELEMENTS TO THEIR FINAL ORDER

			if (sortby) {
				sort(sortby, order, $cont, config);
			};

			// EMPTY SORTING ARRAYS

			config.startOrder = [], config.newOrder = [], config.origSort = [], config.checkSort = [];

			// REMOVE INLINE STYLES FROM ALL TARGET ELEMENTS AND SLAM THE BRAKES ON

			$targets.removeStyle(config.prefix + 'filter, filter, ' + config.prefix + 'transform, transform, opacity, display').css(config.clean).removeAttr('data-checksum');

			// BECAUSE IE SUCKS

			if (!window.atob) {
				$targets.css({
					display: 'none',
					opacity: '0'
				});
			};

			// REMOVE HEIGHT FROM CONTAINER ONLY IF RESIZING

			var remH = config.resizeContainer ? 'height' : '';

			// REMOVE INLINE STYLES FROM CONTAINER

			$par.removeStyle(config.prefix + 'transition, transition, ' + config.prefix + 'perspective, perspective, ' + config.prefix + 'perspective-origin, perspective-origin, ' + remH);

			// ADD FINAL DISPLAY PROPERTIES AND OPACITY TO ALL SHOWN ELEMENTS
			// CACHE CURRENT LAYOUT MODE & SORT FOR NEXT MIX

			if (config.layoutMode == 'list') {
				$show.css({ display: config.targetDisplayList, opacity: '1' });
				config.origDisplay = config.targetDisplayList;
			} else {
				$show.css({ display: config.targetDisplayGrid, opacity: '1' });
				config.origDisplay = config.targetDisplayGrid;
			};
			config.origLayout = config.layoutMode;

			var wait = setTimeout(function () {

				// LET GO OF THE BRAKES

				$targets.removeStyle(config.prefix + 'transition, transition');

				// WE'RE DONE MIXING

				config.mixing = false;

				// FIRE "ONMIXEND" CALLBACK

				if (typeof config.onMixEnd == 'function') {
					var output = config.onMixEnd.call(this, config);

					// UPDATE CONFIG IF DATA RETURNED

					config = output ? output : config;
				};
			});
		};
	};

	// SORT FUNCTION

	function sort(sortby, order, $cont, config) {

		// COMPARE BY ATTRIBUTE

		function compare(a, b) {
			var sortAttrA = isNaN(a.attr(sortby) * 1) ? a.attr(sortby).toLowerCase() : a.attr(sortby) * 1,
			    sortAttrB = isNaN(b.attr(sortby) * 1) ? b.attr(sortby).toLowerCase() : b.attr(sortby) * 1;
			if (sortAttrA < sortAttrB) return -1;
			if (sortAttrA > sortAttrB) return 1;
			return 0;
		};

		// REBUILD DOM

		function rebuild(element) {
			if (order == 'asc') {
				$sortWrapper.prepend(element).prepend(' ');
			} else {
				$sortWrapper.append(element).append(' ');
			};
		};

		// RANDOMIZE ARRAY

		function arrayShuffle(oldArray) {
			var newArray = oldArray.slice();
			var len = newArray.length;
			var i = len;
			while (i--) {
				var p = parseInt(Math.random() * len);
				var t = newArray[i];
				newArray[i] = newArray[p];
				newArray[p] = t;
			};
			return newArray;
		};

		// SORT

		$cont.find(config.targetSelector).wrapAll('<div class="mix_sorter"/>');

		var $sortWrapper = $cont.find('.mix_sorter');

		if (!config.origSort.length) {
			$sortWrapper.find(config.targetSelector + ':visible').each(function () {
				$(this).wrap('<s/>');
				config.origSort.push($(this).parent().html().replace(/\s+/g, ''));
				$(this).unwrap();
			});
		};

		$sortWrapper.empty();

		if (sortby == 'reset') {
			$.each(config.startOrder, function () {
				$sortWrapper.append(this).append(' ');
			});
		} else if (sortby == 'default') {
			$.each(config.origOrder, function () {
				rebuild(this);
			});
		} else if (sortby == 'random') {
			if (!config.newOrder.length) {
				config.newOrder = arrayShuffle(config.startOrder);
			};
			$.each(config.newOrder, function () {
				$sortWrapper.append(this).append(' ');
			});
		} else if (sortby == 'custom') {
			$.each(order, function () {
				rebuild(this);
			});
		} else {
			// SORT BY ATTRIBUTE

			if (typeof config.origOrder[0].attr(sortby) === 'undefined') {
				console.log('No such attribute found. Terminating');
				return false;
			};

			if (!config.newOrder.length) {
				$.each(config.origOrder, function () {
					config.newOrder.push($(this));
				});
				config.newOrder.sort(compare);
			};
			$.each(config.newOrder, function () {
				rebuild(this);
			});
		};
		config.checkSort = [];
		$sortWrapper.find(config.targetSelector + ':visible').each(function (i) {
			var $t = $(this);
			if (i == 0) {

				// PREVENT COMPARE RETURNING FALSE POSITIVES ON ELEMENTS WITH NO CLASS/ATTRIBUTES

				$t.attr('data-checksum', '1');
			};
			$t.wrap('<s/>');
			config.checkSort.push($t.parent().html().replace(/\s+/g, ''));
			$t.unwrap();
		});

		$cont.find(config.targetSelector).unwrap();
	};

	// FIND VENDOR PREFIX

	function prefix(el) {
		var prefixes = ["Webkit", "Moz", "O", "ms"];
		for (var i = 0; i < prefixes.length; i++) {
			if (prefixes[i] + "Transition" in el.style) {
				return prefixes[i];
			};
		};
		return "transition" in el.style ? "" : false;
	};

	// REMOVE SPECIFIC STYLES

	$.fn.removeStyle = function (style) {
		return this.each(function () {
			var obj = $(this);
			style = style.replace(/\s+/g, '');
			var styles = style.split(',');
			$.each(styles, function () {

				var search = new RegExp(this.toString() + '[^;]+;?', 'g');
				obj.attr('style', function (i, style) {
					if (style) return style.replace(search, '');
				});
			});
		});
	};

	// COMPARE ARRAYS 

	function compareArr(a, b) {
		if (a.length != b.length) return false;
		for (var i = 0; i < b.length; i++) {
			if (a[i].compare) {
				if (!a[i].compare(b[i])) return false;
			};
			if (a[i] !== b[i]) return false;
		};
		return true;
	};

	// BUILD FILTER ARRAY(S)

	function buildFilterArray(str) {
		// CLEAN FILTER STRING
		str = str.replace(/\s{2,}/g, ' ');
		// FOR EACH PEROID SEPERATED CLASS NAME, ADD STRING TO FILTER ARRAY
		var arr = str.split(' ');
		// IF ALL, REPLACE WITH MIX_ALL
		$.each(arr, function (i) {
			if (this == 'all') arr[i] = 'mix_all';
		});
		if (arr[0] == "") arr.shift();
		return arr;
	};
})(jQuery);

/***/ }),

/***/ "./javascripts/jquery.placeholder.js":
/*!*******************************************!*\
  !*** ./javascripts/jquery.placeholder.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*! http://mths.be/placeholder v2.0.7 by @mathias */
;(function (window, document, $) {

	var isInputSupported = 'placeholder' in document.createElement('input');
	var isTextareaSupported = 'placeholder' in document.createElement('textarea');
	var prototype = $.fn;
	var valHooks = $.valHooks;
	var propHooks = $.propHooks;
	var hooks;
	var placeholder;

	if (isInputSupported && isTextareaSupported) {

		placeholder = prototype.placeholder = function () {
			return this;
		};

		placeholder.input = placeholder.textarea = true;
	} else {

		placeholder = prototype.placeholder = function () {
			var $this = this;
			$this.filter((isInputSupported ? 'textarea' : ':input') + '[placeholder]').not('.placeholder').bind({
				'focus.placeholder': clearPlaceholder,
				'blur.placeholder': setPlaceholder
			}).data('placeholder-enabled', true).trigger('blur.placeholder');
			return $this;
		};

		placeholder.input = isInputSupported;
		placeholder.textarea = isTextareaSupported;

		hooks = {
			'get': function get(element) {
				var $element = $(element);

				var $passwordInput = $element.data('placeholder-password');
				if ($passwordInput) {
					return $passwordInput[0].value;
				}

				return $element.data('placeholder-enabled') && $element.hasClass('placeholder') ? '' : element.value;
			},
			'set': function set(element, value) {
				var $element = $(element);

				var $passwordInput = $element.data('placeholder-password');
				if ($passwordInput) {
					return $passwordInput[0].value = value;
				}

				if (!$element.data('placeholder-enabled')) {
					return element.value = value;
				}
				if (value == '') {
					element.value = value;
					// Issue #56: Setting the placeholder causes problems if the element continues to have focus.
					if (element != document.activeElement) {
						// We can't use `triggerHandler` here because of dummy text/password inputs :(
						setPlaceholder.call(element);
					}
				} else if ($element.hasClass('placeholder')) {
					clearPlaceholder.call(element, true, value) || (element.value = value);
				} else {
					element.value = value;
				}
				// `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
				return $element;
			}
		};

		if (!isInputSupported) {
			valHooks.input = hooks;
			propHooks.value = hooks;
		}
		if (!isTextareaSupported) {
			valHooks.textarea = hooks;
			propHooks.value = hooks;
		}

		$(function () {
			// Look for forms
			$(document).delegate('form', 'submit.placeholder', function () {
				// Clear the placeholder values so they don't get submitted
				var $inputs = $('.placeholder', this).each(clearPlaceholder);
				setTimeout(function () {
					$inputs.each(setPlaceholder);
				}, 10);
			});
		});

		// Clear placeholder values upon page reload
		$(window).bind('beforeunload.placeholder', function () {
			$('.placeholder').each(function () {
				this.value = '';
			});
		});
	}

	function args(elem) {
		// Return an object of element attributes
		var newAttrs = {};
		var rinlinejQuery = /^jQuery\d+$/;
		$.each(elem.attributes, function (i, attr) {
			if (attr.specified && !rinlinejQuery.test(attr.name)) {
				newAttrs[attr.name] = attr.value;
			}
		});
		return newAttrs;
	}

	function clearPlaceholder(event, value) {
		var input = this;
		var $input = $(input);
		if (input.value == $input.attr('placeholder') && $input.hasClass('placeholder')) {
			if ($input.data('placeholder-password')) {
				$input = $input.hide().next().show().attr('id', $input.removeAttr('id').data('placeholder-id'));
				// If `clearPlaceholder` was called from `$.valHooks.input.set`
				if (event === true) {
					return $input[0].value = value;
				}
				$input.focus();
			} else {
				input.value = '';
				$input.removeClass('placeholder');
				input == document.activeElement && input.select();
			}
		}
	}

	function setPlaceholder() {
		var $replacement;
		var input = this;
		var $input = $(input);
		var id = this.id;
		if (input.value == '') {
			if (input.type == 'password') {
				if (!$input.data('placeholder-textinput')) {
					try {
						$replacement = $input.clone().attr({ 'type': 'text' });
					} catch (e) {
						$replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));
					}
					$replacement.removeAttr('name').data({
						'placeholder-password': $input,
						'placeholder-id': id
					}).bind('focus.placeholder', clearPlaceholder);
					$input.data({
						'placeholder-textinput': $replacement,
						'placeholder-id': id
					}).before($replacement);
				}
				$input = $input.removeAttr('id').hide().prev().attr('id', id).show();
				// Note: `$input[0] != input` now!
			}
			$input.addClass('placeholder');
			$input[0].value = $input.attr('placeholder');
		} else {
			$input.removeClass('placeholder');
		}
	}
})(undefined, document, jQuery);

/***/ }),

/***/ "./javascripts/sections/_manager.js":
/*!******************************************!*\
  !*** ./javascripts/sections/_manager.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Manager = function () {
  function Manager() {
    _classCallCheck(this, Manager);

    this.sections = {};
  }

  _createClass(Manager, [{
    key: 'registerSection',
    value: function registerSection(type, actions) {
      console.log(type, actions);
      this.sections[type] = actions;
    }
  }, {
    key: 'start',
    value: function start() {
      var _this = this;

      this.eachType(function (type, actions) {
        _this.queryAll('.locomotive-section[data-locomotive-section-type="' + type + '"]').forEach(function (section, index) {
          _this.runAction(actions, 'load', section);
        });
      });
      this.registerEvents();

      window._sectionsManager = this;
    }
  }, {
    key: 'registerEvents',
    value: function registerEvents() {
      var _this2 = this;

      var events = {
        section: ['load', 'unload', 'select', 'deselect', 'reorder'],
        block: ['select', 'deselect']
      };

      for (var namespace in events) {
        events[namespace].forEach(function (eventType) {
          var eventName = 'locomotive::' + namespace + '::' + eventType;
          var actionName = _this2.eventTypeToActionName(namespace, eventType);

          document.addEventListener(eventName, function (event) {
            _this2.applyRuleToEvent(actionName, event);
          });
        });
      }
    }
  }, {
    key: 'applyRuleToEvent',
    value: function applyRuleToEvent(actionName, event) {
      var _event$detail = event.detail,
          sectionId = _event$detail.sectionId,
          blockId = _event$detail.blockId;

      var section = document.getElementById('locomotive-section-' + sectionId);
      var type = section.getAttribute('data-locomotive-section-type');
      var block = this.queryOne('[data-locomotive-block="section-' + sectionId + '-block-' + blockId + '"]', section);

      this.runAction(this.sections[type], actionName, section, block);
    }
  }, {
    key: 'eventTypeToActionName',
    value: function eventTypeToActionName(namespace, eventType) {
      if (namespace === 'section') return eventType;else return namespace + eventType.charAt(0).toUpperCase() + eventType.slice(1);
    }
  }, {
    key: 'runAction',
    value: function runAction(actions, actionName, section, block) {
      var action = actions[actionName];

      if (action !== undefined) action(section, block);
    }
  }, {
    key: 'eachType',
    value: function eachType(callback) {
      for (var type in this.sections) {
        var actions = this.sections[type];
        callback(type, actions);
      }
    }
  }, {
    key: 'queryAll',
    value: function queryAll(selector, scope) {
      scope = scope ? scope : document;
      return scope.querySelectorAll(selector);
    }
  }, {
    key: 'queryOne',
    value: function queryOne(selector, scope) {
      scope = scope ? scope : document;
      return scope.querySelector(selector);
    }
  }, {
    key: 'testAction',
    value: function testAction(eventType, section, block) {
      var hasBlock = block !== undefined && block !== null;
      var namespace = hasBlock ? 'block' : 'section';
      var sectionId = section.getAttribute('id').replace('locomotive-section-', '');
      var blockId = hasBlock ? block.getAttribute('data-locomotive-block').replace('section-' + sectionId + '-block-', '') : null;
      var detail = { detail: { sectionId: sectionId, blockId: blockId } };
      var eventName = 'locomotive::' + namespace + '::' + eventType;

      document.dispatchEvent(new CustomEvent(eventName, detail));
    }
  }]);

  return Manager;
}();

exports.default = Manager;

/***/ }),

/***/ "./javascripts/sections/about.js":
/*!***************************************!*\
  !*** ./javascripts/sections/about.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Section = {

  // load: (section) => {
  // },

  // unload: (section) => {
  // },

  // select: (section) => {
  // },

  // deselect: (section) => {
  // },

  // reorder: (section) => {
  // },

  // blockSelect: (section, block) => {
  // },

  // blockDeSelect: (section, block) => {
  // }

};

exports.default = Section;

/***/ }),

/***/ "./javascripts/sections/clients.js":
/*!*****************************************!*\
  !*** ./javascripts/sections/clients.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Section = {

  // load: (section) => {
  // },

  // unload: (section) => {
  // },

  // select: (section) => {
  // },

  // deselect: (section) => {
  // },

  // reorder: (section) => {
  // },

  // blockSelect: (section, block) => {
  // },

  // blockDeSelect: (section, block) => {
  // }

};

exports.default = Section;

/***/ }),

/***/ "./javascripts/sections/contact.js":
/*!*****************************************!*\
  !*** ./javascripts/sections/contact.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Section = {

  // load: (section) => {
  // },

  // unload: (section) => {
  // },

  // select: (section) => {
  // },

  // deselect: (section) => {
  // },

  // reorder: (section) => {
  // },

  // blockSelect: (section, block) => {
  // },

  // blockDeSelect: (section, block) => {
  // }

};

exports.default = Section;

/***/ }),

/***/ "./javascripts/sections/home.js":
/*!**************************************!*\
  !*** ./javascripts/sections/home.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Section = {

  // load: (section) => {
  // },

  // unload: (section) => {
  // },

  // select: (section) => {
  // },

  // deselect: (section) => {
  // },

  // reorder: (section) => {
  // },

  // blockSelect: (section, block) => {
  // },

  // blockDeSelect: (section, block) => {
  // }

};

exports.default = Section;

/***/ }),

/***/ "./javascripts/sections/index.js":
/*!***************************************!*\
  !*** ./javascripts/sections/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _home = __webpack_require__(/*! ./home */ "./javascripts/sections/home.js");

Object.defineProperty(exports, 'Home', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_home).default;
  }
});

var _service = __webpack_require__(/*! ./service */ "./javascripts/sections/service.js");

Object.defineProperty(exports, 'Service', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_service).default;
  }
});

var _portfolio = __webpack_require__(/*! ./portfolio */ "./javascripts/sections/portfolio.js");

Object.defineProperty(exports, 'Portfolio', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_portfolio).default;
  }
});

var _about = __webpack_require__(/*! ./about */ "./javascripts/sections/about.js");

Object.defineProperty(exports, 'About', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_about).default;
  }
});

var _clients = __webpack_require__(/*! ./clients */ "./javascripts/sections/clients.js");

Object.defineProperty(exports, 'Client', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_clients).default;
  }
});

var _price = __webpack_require__(/*! ./price */ "./javascripts/sections/price.js");

Object.defineProperty(exports, 'Price', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_price).default;
  }
});

var _contact = __webpack_require__(/*! ./contact */ "./javascripts/sections/contact.js");

Object.defineProperty(exports, 'Contact', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_contact).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ "./javascripts/sections/portfolio.js":
/*!*******************************************!*\
  !*** ./javascripts/sections/portfolio.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Section = {

  // load: (section) => {
  // },

  // unload: (section) => {
  // },

  // select: (section) => {
  // },

  // deselect: (section) => {
  // },

  // reorder: (section) => {
  // },

  // blockSelect: (section, block) => {
  // },

  // blockDeSelect: (section, block) => {
  // }

};

exports.default = Section;

/***/ }),

/***/ "./javascripts/sections/price.js":
/*!***************************************!*\
  !*** ./javascripts/sections/price.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Section = {

  // load: (section) => {
  // },

  // unload: (section) => {
  // },

  // select: (section) => {
  // },

  // deselect: (section) => {
  // },

  // reorder: (section) => {
  // },

  // blockSelect: (section, block) => {
  // },

  // blockDeSelect: (section, block) => {
  // }

};

exports.default = Section;

/***/ }),

/***/ "./javascripts/sections/service.js":
/*!*****************************************!*\
  !*** ./javascripts/sections/service.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Section = {

  // load: (section) => {
  // },

  // unload: (section) => {
  // },

  // select: (section) => {
  // },

  // deselect: (section) => {
  // },

  // reorder: (section) => {
  // },

  // blockSelect: (section, block) => {
  // },

  // blockDeSelect: (section, block) => {
  // }

};

exports.default = Section;

/***/ }),

/***/ "./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./stylesheets/app.scss":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader!./node_modules/postcss-loader/lib!./node_modules/sass-loader/lib/loader.js!./stylesheets/app.scss ***!
  \*****************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target) {
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./stylesheets/app.scss":
/*!******************************!*\
  !*** ./stylesheets/app.scss ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader!../node_modules/postcss-loader/lib!../node_modules/sass-loader/lib/loader.js!./app.scss */ "./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/index.js!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./stylesheets/app.scss");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,